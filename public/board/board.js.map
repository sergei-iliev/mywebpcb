{"version":3,"sources":["app/board/board.js","app/board/d/boardcomponent.js","app/board/events.js","app/board/models/layer.js","app/board/popup/boardpopup.js","app/board/shapes.js","app/board/views/boardloadview.js","app/board/views/boardsaveview.js","app/board/views/boardspanelview.js","app/board/views/layerspanelview.js","app/board/views/togglebuttonview.js","app/core/core.js","app/core/events.js","app/core/line/linebendingprocessor.js","app/core/models/togglebutton.js","app/core/popup/contextmenu.js","app/core/shapes.js","app/core/text/d2font.js","app/core/text/d2glyph.js","app/core/undo.js","app/core/unit.js","app/core/utilities.js","app/core/views/panelview.js","app/d2/d2.js","app/d2/shapes/arc.js","app/d2/shapes/arcellipse.js","app/d2/shapes/box.js","app/d2/shapes/circle.js","app/d2/shapes/ellipse.js","app/d2/shapes/fonttext.js","app/d2/shapes/hexagon.js","app/d2/shapes/line.js","app/d2/shapes/obround.js","app/d2/shapes/oval.js","app/d2/shapes/point.js","app/d2/shapes/polygon.js","app/d2/shapes/polyline.js","app/d2/shapes/rectangle.js","app/d2/shapes/roundrectangle.js","app/d2/shapes/segment.js","app/d2/shapes/utils.js","app/d2/shapes/vector.js","app/d2/text/fontmetrics.js","app/pads/d/footprintcomponent.js","app/pads/events.js","app/pads/popup/footprintpopup.js","app/pads/shapes.js","app/pads/views/footprintloadview.js"],"names":[],"mappingspgvlgtz2CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAprvtXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/QA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/lhgptxjMA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAntlxXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArvldxpnOA;AAAA","file":"public/board/board.js","sourcesContent":["var core = require('core/core');\r\nvar events = require('core/events');\r\nvar togglebutton=require('core/models/togglebutton');\r\nvar ToggleButtonView=require('board/views/togglebuttonview');\r\nvar mywebpcb=require('core/core').mywebpcb;\r\nvar BoardsPanelView=require('board/views/boardspanelview').BoardsPanelView;\r\nvar BoardComponent=require('board/d/boardcomponent').BoardComponent;\r\nvar Board=require('board/d/boardcomponent').Board;\r\n\r\n(function($){\r\n\t\r\n\t\r\n\tj$=jQuery.noConflict();\r\n\t\r\n\tj$( document ).ready(function() {\r\n\t\t    _.extend(mywebpcb, Backbone.Events);\r\n\t\t\t\r\n\t\t    //prevent context menu\r\n\t\t\tdocument.body.oncontextmenu = (e) => {e.preventDefault()};\r\n\t\t\t\r\n\t\t    //enable tooltips\r\n\t\t\tj$('[data-toggle=\"tooltip\"]').tooltip();\r\n\t\t\t\r\n\t\t\tvar bc=new BoardComponent('mycanvas','popup-menu');\r\n\t\t\t//create ui\r\n\t\t\tvar toggleButtonCollection=new togglebutton.ToggleButtonCollection(\r\n\t\t\t[\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'exporttoclipboardid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'importfromclipboardid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'addunitid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'newboardid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'boardoutlinerectid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'boardoutlineroundrectid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'boardoutlinecircleid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'printfootrpintid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'saveid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'loadid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'zoominid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'zoomoutid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'rotateleftid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'rotaterightid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'grabid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'tocenterid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'layerid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({active:true,id:'selectionid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'loadfootprintid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'ellipseid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'arcid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'lineid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'rectid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'solidregionid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'trackid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'holeid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'viaid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'labelid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'copperareaid',group:'lefttogglegroup'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'anchorid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'originid'}),\r\n\t\t\t new togglebutton.ToggleButtonModel({id:'measureid',group:'lefttogglegroup'})\r\n\t\t\t ]);\r\n\t\t\r\n\t\t\t var view=new ToggleButtonView({collection:toggleButtonCollection,boardComponent:bc});\r\n\t\t\t bc.setView(view);\r\n\t\t\t //creat tree\t\t\t \t\t\t \r\n\t\t\t j$('#jqxTree').jqxTree({ height: '250px', width: '100%'});\r\n\t\t\t j$('#jqxTree').css('visibility', 'visible');\r\n\t\t\t    \r\n\t\t\t var boardsPanel=new BoardsPanelView({boardComponent:bc,name:'jqxTree',height: '250px', width: '170px'});\r\n\t\t\t     boardsPanel.render();\r\n\t\t\t\t//***add footprint\r\n\t\t\t bc.getModel().add(new Board(core.MM_TO_COORD(100),core.MM_TO_COORD(50)));\r\n\t\t\t bc.getModel().setActiveUnit(0);\r\n\t\t\t bc.getModel().fireUnitEvent({target:bc.getModel().getUnit(),type:events.Event.SELECT_UNIT});\r\n\t\t\t\t\r\n\t\t\t bc.componentResized();\r\n\t\t\t bc.repaint();\r\n\t\t\t \r\n\t\t\t//init footprint load dialog\r\n\t\t\t\tj$('#FootprintLoadDialog').jqxWindow({\r\n\t\t\t\t    resizable: false,\r\n\t\t\t\t    position: 'center',\r\n\t\t            width: 520,\r\n\t\t            height: 400,\r\n\t\t            autoOpen:false\r\n             });\r\n\t\t\t//init board load dialog\r\n\t\t\t j$('#BoardLoadDialog').jqxWindow({\r\n\t\t\t\t    resizable: false,\r\n\t\t\t\t    position: 'center',\r\n\t\t            width: 520,\r\n\t\t            height: 400,\r\n\t\t            autoOpen:false\r\n             });\r\n\t\t\t  //init save dialog\r\n\t\t\t j$('#BoardSaveDialog').jqxWindow({\r\n\t\t\t\t    resizable: false,\r\n\t\t\t\t    position: 'center',\r\n\t\t            width: 350,\r\n\t\t            height: 270,\r\n\t\t            autoOpen:false\r\n             });\t\r\n\t\t\t   //load demo board\r\n\t\t      //loadDemo(bc);\r\n});\t\r\nloadDemo=function(bc){\r\n\t\r\n j$.ajax({\r\n     type: 'GET',\r\n     contentType: 'application/xml',\r\n     url: 'demo/board.xml',\r\n     dataType: \"xml\",\r\n     beforeSend:function(){\r\n\t          j$('#mywebboardid').block({message:'<h5>Loading...</h5>'});\t\r\n\t    },\r\n     success: function(data, textStatus, jqXHR){\r\n\r\n   //****load it    \t\r\n   \t\t  bc.clear();\r\n   \t\t  bc.getModel().parse(data);\r\n   \t\t  bc.getModel().setActiveUnit(0);\r\n   \t\t  bc.componentResized();\r\n             //position on center\r\n           var rect=bc.getModel().getUnit().getBoundingRect();\r\n           bc.setScrollPosition(rect.center.x,rect.center.y);\r\n           bc.getModel().fireUnitEvent({target:bc.getModel().getUnit(),type: events.Event.SELECT_UNIT});\r\n   \t\t   bc.repaint();\r\n   \t\t  //set button group\r\n   \t\t   bc.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\t        \r\n     },\r\n     \r\n     error: function(jqXHR, textStatus, errorThrown){\r\n         \talert(errorThrown+\":\"+jqXHR.responseText);\r\n     },\r\n     complete:function(jqXHR, textStatus){\r\n     \tj$('#mywebboardid').unblock();\r\n     }\t        \r\n });\t\r\n}\r\n})(jQuery);","var Unit = require('core/unit').Unit;\r\nvar UnitContainer = require('core/unit').UnitContainer;\r\nvar UnitComponent = require('core/unit').UnitComponent;\r\nvar UnitMgr = require('core/unit').UnitMgr;\r\nvar mywebpcb=require('core/core').mywebpcb;\r\nvar core = require('core/core');\r\nvar utilities = require('core/utilities');\r\nvar events=require('core/events');\r\nvar BoardShapeFactory=require('board/shapes').BoardShapeFactory;\r\nvar BoardEventMgr = require('board/events').BoardEventMgr;\r\nvar CompositeLayer = require('core/core').CompositeLayer;\r\nvar BoardContextMenu=require('board/popup/boardpopup').BoardContextMenu;\r\nvar PCBFootprint=require('board/shapes').PCBFootprint;\r\nvar PCBLabel=require('board/shapes').PCBLabel;\r\nvar PCBCircle=require('board/shapes').PCBCircle;\r\nvar PCBArc=require('board/shapes').PCBArc;\r\nvar PCBVia=require('board/shapes').PCBVia;\r\nvar PCBHole=require('board/shapes').PCBHole;\r\nvar PCBLine=require('board/shapes').PCBLine;\r\nvar PCBRoundRect=require('board/shapes').PCBRoundRect;\r\nvar PCBCopperArea=require('board/shapes').PCBCopperArea;\r\nvar PCBTrack=require('board/shapes').PCBTrack;\r\nvar PCBSolidRegion=require('board/shapes').PCBSolidRegion;\r\nvar SolidRegionEventHandle=require('pads/events').SolidRegionEventHandle;\r\nvar d2=require('d2/d2');\r\n\r\nvar LineEventHandle=require('core/events').LineEventHandle;\r\nvar CopperAreaEventHandle=require('board/events').CopperAreaEventHandle;\r\nvar TrackEventHandle=require('board/events').TrackEventHandle;\r\nvar DefaultLineBendingProcessor=require('core/line/linebendingprocessor').DefaultLineBendingProcessor;\r\n\r\nvar shapes=require('pads/shapes');\r\n//**********************UnitMgr***************************************\r\nvar BoardMgr=(function(){\r\n\tvar instance=null;\r\n\r\nclass manager{\r\n\tdeleteBoardOutlineShapes(board){\r\n\t  \tlet uuids=[];\r\n\t  \tfor(let shape of board.shapes){\t  \t\t\r\n\t  \t\tif((shape.copper.getLayerMaskID()&core.Layer.BOARD_OUTLINE_LAYER)!=0){\r\n\t  \t\t  uuids.push(shape.uuid);\r\n\t  \t\t}\r\n\t  \t}\r\n\t  \tfor(let uuid of uuids){\r\n\t  \t   board.remove(uuid);\r\n\t  \t} \r\n\t  \t\r\n\t}\r\n\tcreatePCBFootprint(footprint,activeSide) {\r\n        var pcbfootprint = new PCBFootprint(core.Layer.LAYER_FRONT);\r\n        var len=footprint.shapes.length;\r\n \t    for(var i=0;i<len;i++){\r\n \t    \tvar shape=footprint.shapes[i];\r\n\t               if (shape instanceof shapes.GlyphLabel) {\r\n\t   \t\t\t\t if(shape.texture.tag==\"value\"){\r\n\t   \t\t\t\t\tpcbfootprint.value.copy(shape.texture); \r\n\t   \t\t\t\t\tpcbfootprint.value.layermaskId=shape.copper.getLayerMaskID();\r\n\t   \t\t\t\t\tcontinue;\r\n\t   \t\t\t\t }\r\n\t   \t\t\t\t if(shape.texture.tag==\"reference\"){\r\n\t\t   \t\t\t    pcbfootprint.reference.copy(shape.texture); \r\n\t\t   \t\t\t    pcbfootprint.reference.layermaskId=shape.copper.getLayerMaskID();\r\n\t\t   \t\t\t    continue;\r\n\t   \t\t\t\t }  \r\n\t               }\r\n\t         \r\n\t         pcbfootprint.add(shape.clone());\r\n\t               \r\n\t               \r\n\t    }\r\n \t    pcbfootprint.setDisplayName(footprint.unitName);\r\n        pcbfootprint.units=footprint.getGrid().getGridUnits();\r\n        pcbfootprint.val=footprint.getGrid().getGridValue();\r\n \t    return pcbfootprint; \t          \r\n    }       \r\n    \r\n    }\r\n\treturn {getInstance:function(){\r\n\t\t    if (!instance) {\r\n              instance = new manager();\r\n            }\r\n            return instance;\r\n\t      }\r\n\t};\r\n\t\t\r\n\t\r\n})();\r\nclass Board extends Unit{\r\nconstructor(width,height) {\r\n  super(width,height); \r\n  this.shapeFactory = new BoardShapeFactory();\r\n  this.compositeLayer = new CompositeLayer();  \r\n}\t\r\nclone(){\r\n\t var copy=new Board(this.width,this.height);\r\n\t copy.silent=true;\t \r\n\t copy.grid=this.grid.clone();\r\n\t copy.unitName=this.unitName;\r\n     var len=this.shapes.length;\r\n\t for(var i=0;i<len;i++){\r\n         var clone=this.shapes[i].clone();\r\n\t       copy.add(clone);\r\n\t }\r\n\t copy.silent=false;\r\n\t return copy;\r\n\t}\r\nadd(shape){\r\n    if (this.shapes.length == 0) {\r\n        super.add(shape);\r\n    } else {\r\n    \tlet len=this.shapes.length;\r\n    \tshape.owningUnit=this;\r\n    \tfor(let i=0;i<len;i++){                      \r\n            if (this.shapes[i].getDrawingLayerPriority() >= shape.getDrawingLayerPriority()) {             \r\n                this.shapes.splice(i, 0,shape);           \t    \r\n        \t    this.fireShapeEvent({target:shape,type:events.Event.ADD_SHAPE});\r\n                return;\r\n            }\r\n    \t}\r\n        super.add(shape);\r\n    }\r\n}\r\nbuildClickedShapesList(x,  y,  isTextIncluded){\t\r\n\t   var orderElements = [];\r\n\t   let len=this.shapes.length;\r\n\t   for(i=len;i-->0;){   \r\n\t       if(isTextIncluded){\r\n\t    \tif((undefined !=this.shapes[i]['getTextureByTag'])&&this.shapes[i].getClickedTexture(x, y)){                               \r\n\t             orderElements.splice(0, 0, this.shapes[i]);\r\n\t             continue;\r\n\t        }\r\n\t       }     \t       \r\n\t       if(this.isShapeVisibleOnLayers(this.shapes[i])&&this.shapes[i].isClickedOnLayers(x, y,this.compositeLayer.getLayerMaskID())){\t   \r\n\t          orderElements.push(this.shapes[i]);\t       \r\n\t       }  \r\n\t   }\r\n\t   return orderElements;\r\n}\r\n\r\ngetClickedShape( x,  y,  isTextIncluded) {\r\n        let clickedShapes = this.buildClickedShapesList(x,y,isTextIncluded);\r\n        if(clickedShapes.length==0){\r\n            return null;\r\n        }\r\n        //Text?       \r\n\t\tif((undefined !=clickedShapes[0]['getTextureByTag'])&&clickedShapes[0].getClickedTexture(x, y)){                                            \r\n             return clickedShapes[0];\r\n        }\r\n                \r\n        let result=null;\r\n        for(let shape of clickedShapes){\r\n            if(result==null){\r\n                result=shape;\r\n            }else if(shape.getDrawingLayerPriority()==result.getDrawingLayerPriority()){\r\n                if(shape.getClickableOrder()<result.getClickableOrder()){\r\n                    result=shape;\r\n                }\r\n            }\r\n        \r\n        }\r\n        return result;  \r\n}\r\nreorder(){\r\n    this.shapes.sort(function(a,b){\r\n\t\tif (a.getDrawingLayerPriority() > b.getDrawingLayerPriority()) {  \r\n\t\t\treturn 1;\r\n\t\t}else if(a.getDrawingLayerPriority() < b.getDrawingLayerPriority()){\r\n\t\t\treturn -1;\r\n\t\t}else\r\n\t\t\treturn 0;\r\n\t});\r\n}\r\nsetActiveSide(side) {\r\n    this.compositeLayer.activeSide=side;\r\n    this.reorder();\r\n}\r\nselectNetAt(target){\r\n   let targets=new core.Queue();\t   \r\n   targets.enqueue(target);\r\n   \r\n   let selectedShapes=new Set();\r\n   selectedShapes.add(target.uuid);\r\n   \r\n   while(!targets.isEmpty()){\r\n\t   let shape=targets.dequeue();  \r\n\t   let list=shape.getNetShapes(selectedShapes);\r\n       for(let item of list){\r\n           if(!selectedShapes.has(item.uuid)){\r\n               selectedShapes.add(item.uuid);\r\n               targets.enqueue(item);\r\n           }\r\n       }\r\n   }\r\n  \r\n   for(let  uuid of selectedShapes){\r\n       this.getShape(uuid).setSelected(true);\r\n   }\r\n}\r\n\r\npaint(g2, viewportWindow){\r\n\t   let len=this.shapes.length;\r\n \t   for(let i=0;i<len;i++){ \t\t \r\n \t\t if((this.shapes[i] instanceof PCBFootprint)||(this.shapes[i].copper.getLayerMaskID()&this.compositeLayer.getLayerMaskID())!=0){   \t\t   \r\n \t\t\t this.shapes[i].paint(g2,viewportWindow,this.scalableTransformation,this.compositeLayer.getLayerMaskID());\r\n \t\t }\r\n \t   }\r\n \t   this.shapes.forEach((shape)=>{ \t    \t\r\n\t\t\tif ((typeof shape.drawControlShape === 'function')&&shape.isSelected()) {\t\t\t\t\t                \r\n\t\t\t\tshape.drawControlShape(g2, viewportWindow,this.scalableTransformation);\r\n        \t}\r\n \t   });\r\n \t   //grid\r\n       this.grid.paint(g2,viewportWindow,this.scalableTransformation);\r\n        //coordinate system\r\n       if(this.coordinateSystem!=null){\r\n         this.coordinateSystem.paint(g2, viewportWindow,this.scalableTransformation);\r\n       }\t\r\n         //ruler\r\n\t   this.ruler.paint(g2, viewportWindow,this.scalableTransformation);\r\n        //frame\r\n       if(this.frame!=null){\r\n\t     this.frame.paint(g2, viewportWindow,this.scalableTransformation);\r\n       }\r\n}\r\nparse(data){\t\r\n\tthis.unitName=j$(data).find(\"name\").first().text();\r\n\tthis.grid.setGridUnits(j$(data).find(\"units\").first().attr(\"raster\"),core.Units.MM);\r\n\tvar that=this;\r\n\t\r\n   \tj$(data).find('symbols').children().each(function(){   \t  \r\n   \t   var shape=that.shapeFactory.createShape(this);   \t   \r\n       if(shape!=null){    \r\n         that.add(shape);\r\n       }\t  \r\n   \t});\t\r\n}\r\nformat(){   \r\n\t   var xml=\"<board width=\\\"\"+ this.width +\"\\\" height=\\\"\"+this.height+\"\\\">\\r\\n\"; \r\n\t   xml+=\"<name>\"+this.unitName+\"</name>\\r\\n\";\r\n\t   xml+=\"<units raster=\\\"\" + this.grid.getGridValue() + \"\\\">MM</units>\\r\\n\";\r\n\t   \r\n\t   xml+=\"<symbols>\\r\\n\";\r\n\t   this.shapes.forEach(s=>{\r\n\t\t  xml+=s.toXML()+\"\\r\\n\";\r\n\t   });\r\n\t   xml+=\"</symbols>\\r\\n\";   \r\n\t   xml+=\"</board>\";\r\n\t   return xml;\r\n\t}\t\r\n\r\n\r\n}\r\n\r\nclass BoardContainer extends UnitContainer{\r\nconstructor() {\r\n      super();\r\n  \t  this.formatedFileName=\"Boards\";\r\n  \t}\r\nparse(xml){\r\n\t  this.workspacename=(j$(xml).find(\"workspaceName\").text());\t   \t\r\n\t  this.setFileName(j$(xml).find(\"projectName\").text());\r\n\t  var that=this;\r\n\t  \r\n      j$(xml).find(\"board\").each(j$.proxy(function(){\r\n    \tvar board=new Board(Number.parseInt(j$(this).attr(\"width\")),Number.parseInt(j$(this).attr(\"height\")));\r\n    \t//need to have a current unit \r\n        that.add(board);\r\n        board.parse(this);\r\n    }),that);\t\r\n}\r\nformat() {\r\n    var xml=\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\"; \r\n    xml+=\"<boards identity=\\\"Board\\\" version=\\\"\"+utilities.version.BOARD_VERSION+\"\\\">\\r\\n\";      \r\n\tlet units=this.unitsmap.values();\r\n\tfor(let i=0;i<this.unitsmap.size;i++){\r\n      let unit=units.next().value;\r\n      xml+=unit.format();\r\n\t  xml+=\"\\r\\n\";\r\n\t}    \t    \t\r\n    xml+=\"</boards>\";\r\n    return xml;\r\n}\r\n\r\n}\r\n\r\nclass BoardComponent extends UnitComponent{\r\nconstructor(canvas,popup) {\r\n     super(canvas,popup);    \r\n\t\r\n\tthis.eventMgr=new BoardEventMgr(this); \r\n\tthis.model=new BoardContainer();\r\n\tthis.popup=new BoardContextMenu(this,popup);\r\n    this.lineBendingProcessor=new DefaultLineBendingProcessor();  \r\n}\r\nsetMode(_mode){\r\n\t  this.mode=_mode;\r\n\t  let shape=null;\r\n      if (this.cursor != null) {\r\n          this.cursor.clear();\r\n          this.cursor = null;\r\n      }\r\n      this.eventMgr.resetEventHandle();\r\n      \r\n      switch (this.mode) {\r\n\t\tcase core.ModeEnum.SOLID_REGION:\r\n         \tbreak;\r\n      \t\r\n      case core.ModeEnum.HOLE_MODE:          \r\n          shape = new PCBHole();\r\n          this.setContainerCursor(shape);\r\n          this.getEventMgr().setEventHandle(\"cursor\", shape);\r\n          break;      \r\n      case core.ModeEnum.VIA_MODE:          \r\n          shape = new PCBVia();\r\n          this.setContainerCursor(shape);\r\n          this.getEventMgr().setEventHandle(\"cursor\", shape);\r\n          break;\r\n      case  core.ModeEnum.RECT_MODE:\r\n          shape=new PCBRoundRect(0,0,core.MM_TO_COORD(4),core.MM_TO_COORD(4),core.MM_TO_COORD(1),core.MM_TO_COORD(0.2),core.Layer.SILKSCREEN_LAYER_FRONT);\r\n          this.setContainerCursor(shape);               \r\n          this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n        break;\r\n      case  core.ModeEnum.ELLIPSE_MODE:\r\n          shape=new PCBCircle(0,0,core.MM_TO_COORD(4),core.MM_TO_COORD(0.2), core.Layer.SILKSCREEN_LAYER_FRONT);\r\n          this.setContainerCursor(shape);               \r\n          this.eventMgr.setEventHandle(\"cursor\",shape); \r\n        break;\r\n      case  core.ModeEnum.ARC_MODE:\r\n      \t  shape=new PCBArc(0,0,core.MM_TO_COORD(4),core.MM_TO_COORD(0.2), core.Layer.SILKSCREEN_LAYER_FRONT);\r\n          this.setContainerCursor(shape);               \r\n          this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n        break;\r\n      case  core.ModeEnum.LABEL_MODE:\r\n          shape=new PCBLabel(core.Layer.SILKSCREEN_LAYER_FRONT);\r\n          this.setContainerCursor(shape);               \r\n          this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n        break;\r\n      case core.ModeEnum.ORIGIN_SHIFT_MODE:  \r\n          this.eventMgr.setEventHandle(\"origin\",null);   \r\n          break;          \r\n      default:\r\n        this.repaint();\r\n    }       \r\n}\r\n\r\nmouseDown(event){\r\n    event.preventDefault();\r\n    //this.canvas.focus();\r\n\tif (this.getModel().getUnit() == null) { \r\n\t   return; \r\n\t}\r\n\r\n    this.canvas.on('mousemove',j$.proxy(this.mouseDrag,this));\r\n    this.canvas.off('mousemove',j$.proxy(this.mouseMove,this));\r\n    \r\n\t//****Dynamic event handling\r\n    var scaledEvent =this.getScaledEvent(event);\r\n\t\r\n\r\n\tif(this.getModel().getUnit()==null){\r\n          this.getEventMgr().resetEventHandle();\r\n    }else{\r\n    \tswitch (this.getMode()){\r\n    \tcase  core.ModeEnum.COMPONENT_MODE:\r\n               /*\r\n                * 1.Coordinate origin\r\n                * 2.Control rect/reshape point\r\n                * 3.selected shapes comes before control points\r\n                */\t \r\n    \t  if(this.getModel().getUnit().getCoordinateSystem()!=null){ \t\t\r\n           if(this.getModel().getUnit().getCoordinateSystem().isClicked(scaledEvent.x, scaledEvent.y)){\r\n              this.getEventMgr().setEventHandle(\"origin\",null); \r\n        \t  break;\r\n           }  \r\n    \t  }\r\n    \t  var shape=this.getModel().getUnit().isControlRectClicked(scaledEvent.x, scaledEvent.y);\r\n\t\t  if(shape!=null){                                    \r\n                if(shape instanceof PCBArc){\r\n                \tif(shape.arcType==core.ArcType.CENTER_POINT_ARC){\r\n                     if(shape.isStartAnglePointClicked(scaledEvent.x , scaledEvent.y)){ \r\n                         this.getEventMgr().setEventHandle(\"arc.start.angle\",shape);                    \r\n                     }else if(shape.isExtendAnglePointClicked(scaledEvent.x , scaledEvent.y)){\r\n                         this.getEventMgr().setEventHandle(\"arc.extend.angle\",shape);                      \r\n                     }else if(shape.isMidPointClicked(scaledEvent.x , scaledEvent.y)){\r\n                    \t  this.getEventMgr().setEventHandle(\"arc.mid.point\",shape);\r\n                     }\r\n                \t}else{    \r\n                  \t  if(shape.isMidPointClicked(scaledEvent.x , scaledEvent.y)){\r\n                      \t  this.getEventMgr().setEventHandle(\"arc.mid.point\",shape);\r\n                        }else{\r\n                      \t  this.getEventMgr().setEventHandle(\"arc.resize\",shape);\r\n                        }\r\n                \t}\r\n                  }else{\r\n\t\t\t\t\t\tthis.getEventMgr().setEventHandle(\"resize\",shape); \r\n                  }              \r\n\t\t  }else{\r\n\t\t     shape = this.getModel().getUnit().getClickedShape(scaledEvent.x, scaledEvent.y, true);\r\n\t\t     \r\n\t\t     if(shape!=null){\r\n\t\t\t   if ((UnitMgr.getInstance().isBlockSelected(this.getModel().getUnit().shapes)&& shape.isSelected())||event.ctrlKey){\t\t\t\t\t   \r\n                 this.getEventMgr().setEventHandle(\"block\", shape);\t\t\t\t\t\t \r\n\t\t       }else if ((!(shape instanceof PCBLabel))&&(undefined !=shape['getTextureByTag'])&&shape.getClickedTexture(scaledEvent.x, scaledEvent.y)!=null){\r\n\t\t\t     this.getEventMgr().setEventHandle(\"texture\",shape);\r\n               }else if(shape instanceof PCBFootprint){\r\n\t              //is this pad click?\r\n                  var pad=shape.isPadClicked(scaledEvent.x, scaledEvent.y);                                     \t                                  \t  \t  \t\t          \r\n                  this.getEventMgr().setEventHandle(\"symbol\",shape,pad);\r\n\t\t\t\t  //shape.selectedPad=pad\t \r\n\t\t\t   }else if(shape instanceof PCBTrack){\t\t\t\t    \r\n\t                if(shape.isSegmentClicked(scaledEvent)){\r\n\t\t\t\t\t  if(shape.isSingleSegment()){\r\n\t\t\t             this.getEventMgr().setEventHandle(\"move\",shape);\r\n                      }else{\r\n                         this.getEventMgr().setEventHandle(\"move.segment\",shape);\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t}\r\n\t\t       }else\r\n\t\t         this.getEventMgr().setEventHandle(\"move\",shape);\r\n\t\t     }else{\r\n\t\t         this.getEventMgr().setEventHandle(\"component\",null);\r\n\t\t     }\r\n\t\t  }\r\n\t\t  break;\r\n    \tcase core.ModeEnum.TRACK_MODE:\r\n    \t\t\r\n            //***is this a new wire\r\n            if ((this.getEventMgr().getTargetEventHandle() == null) ||\r\n                !(this.getEventMgr().getTargetEventHandle() instanceof TrackEventHandle)) {\r\n               \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape = new PCBTrack(core.MM_TO_COORD(0.4),core.Layer.LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);                \r\n            \tthis.getEventMgr().setEventHandle(\"track\", shape);\r\n            }\r\n\t    break;\r\n    \tcase core.ModeEnum.SOLID_REGION:\r\n            //is this a new copper area\r\n            if ((this.getEventMgr().targetEventHandle == null) ||\r\n                !(this.getEventMgr().targetEventHandle instanceof SolidRegionEventHandle)) {\r\n            \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape =new PCBSolidRegion(core.Layer.LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);\r\n                this.getEventMgr().setEventHandle(\"solidregion\", shape);\r\n            }     \t\t\r\n    \t\tbreak;\t    \r\n        case  core.ModeEnum.COPPERAREA_MODE:\r\n            //is this a new copper area\r\n            if ((this.getEventMgr().targetEventHandle == null) ||\r\n                !(this.getEventMgr().targetEventHandle instanceof CopperAreaEventHandle)) {\r\n            \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape =\r\n                    new PCBCopperArea(core.Layer.LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);\r\n                this.getEventMgr().setEventHandle(\"copperarea\", shape);\r\n            }    \t  \r\n      \t  break;\t    \r\n    \tcase core.ModeEnum.LINE_MODE:\r\n            //***is this a new wire\r\n            if ((this.getEventMgr().getTargetEventHandle() == null) ||\r\n                !(this.getEventMgr().getTargetEventHandle() instanceof LineEventHandle)) {\r\n            \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape = new PCBLine(core.MM_TO_COORD(0.3),core.Layer.SILKSCREEN_LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);\r\n                \r\n            \tthis.getEventMgr().setEventHandle(\"line\", shape);\r\n            }\r\n    \t  break;\t    \r\n    \tcase core.ModeEnum.DRAGHEAND_MODE:  \r\n    \t\tthis.getEventMgr().setEventHandle(\"dragheand\", null);\r\n    \t  break;\t\r\n    \tcase core.ModeEnum.MEASUMENT_MODE:\r\n            if ((this.getEventMgr().getTargetEventHandle() != null) ||\r\n                (this.getEventMgr().getTargetEventHandle() instanceof events.MeasureEventHandle)) {\r\n                 this.getModel().getUnit().ruler.resizingPoint=null;\r\n                 this.getEventMgr().resetEventHandle();\r\n                 this.repaint();\r\n            }else{\r\n               this.getEventMgr().setEventHandle(\"measure\",this.getModel().getUnit().ruler);   \r\n\t\t\t   this.getModel().getUnit().ruler.setX(scaledEvent.x);\r\n\t\t\t   this.getModel().getUnit().ruler.setY(scaledEvent.y);                   \r\n            }\r\n\t        break;\t    \t  \r\n    \t}\r\n    \t\r\n\t}\r\n\t\r\n\tif (this.getEventMgr().getTargetEventHandle() != null) {\r\n      this.getEventMgr().getTargetEventHandle().mousePressed(scaledEvent);\r\n    } \r\n\t\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports ={\r\n\t\t   BoardContainer,\r\n\t\t   Board,\r\n\t\t   BoardMgr,\r\n\t\t   BoardComponent\t   \r\n}","var EventHandle = require('core/events').EventHandle;\r\nvar events = require('core/events');\r\nvar core = require('core/core');\r\nvar pad_events=require('pads/events');\r\nvar d2=require('d2/d2');\r\nvar MoveLineSegmentHandle=require('core/events').MoveLineSegmentHandle;\r\n\r\n\r\n\r\nclass FootprintEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\nmousePressed(event){\r\n       this.mx=event.x;\r\n\t   this.my=event.y;\r\n\r\n\t   if(super.isRightMouseButton(event)){                       \r\n\t\t\t    this.component.getModel().getUnit().setSelected(false);\r\n\t\t\t    this.target.setSelected(true);\r\n\t\t\t\tthis.component.repaint();\r\n\t\t\t\tthis.component.popup.registerFootprintPopup(this.target,event);            \r\n\t            return;\r\n\t   }\r\n\t   if(event.data.ctrlKey){\r\n\t\t   this.component.getModel().getUnit().setSelectedShape(this.target.uuid,\r\n                   !this.target.isSelected());\r\n    \r\n           this.ctrlButtonPress = true;\r\n           this.component.repaint();\r\n           return;\t\t   \r\n\t   }\r\n\t   this.component.getModel().getUnit().setSelected(false);\r\n\t   this.target.setSelected(true);\r\n\t   this.component.repaint();\t   \r\n\t    \r\n\t }\r\n mouseReleased(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t}\r\n\t\tthis.target.alignToGrid(false || this.component.getParameter(\"snaptogrid\"));\r\n\t\t\t\t \r\n\t\t//this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t \r\n\t mouseDragged(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t} \r\n\t \tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t\t\r\n\t    this.target.move(new_mx - this.mx, new_my - this.my);\r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseMove(event){\r\n\t \r\n\t }\t \r\nclear(){\r\n this.target.selectedPad=null\t\t \r\n\t }\t\r\n}\r\nclass TrackEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\r\n}\r\n\r\nattach() {        \r\n    super.attach();\r\n    this.component.lineBendingProcessor.initialize(this.target);\r\n}\r\nmousePressed(event){\r\n    if(this.isRightMouseButton(event)){          \r\n\t\tthis.component.popup.registerTrackPopup(this.target,event);            \r\n        return;\r\n    }\r\n    \r\n    this.component.getModel().getUnit().setSelected(false);\r\n    this.target.setSelected(true); \r\n    \r\n    let p;      \r\n    if(this.component.getParameter(\"snaptogrid\")){        \r\n        p=this.component.getModel().getUnit().getGrid().positionOnGrid(event.x,event.y);  \r\n        this.component.lineBendingProcessor.isGridAlignable=true;\r\n    }else{\r\n    \tp=new d2.Point(event.x,event.y);\r\n        this.component.lineBendingProcessor.isGridAlignable=false;\r\n    }\r\n    \r\n    //this.component.getModel().getUnit().fireShapeEvent(new ShapeEvent(this.target, ShapeEvent.PROPERTY_CHANGE)); \r\n    \r\n    let justcreated=this.target.getLinePoints().length==1; \r\n        \r\n    if(this.component.lineBendingProcessor.addLinePoint(p)){\r\n        if(justcreated){\r\n            //getComponent().getModel().getUnit().registerMemento(getTarget().getState(MementoType.CREATE_MEMENTO));   \r\n            //getComponent().getModel().getUnit().registerMemento(getTarget().getState(MementoType.MOVE_MEMENTO));    \r\n        }\r\n        if(this.target.getLinePoints().length>=2){\r\n           //this.component.getModel().getUnit().registerMemento(getTarget().getState(MementoType.MOVE_MEMENTO));    \r\n        }            \r\n    }\r\n    this.component.repaint(); \r\n}\r\nmouseReleased(event){\r\n\t\r\n}\r\nmouseMove(event){\r\n\tthis.component.lineBendingProcessor.moveLinePoint(event.x,event.y);    \r\n\tthis.component.repaint();   \t \r\n}\t\r\nmouseDragged(event){\r\n\t\r\n}\r\ndblClick(){\t\r\n\tthis.target.reset();\r\n    this.target.setSelected(false);\r\n    this.component.getEventMgr().resetEventHandle();\r\n    this.component.repaint();\t \r\n} \r\nkeyPressed(event){\r\n\t if(this.component.getEventMgr().getTargetEventHandle() != null&&event.keyCode==27){   //ESCAPE      \r\n\t\t this.component.lineBendingProcessor.release();\r\n\t\t this.component.getEventMgr().resetEventHandle();\r\n\t\t this.component.repaint();\r\n\t }   \r\n\t}\r\ndetach() {\r\n    this.target.reset(); \r\n    if(this.target.getLinePoints().length<2){\r\n        this.target.owningUnit.remove(this.target.uuid);\r\n    }\r\n    super.detach();\r\n}\r\n}\r\nclass CopperAreaEventHandle extends EventHandle{\r\n\tconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\nmousePressed(event){\r\n      this.mx=event.x;\r\n\t  this.my=event.y;\r\n\t  if(super.isRightMouseButton(event)){                                  \r\n           return;\r\n      }\r\n      this.component.getModel().getUnit().setSelected(false);\r\n\t  this.target.setSelected(true);\r\n      let p;      \r\n      \r\n      if(this.component.getParameter(\"snaptogrid\")){\r\n        p=this.component.getModel().getUnit().getGrid().positionOnGrid(event.x,event.y);       \t\t\r\n      }else{\r\n        p=new d2.Point(event.x,event.y);\r\n      }\r\n\r\n      \r\n      let justcreated=this.target.polygon.points.length==2;\r\n      \r\n      if(this.target.getLinePoints().length==0){\r\n    \t  this.target.add(p);    \r\n          //avoid point over point\r\n      }else if(!this.target.getLinePoints()[this.target.getLinePoints().length-1].equals(p)){\r\n    \t  this.target.add(p);           \r\n      }\r\n      \r\n      \r\n\t  this.component.repaint();\t   \r\n\t    \r\n\t }\r\nmouseReleased(event){\r\n\t\t\r\n\t }\r\n\t \r\nmouseDragged(event){\r\n\t\t\r\n\t }\r\nmouseMove(event){\r\n    this.target.floatingEndPoint.set(event.x,event.y);   \r\n    this.component.repaint();\t \r\n\t }\t \r\ndblClick(){\r\n      \r\n    this.target.setSelected(false);\r\n    this.component.getEventMgr().resetEventHandle();\r\n    this.component.repaint();\t \r\n} \r\ndetach() {\r\n    this.target.reset(); \r\n    if(this.target.polygon.points.length<3){\r\n        this.target.owningUnit.remove(this.target.uuid);\r\n    }\r\n    super.detach();\r\n}\t\r\n}\r\n\r\nclass BoardEventMgr{\r\n\t constructor(component) {\r\n\t    this.component=component;\r\n\t\tthis.targetEventHandle=null;\t\r\n\t\tthis.hash = new Map();\r\n\t\tthis.hash.set(\"arc.mid.point\",new pad_events.ArcMidPointEventHandle(component));\r\n\t\tthis.hash.set(\"arc.start.angle\",new pad_events.ArcStartAngleEventHandle(component));\r\n\t\tthis.hash.set(\"arc.extend.angle\",new pad_events.ArcExtendAngleEventHandler(component));\r\n\t\tthis.hash.set(\"arc.resize\",new pad_events.ResizeEventHandle(component));\r\n\t\tthis.hash.set(\"move\",new events.MoveEventHandle(component));\r\n\t\tthis.hash.set(\"resize\",new events.ResizeEventHandle(component));\r\n\t    this.hash.set(\"component\",new events.UnitEventHandle(component));\r\n\t\tthis.hash.set(\"block\",new events.BlockEventHandle(component));\r\n\t\tthis.hash.set(\"line\",new events.LineEventHandle(component));\r\n\t\tthis.hash.set(\"cursor\",new events.CursorEventHandle(component));\r\n\t\tthis.hash.set(\"symbol\",new FootprintEventHandle(component));\r\n\t\tthis.hash.set(\"texture\",new events.TextureEventHandle(component));\r\n\t\tthis.hash.set(\"dragheand\",new events.DragingEventHandle(component));\r\n\t\tthis.hash.set(\"origin\",new events.OriginEventHandle(component));\r\n\t\tthis.hash.set(\"measure\",new events.MeasureEventHandle(component));\r\n\t\tthis.hash.set(\"track\",new TrackEventHandle(component));\r\n\t\tthis.hash.set(\"copperarea\",new CopperAreaEventHandle(component));\r\n\t\tthis.hash.set(\"solidregion\",new pad_events.SolidRegionEventHandle(component));\t\t\r\n\t\tthis.hash.set(\"move.segment\",new MoveLineSegmentHandle(component));\t\r\n\t }\r\n\t //****private\r\n\t getEventHandle(eventKey,target) {\r\n\t    var handle=this.hash.get(eventKey);\r\n\t\tif(handle!=null){\r\n\t\t  handle.setTarget(target);\r\n\t\t  if(eventKey==\"move\"||eventKey==\"copperarea\"||eventKey==\"track\"||eventKey==\"line\"||eventKey==\"texture\"||eventKey==\"symbol\"||eventKey==\"resize\"||eventKey==\"move.segment\"||eventKey==\"solidregion\"){\t\t        \t\r\n\t\t      //target.selectedPad=pad  //***** HACK TO RESTORE reference!!!!!!!!!!!!\r\n              this.component.getModel().getUnit().fireShapeEvent({target:target,type:events.Event.SELECT_SHAPE});\r\n\t\t  }\r\n\t\t  if(eventKey=='component'||eventKey==\"origin\"){\r\n\t\t\t this.component.getModel().fireUnitEvent({target:this.component.getModel().getUnit(),type:events.Event.SELECT_UNIT});\r\n\t\t  }\r\n\t\t  handle.attach();\r\n\t\t}\r\n\t\treturn handle;\r\n\t }\r\n\t \r\n\t getTargetEventHandle(){\r\n\t   return this.targetEventHandle;\r\n\t }\r\n\t \r\n\t setEventHandle(eventKey,target){\r\n\t        this.resetEventHandle();\r\n\t        this.targetEventHandle=this.getEventHandle(eventKey,target);\r\n\t    }\r\n\t \r\n\t resetEventHandle(){\r\n\t\t    //hide context menu\r\n\t\t    this.component.popup.close();\r\n\t        if (this.targetEventHandle != null) {\r\n\t            this.targetEventHandle.detach();\r\n\t        }\r\n\t        this.targetEventHandle = null;                \r\n\t    }\r\n\t \r\n\t}\r\n\r\n\tmodule.exports ={\r\n\t\t  BoardEventMgr,\r\n\t\t  CopperAreaEventHandle,\r\n\t\t  TrackEventHandle\r\n\t}","\r\n\r\nvar LayerModel = Backbone.Model.extend({\r\n\tdefaults: {\r\n\t    \"name\":  \"caesar salad\",\r\n\t    \"value\":     1,\r\n\t    \"checked\":   false\r\n\t  },\r\n    toggle: function(){\r\n       this.set('checked', !this.get('checked'));\r\n    }\r\n});\r\nvar LayerCollection = Backbone.Collection.extend({\r\n    model: LayerModel,\r\n    \r\n    getChecked: function(){\r\n        return this.where({checked:true});\r\n    }\r\n});\r\n\r\nmodule.exports ={\r\n\tLayerModel,\r\n\tLayerCollection\r\n}","var ContextMenu = require('core/popup/contextmenu').ContextMenu;\r\nvar core=require('core/core');\r\nvar LineSlopBendingProcessor=require('core/line/linebendingprocessor').LineSlopBendingProcessor;\r\nvar SlopLineBendingProcessor=require('core/line/linebendingprocessor').SlopLineBendingProcessor;\r\n\r\n\r\nvar PCBLine=require('board/shapes').PCBLine;\r\nvar PCBTrack=require('board/shapes').PCBTrack;\r\n\r\nclass BoardContextMenu extends ContextMenu{\r\nconstructor(component,placeholderid){\r\n\t\tsuper(component,placeholderid);\t\r\n\t}\r\nregisterTrackPopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='lineslopebendid' ><td style='padding: 0.4em;'>Line Slope Bending</td></tr>\";\r\n\t    items+=\"<tr id='slopelinebendid' ><td style='padding: 0.4em;'>Slope Line Bending</td></tr>\";\r\n\t    items+=\"<tr id='defaultbendid'><td style='padding: 0.4em;'>Default Bending</td></tr>\";\t  \r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t    \t    \r\n}\r\nregisterFootprintPopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='selectallid' ><td style='padding: 0.4em;'>Edit Footprint</td></tr>\";\r\n\t    items+=\"<tr id='rotateleftid' ><td style='padding: 0.4em;'>Rotate Left</td></tr>\";\r\n\t    items+=\"<tr id='rotaterightid'><td style='padding: 0.4em;'>Rotate Right</td></tr>\";\t  \r\n\t    items+=\"<tr id='cloneid'><td style='padding: 0.4em;'>Clone</td></tr>\";\t    \r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Wire ends connect</td></tr>\";\t\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Wire ends disconnect</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t    \r\n\t    \t\r\n}\r\nregisterUnitPopup(target,event){\t          \t            \r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='selectallid' ><td style='padding: 0.4em;'>Select All</td></tr>\";\r\n\t    items+=\"<tr id='undoid'><td style='padding: 0.4em;'>Undo</td></tr>\";\t  \r\n\t    items+=\"<tr id='redoid'><td style='padding: 0.4em;'>Redo</td></tr>\";\r\n\t    items+=\"<tr id='loadid'><td style='padding: 0.4em'>Load</td></tr>\";\r\n\t    items+=\"<tr id='reloadid'><td style='padding: 0.4em'>Reload</td></tr>\";\r\n\t    items+=\"<tr id='deleteunit'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"<tr id='copyid'><td style='padding: 0.4em'>Copy</td></tr>\";\r\n\t    items+=\"<tr id='pasteid'><td style='padding: 0.4em'>Paste</td></tr>\";\t\t    \r\n\t    items+=\"<tr id='positiontocenterid'><td style='padding: 0.4em'>Position drawing to center</td></tr>\";\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t    \r\n\t    \r\n}\r\nregisterLineSelectPopup(target,event){\r\n\t  let bending=target.isBendingPointClicked(event.x,event.y);\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t\r\n\t    items+=\"<tr id='tracknetselectid' ><td style='padding: 0.4em;'>Track Net Select</td></tr>\";\r\n\t    items+=\"<tr id='cloneid' ><td style='padding: 0.4em;'>Clone</td></tr>\";\t    \r\n\t    if(bending!=null){\r\n\t      if(target.isEndPoint(event.x,event.y)){\t\r\n\t        items+=\"<tr id='resumeid'><td style='padding: 0.4em;'>Resume</td></tr>\";\r\n\t      }\r\n\t    }else{\r\n\t    \titems+=\"<tr id='addbendingpointid'><td style='padding: 0.4em;'>Add Bending point</td></tr>\";\t\r\n\t    }\r\n\t    \r\n\t    if(bending!=null){\r\n\t      items+=\"<tr id='deletebendingpointid'><td style='padding: 0.4em'>Delete Bending point</td></tr>\";\r\n\t    }\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t\r\n\t    \r\n}\r\nregisterBlockPopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='rotateleftid' ><td style='padding: 0.4em;'>Rotate Left</td></tr>\";\r\n\t    items+=\"<tr id='rotaterightid'><td style='padding: 0.4em;'>Rotate Right</td></tr>\";\t  \r\n\t    items+=\"<tr id='cloneid'><td style='padding: 0.4em;'>Clone</td></tr>\";\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t\r\n\t\t\t\t\r\n}\r\nregisterLinePopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='deletelastpointid' ><td style='padding: 0.4em;'>Delete Last Point</td></tr>\";\r\n\t    items+=\"<tr id='deletelineid'><td style='padding: 0.4em;'>Delete Line</td></tr>\";\t  \r\n\t    items+=\"<tr id='cancelid'><td style='padding: 0.4em;'>Cancel</td></tr>\";\t    \t    \t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t\r\n\t      \t\r\n}\r\n\r\n\r\nactionPerformed(id,context){\r\n   if(id==\"tracknetselectid\"){\r\n\t   context.target.owningUnit.selectNetAt(context.target);\r\n\t   this.component.repaint();\r\n\t   return;\r\n   }\t\r\n   if (id==\"resumeid\") {\t\r\n        if(context.target instanceof PCBTrack){                \r\n            this.component.getView().setButtonGroup(core.ModeEnum.TRACK_MODE);\r\n            this.component.setMode(core.ModeEnum.TRACK_MODE);\r\n            this.component.resumeLine(context.target,\"track\",  {x:this.x, y:this.y,which:3});\r\n            \r\n        }else{\r\n        \tthis.component.getView().setButtonGroup(core.ModeEnum.LINE_MODE);\r\n        \tthis.component.setMode(core.ModeEnum.LINE_MODE);\r\n        \tthis.component.resumeLine(context.target,\"line\",  {x:this.x, y:this.y,which:3});\r\n        }\r\n\r\n        return;\r\n    }  \t\r\n    let line =this.component.lineBendingProcessor.line;\r\n\tif(id=='lineslopebendid'){\t\t\r\n\t\tthis.component.lineBendingProcessor=new LineSlopBendingProcessor();\r\n\t\tthis.component.lineBendingProcessor.initialize(line);\r\n\t}\r\n\tif(id=='slopelinebendid'){\r\n\t\tthis.component.lineBendingProcessor=new SlopLineBendingProcessor();\r\n\t\tthis.component.lineBendingProcessor.initialize(line);\r\n\t}\r\n\r\n   super.actionPerformed(id,context);\r\n   \r\n}\r\n\r\n\r\n}\r\n\r\nmodule.exports ={\r\n\t\tBoardContextMenu\r\n\t\t}","var core=require('core/core');\r\nvar utilities =require('core/utilities');\r\nvar Shape=require('core/shapes').Shape;\r\nvar ResizeableShape=require('core/core').ResizeableShape;\r\nvar glyph=require('core/text/d2glyph');\r\nvar font=require('core/text/d2font');\r\nvar Circle =require('pads/shapes').Circle;\r\nvar Arc =require('pads/shapes').Arc;\r\nvar Pad =require('pads/shapes').Pad;\r\nvar Line =require('pads/shapes').Line;\r\nvar RoundRect =require('pads/shapes').RoundRect;\r\nvar SolidRegion =require('pads/shapes').SolidRegion;\r\nvar GlyphLabel=require('pads/shapes').GlyphLabel;\r\nvar AbstractLine=require('core/shapes').AbstractLine;\r\nvar FootprintShapeFactory=require('pads/shapes').FootprintShapeFactory;\r\nvar d2=require('d2/d2');\r\n\r\n\r\nclass BoardShapeFactory{\r\n\t\r\n\tcreateShape(data){\r\n\t\tif (data.tagName.toLowerCase() == 'footprint') {\r\n\t\t\tvar footprint = new PCBFootprint(0, 0, 0, 0,0,0);\r\n\t\t\tfootprint.fromXML(data);\r\n\t\t\treturn footprint;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'via') {\r\n\t\t\tvar via = new PCBVia(0, 0, 0, 0,0,0);\r\n\t\t\tvia.fromXML(data);\r\n\t\t\treturn via;\r\n\t\t}\t\t\r\n\t\tif (data.tagName.toLowerCase() == 'circle') {\r\n\t\t\tvar circle = new PCBCircle(0, 0, 0, 0, 0);\r\n\t\t\tcircle.fromXML(data);\r\n\t\t\treturn circle;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'arc') {\r\n\t\t\tvar arc = new PCBArc(0, 0, 0, 0, 0);\r\n\t\t\tarc.fromXML(data);\r\n\t\t\treturn arc;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'rectangle') {\r\n\t\t\tvar roundRect = new PCBRoundRect(0, 0, 0, 0, 0,0, core.Layer.SILKSCREEN_LAYER_FRONT);\r\n\t\t\troundRect.fromXML(data);\r\n\t\t\treturn roundRect;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'line') {\r\n\t\t\tvar line = new PCBLine( 0, 0, 0, 0, 0);\r\n\t\t\tline.fromXML(data);\r\n\t\t\treturn line;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'copperarea') {\r\n\t\t\tvar area = new PCBCopperArea( 0, 0, 0, 0, 0);\r\n\t\t\tarea.fromXML(data);\r\n\t\t\treturn area;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'track') {\r\n\t\t    var track = new PCBTrack(0, 0, 0, 0, 0);\r\n\t\t    track.fromXML(data);\r\n\t\t    return track;\r\n\t    }\t\t\r\n\t\tif (data.tagName.toLowerCase() == 'hole') {\r\n\t\t\tvar hole = new PCBHole(0, 0, 0, 0, 0);\r\n\t\t\thole.fromXML(data);\r\n\t\t\treturn hole;\r\n\t\t}\r\n\t\tif (data.tagName.toLowerCase() == 'label') {\r\n\t\t\tvar label = new PCBLabel(0, 0, 0);\r\n\t\t\tlabel.fromXML(data);\t\t\r\n\t\t\treturn label;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nclass PCBFootprint extends Shape{\r\nconstructor(layermaskId){\r\n\t\tsuper(0,0,0,0,0,layermaskId);\r\n\t\tthis.displayName = \"Footprint\";\r\n   \t    this.shapes=[];\r\n\t    this.reference=(new glyph.GlyphTexture(\"\",\"reference\", 0, 0,  core.MM_TO_COORD(1.2)));\r\n\t    this.value=(new glyph.GlyphTexture(\"\",\"value\", 8,8,core.MM_TO_COORD(1.2)));\t\t \t    \r\n        this.units=core.Units.MM;\r\n        this.val=2.54;  \r\n        this.selectedPad=null;  //show pad properties in \r\n        //this.rotation=0;\r\n\t}\r\nclone(){\r\n        var copy=new PCBFootprint(this.copper.getLayerMaskID());\r\n        copy.shapes=[];\r\n        copy.rotation=this.rotation;\r\n        copy.units=this.units;\r\n        copy.val=this.val;\r\n        copy.value =this.value.clone();\r\n        copy.reference =this.reference.clone();        \r\n        copy.displayName=this.displayName;\r\n        this.shapes.forEach(function(shape){ \r\n          copy.add(shape.clone());  \r\n        });\r\n        return copy;        \r\n    }\r\nadd(shape){\r\n    if (shape == null)\r\n          return;\r\n    shape.isControlPointVisible=false;\r\n    this.shapes.push(shape);  \r\n}\r\ngetPinsRect(){\r\n    var x1=Number.MAX_VALUE,y1=Number.MAX_VALUE,x2=Number.MIN_VALUE,y2=Number.MIN_VALUE;\r\n    var isPinnable=false;\r\n    //***empty schematic,element,package\r\n    if (this.shapes.length == 0) {\r\n        return null;\r\n    }\r\n\r\n    this.shapes.forEach(function(shape) { \r\n        if(shape instanceof Pad){\r\n          let p=shape.getPinPoint();\r\n          x1=Math.min(x1,p.x );\r\n          y1=Math.min(y1,p.y);\r\n          x2=Math.max(x2,p.x);\r\n          y2=Math.max(y2,p.y);             \r\n          isPinnable=true;\r\n        }\r\n    });\r\n    if(isPinnable)\r\n        return  d2.Box.fromRect(x1,y1,x2-x1,y2-y1);          \r\n    else\r\n        return null;  \r\n    \r\n}\r\ngetPads(){\r\n   return this.shapes.filter(s => s instanceof Pad);        \r\n}\r\ngetClickedTexture(x,y) {\r\n    if(this.reference.isClicked(x, y))\r\n        return this.reference;\r\n    else if(this.value.isClicked(x, y))\r\n        return this.value;\r\n    else\r\n    return null;\r\n}\r\nisClickedTexture(x,y) {\r\n    return this.getClickedTexture(x, y)!=null;\r\n}\r\ngetTextureByTag(tag) {\r\n    if(tag===(this.reference.tag))\r\n        return this.reference;\r\n    else if(tag===(this.value.tag))\r\n        return this.value;\r\n    else\r\n    return null;\r\n}\r\nsetSide(side){\r\n    //mirror footprint\r\n    let r=this.getBoundingShape();\r\n    let p=r.center;\r\n    let line= new d2.Line(new d2.Point(p.x,p.y-10),new d2.Point(p.x,p.y+10));\r\n    \r\n    this.shapes.forEach(shape=>{\r\n        shape.setSide(side,line,(360-this.rotation));\r\n    });  \r\n    this.reference.setSide(side,line,(360-this.rotation));       \r\n    this.value.setSide(side,line,(360-this.rotation));       \r\n    \r\n    this.copper=(core.Layer.Side.change(this.copper.getLayerMaskID()));\r\n    this.rotation=360-this.rotation;\t\r\n}\r\ngetSide(){\r\n    return core.Layer.Side.resolve(this.copper.getLayerMaskID());       \r\n}\r\n\r\nclear() {    \r\n\tthis.shapes.forEach(function(shape) {\r\n\t\t  shape.owningUnit=null;\r\n\t\t  shape.clear();\r\n\t\t  shape=null;\r\n     });\r\n     this.shapes=[];\t\r\n     this.value.clear();\r\n     this.reference.clear();\r\n}\r\ngetClickableOrder() {\r\n   var r=this.getBoundingShape();\r\n   return (r.area);\r\n}\r\nisPadClicked(x,y) {\r\n    \tfor(let  pad of this.getPads()) {\r\n    \t\tif(pad.isClicked(x, y))\r\n    \t\t\treturn pad;\r\n    \t}\r\n    \treturn null;\r\n}\r\n\r\nisClicked(x,y){\r\n\tvar r=this.getBoundingShape();\r\n\tif(!r.contains(x,y)){\r\n\t\treturn false;\r\n\t}\r\n\tlet ps=new d2.Polygon();\r\n\tvar result= this.shapes.some(function(shape) {\r\n\t   if(!(shape instanceof Line)){ \r\n\t\treturn shape.isClicked(x,y);\r\n\t   }else{\r\n\t\tps.points.push(...shape.vertices);  //line vertices   \r\n\t\treturn false;\r\n\t   }\r\n\t});\t\t\r\n\tif(result){\r\n\t\treturn true;//click on a anything but a Line\r\n\t}\r\n\t\r\n\tthis.sortPolygon(ps.points);  //line only\r\n\treturn ps.contains(x,y);\r\n}\r\n\r\nisVisibleOnLayers(layermasks){\r\n    for(const shape of this.shapes){\r\n       if(shape.isVisibleOnLayers(layermasks))\r\n         return true;\r\n    }\r\n    return false;\r\n}  \r\n\r\nisClickedOnLayers(x, y, layermasks) {\r\n    for(const shape of this.shapes){\r\n        if(shape.isVisibleOnLayers(layermasks)){\r\n            if(shape.isClicked(x, y))\r\n              return true;\r\n        }             \r\n    }\r\n    return false;   \r\n}\r\ngetPolygonCentroid(points){\r\n\tlet x=0,y=0;\r\n\tpoints.forEach(p=>{\r\n\t\tx+=p.x;\r\n\t\ty+=p.y;\r\n\t});\r\n\treturn new d2.Point(x/points.length,y/points.length);\r\n}\r\nsortPolygon(points){\r\n\tlet center=this.getPolygonCentroid(points);\r\n\t\r\n\tpoints.sort((a,b)=>{\r\n\t let a1=(utilities.degrees(Math.atan2(a.x-center.x,a.y-center.y))+360)%360;\r\n\t let a2=(utilities.degrees(Math.atan2(b.x-center.x,b.y-center.y))+360)%360;\r\n\t return (a1-a2);\r\n\t});\r\n}\r\n\r\nsetSelected (selection) {\r\n\tsuper.setSelected(selection);\r\n\tthis.shapes.forEach(function(shape) {\t\r\n\t\t  shape.setSelected(selection);\r\n\t\t  \t \r\n   });\t\r\n    this.value.setSelected(selection);\r\n    this.reference.setSelected(selection);\r\n}\r\ncalculateShape() {\r\n\tvar r = new d2.Box(0,0,0,0);\r\n \tvar x1 = Number.MAX_VALUE; \r\n \tvar y1 = Number.MAX_VALUE;\r\n \tvar x2 = Number.MIN_VALUE;\r\n \tvar y2 = Number.MIN_VALUE;\r\n \t\r\n \t\r\n    //***empty schematic,element,package\r\n    if (this.shapes.length == 0) {\r\n        return r;\r\n    }\r\n\r\n    var len=this.shapes.length;\r\n\t    for(var i=0;i<len;i++){\r\n        var tmp = this.shapes[i].getBoundingShape();\r\n        if (tmp != null) {\r\n            x1 = Math.min(x1, tmp.x);\r\n            y1 = Math.min(y1, tmp.y);\r\n            x2 = Math.max(x2, tmp.x+tmp.width);\r\n            y2 = Math.max(y2, tmp.y+tmp.height);\r\n        }\r\n        \r\n    }\r\n    r.setRect(x1, y1, x2 - x1, y2 - y1);\r\n    return r;\r\n}\t\r\nmove(xoffset,yoffset){\r\n\t   var len=this.shapes.length;\r\n\t   for(var i=0;i<len;i++){\r\n\t\t   this.shapes[i].move(xoffset,yoffset);  \r\n\t   }\t\r\n\t   this.reference.move(xoffset,yoffset);\r\n\t   this.value.move(xoffset,yoffset);\r\n}\r\nsetRotation(angle,center){\t\t\r\n\tlet alpha=angle-this.rotation;\r\n\tlet rotation={origin:{x:center.x,y:center.y},\r\n\t\t\t\t  angle:alpha};\r\n\tlet len=this.shapes.length;\r\n\t\r\n\tfor(var i=0;i<len;i++){\t\r\n\t   this.shapes[i].rotate(rotation);  \r\n\t}\t\r\n    this.value.rotate(alpha,center);\r\n    this.reference.rotate(alpha,center);\r\n\tthis.rotation=angle;\r\n}\r\nrotate(rotation){\r\n\t//fix angle\r\n\t   let alpha=this.rotation+rotation.angle;\r\n\t   if(alpha>=360){\r\n\t\t alpha-=360\r\n\t   }\r\n\t   if(alpha<0){\r\n\t\t alpha+=360; \r\n\t   }\r\n\r\n\t   var len=this.shapes.length;\r\n\t   for(var i=0;i<len;i++){\r\n\t\t   this.shapes[i].rotate(rotation);  \r\n\t   }\r\n\t  \r\n\t   this.value.rotate(rotation.angle,rotation.origin);\r\n\t   this.reference.rotate(rotation.angle,rotation.origin);\r\n\t   this.rotation=alpha;\r\n}\r\ndrawClearence(g2,viewportWindow,scale,source){\r\n    let rect=this.getBoundingShape();\r\n    if (!rect.intersects(source.getBoundingShape())) {    \r\n    \treturn;\r\n    }\r\n    \r\n    rect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\tvar len=this.shapes.length;\r\n\tfor(i=0;i<len;i++){\r\n\t  if(this.shapes[i] instanceof Pad){\r\n\t\t  this.shapes[i].drawClearence(g2,viewportWindow,scale,source); \r\n\t  }\r\n\t}\r\n\t\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {        \r\n     \r\n\tvar rect = this.getBoundingShape();\t\t\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t return;\r\n\t}\r\n\t\t\r\n\tvar len=this.shapes.length;\r\n\tfor(i=0;i<len;i++){\r\n\t\t  this.shapes[i].paint(g2,viewportWindow,scale,layersmask);\r\n          if(this.isSelected()&&this.shapes[i] instanceof Pad&& this.shapes[i]==this.selectedPad){\t        \r\n        \tvar box=this.shapes[i].getBoundingShape().clone();        \t\r\n            box.scale(scale.getScale());\r\n            box.move(-viewportWindow.getX(), -viewportWindow.getY());                             \r\n\t\t\tg2.lineWidth = 1;            \r\n\t\t\tg2.strokeStyle='white';\r\n            box.paint(g2, false); \r\n          }\r\n\t}    \r\n\tif((this.value.layermaskId&layersmask)!=0) {\r\n    \tthis.value.fillColor=core.Layer.Copper.resolve(this.value.layermaskId).getColor();\r\n    \tthis.value.paint(g2, viewportWindow, scale, layersmask);\r\n\t}\r\n\tif((this.reference.layermaskId&layersmask)!=0) {\r\n    \tthis.reference.fillColor=core.Layer.Copper.resolve(this.reference.layermaskId).getColor();\r\n    \tthis.reference.paint(g2, viewportWindow, scale, layersmask);\r\n\t}\r\n }    \r\nfromXML(data){\r\n\t this.copper=core.Layer.Copper.valueOf(j$(data).attr(\"layer\"));\r\n\t this.val=parseFloat(j$(data).find(\"units\").attr(\"raster\"));\r\n     this.units=core.Units.MM;\t\r\n     \r\n\t var reference=j$(data).find(\"reference\")[0];\r\n \t var value=j$(data).find(\"value\")[0];\r\n \t \t\r\n \t this.reference.fromXML(reference);\r\n \t \r\n \t this.value.fromXML(value);\r\n \t \r\n \t this.displayName=j$(data).find(\"name\")[0].textContent;\t\r\n \t \r\n\t var that=this;\r\n\t var shapeFactory=new FootprintShapeFactory();\r\n\t \r\n\t j$(data).find('shapes').children().each(function(){\r\n         var shape=shapeFactory.createShape(this);\r\n         that.add(shape);\r\n\t });\r\n}\r\n\r\ntoXML() {\r\n    let xml=\"<footprint layer=\\\"\"+this.copper.getName()+\"\\\">\\r\\n\";\r\n           xml+=\"<name>\"+this.displayName+\"</name>\\r\\n\";\r\n           xml+=\"<units raster=\\\"\"+this.val+\"\\\">\"+this.units+\"</units>\\r\\n\"; \r\n           xml+=\"<reference layer=\\\"\"+core.Layer.Copper.resolve(this.reference.layermaskId).getName()+\"\\\">\"+this.reference.toXML()+\"</reference>\\r\\n\";                           \r\n           xml+=\"<value layer=\\\"\"+core.Layer.Copper.resolve(this.value.layermaskId).getName()+\"\\\">\"+this.value.toXML()+\"</value>\\r\\n\";             \r\n           xml+=\"<shapes>\\r\\n\";\r\n           this.shapes.forEach(\r\n            s=>xml+=s.toXML()\r\n           )\r\n           xml+=\"\\r\\n</shapes>\\r\\n\";\r\n           xml+=\"</footprint>\";                 \r\n    return xml;  \r\n}\r\n}\r\n\r\nclass PCBCircle extends Circle{\r\n    constructor( x, y,  r,  thickness, layermaskid) {\r\n        super( x, y, r, thickness, layermaskid);\r\n    }\t\r\n    clone(){\r\n    \tlet copy = new PCBCircle(this.x,this.y,this.width,this.thickness,this.copper.getLayerMaskID());\r\n    \tcopy.circle=this.circle.clone();\r\n    \tcopy.fill=this.fill;\r\n    \treturn copy;\r\n    }  \r\n\r\n\tpaint(g2, viewportWindow, scale,layersmask) {\t    \t\t\r\n\t\tvar rect = this.circle.box;\r\n\t\trect.scale(scale.getScale());\r\n\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\r\n\t\tif (this.fill == core.Fill.EMPTY) {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tg2._fill=true;\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.fillStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet c=this.circle.clone();\r\n\t\tc.scale(scale.getScale());\r\n        c.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tg2.save();\r\n\t\tif((this.owningUnit!=null)&&(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID()))){\t\t\r\n\t\t\tg2.globalAlpha = 1;\t\t\t\t\r\n\t\t}else{\t\t\r\n\t\t\tg2.globalAlpha = 0.5;\t\t\t\t\t\r\n\t\t}\t\t\r\n\t\tc.paint(g2);\r\n\t\tg2.restore();\r\n\t\tg2._fill=false;\r\n\r\n\t\t\r\n\t\t\r\n\t\t  \r\n }\r\n    \r\n    \r\n}\r\n\r\nclass PCBArc extends Arc{\r\n    constructor( x, y,  r,  thickness, layermaskid) {\r\n        super( x, y, r, thickness, layermaskid);\r\n    }\t\r\n    clone() {\r\n\t\tvar copy = new PCBArc(this.x, this.y, this.width,\r\n\t\t\t\t\t\tthis.thickness,this.copper.getLayerMaskID());\r\n        copy.arc=this.arc.clone();\r\n\t\tcopy.arc.startAngle = this.arc.startAngle;\r\n        copy.arc.endAngle = this.arc.endAngle;         \r\n\t\tcopy.fill = this.fill;\r\n\t\treturn copy;\r\n}    \r\n\r\npaint(g2, viewportWindow, scale,layersmask) {\t    \r\n\t\tvar rect = this.arc.box;\r\n\t\trect.scale(scale.getScale());\r\n\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tg2.beginPath(); // clear the canvas context\r\n\t\tg2.lineCap = 'round';\r\n\r\n\t\t\t\t\t\t\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\t\t\t\t\t\r\n\t\tif (this.fill == core.Fill.EMPTY) {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t\tg2._fill=false;\r\n\t\t} else {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.fillStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t\tg2._fill=true;\r\n\t\t}\r\n\r\n\t\tlet a=this.arc.clone();\r\n\t\ta.scale(scale.getScale());\r\n\t\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\t\tg2.save();\r\n\t\tif((this.owningUnit!=null)&&(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID()))){\t\t\r\n\t\t\tg2.globalAlpha = 1;\t\t\t\t\r\n\t\t}else{\t\t\r\n\t\t\tg2.globalAlpha = 0.5;\t\t\t\t\t\r\n\t\t}\r\n\t\ta.paint(g2);\r\n\t\tg2.restore();\r\n\t\tg2._fill=undefined;\r\n\t\t\r\n\t\t\t    \r\n\r\n\t}\r\n    \r\n}\r\n\r\nclass PCBLabel extends GlyphLabel{\r\n    constructor( layermaskId) {\r\n        super(\"Label\",core.MM_TO_COORD(0.3),layermaskId);\r\n        this.clearance=0;\r\n    }\r\nclone(){\r\n\tvar copy = new PCBLabel(this.copper.getLayerMaskID());\r\n    copy.texture = this.texture.clone();        \r\n    copy.copper=this.copper;\r\n\treturn copy;\r\n} \r\ndrawClearence(g2,viewportWindow,scale,source){\r\n   if((source.copper.getLayerMaskID()&this.copper.getLayerMaskID())==0){        \r\n\t   return;  //not on the same layer\r\n   }\r\n   let clear=this.clearance!=0?this.clearance:source.clearance;\r\n   \r\n   let rect=this.texture.getBoundingShape();\r\n   rect.min.move(-clear,-clear);\r\n   rect.max.move(clear,clear);\r\n   \r\n   if (!rect.intersects(source.getBoundingShape())) {\r\n\t\treturn;\r\n   }\r\n\r\n    let r=this.texture.getBoundingRect();\r\n \r\n\tr.grow(clear);\r\n    r.scale(scale.getScale());\r\n\tif (!r.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2._fill=true;\r\n\tg2.fillStyle = \"black\";\t\r\n\t\r\n\t\r\n    r.move(-viewportWindow.x,- viewportWindow.y);\r\n\tr.paint(g2);\r\n\t\r\n    g2._fill=false;\t\r\n   \r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {    \r\n\t\tvar rect = this.texture.getBoundingShape();\r\n\t\t\trect.scale(scale.getScale());\r\n\t\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\tif (this.selection) {\r\n\t\t\tthis.texture.fillColor = \"gray\";\r\n\t\t} else {\r\n\t\t\tthis.texture.fillColor = this.copper.getColor();\r\n\t\t}\r\n\t\tg2.save();\r\n\t\tif((this.owningUnit!=null)&&(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID()))){\t\t\r\n\t\t\tg2.globalAlpha = 1;\t\t\t\t\r\n\t\t}else{\t\t\r\n\t\t\tg2.globalAlpha = 0.5;\t\t\t\t\t\r\n\t\t}\t\t\t\t\r\n\t\tthis.texture.paint(g2, viewportWindow, scale,this.copper.getLayerMaskID());\r\n\t\tg2.restore();\r\n  }\r\n}\r\nclass PCBLine extends Line{\r\nconstructor(thickness,layermaskId){\r\n        super(thickness,layermaskId);\r\n    }\r\nclone() {\r\n\t\tvar copy = new PCBLine(this.thickness,this.copper.getLayerMaskID());\r\n\t\t  copy.polyline=this.polyline.clone();\r\n\t\t  return copy;\r\n\t}\t\r\npaint(g2, viewportWindow, scale,layersmask) {\t\t    \r\n\t   var rect = this.polyline.box;\r\n\t   rect.scale(scale.getScale());\t\t\r\n\t   if (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\treturn;\r\n\t   }\r\n\t\t\t\t\r\n\t\tg2.lineCap = 'round';\r\n\t\tg2.lineJoin = 'round';\r\n\t\t\r\n\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\t\t\r\n\t\tif (this.selection)\r\n\t\t\tg2.strokeStyle = \"gray\";\r\n\t\telse\r\n\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\r\n\t\tlet a=this.polyline.clone();\r\n\t\tif (this.isFloating()) {                                                    \r\n         if(this.resumeState==ResumeState.ADD_AT_FRONT){                \r\n             let p = this.floatingEndPoint.clone();\r\n             a.points.unshift(p);               \r\n         }else{\t\t                            \r\n             let p = this.floatingEndPoint.clone();\r\n             a.add(p);    \r\n         }\r\n\t\t} \t\r\n\t\t\r\n\t\ta.scale(scale.getScale());\r\n\t\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\t\tg2.save();\r\n\t\tif((this.owningUnit!=null)&&(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID()))){\t\t\r\n\t\t\tg2.globalAlpha = 1;\t\t\t\t\r\n\t\t}else{\t\t\r\n\t\t\tg2.globalAlpha = 0.5;\t\t\t\t\t\r\n\t\t}\t\t\t\t\r\n\t\ta.paint(g2);\r\n\t\tg2.restore();\r\n\t\t\r\n\t\t\t\t\t\t\r\n\r\n}\r\n\t  \r\n}\r\nclass PCBSolidRegion extends SolidRegion{\r\n\tconstructor(layermaskId){\r\n\t        super(layermaskId);\r\n\t    }\r\n\tclone() {\r\n\t\t\tvar copy = new PCBSolidRegion(this.copper.getLayerMaskID());\r\n\t\t\t  copy.polygon=this.polygon.clone();  \r\n\t\t\t  return copy;\r\n\t\t}    \r\n\tpaint(g2, viewportWindow, scale,layersmask) {\t\t\t    \r\n\t\tvar rect = this.polygon.box;\r\n\t\trect.scale(scale.getScale());\t\t\r\n\t\tif (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tg2.lineWidth = 1;\r\n\t\t\r\n\t\tif(this.isFloating()){\r\n\t      g2.strokeStyle = this.copper.getColor();\t\t\r\n\t\t}else{\r\n\t\t  g2._fill=true;\r\n\t\t  if (this.selection) {\r\n\t\t\t g2.fillStyle = \"gray\";\r\n\t\t  } else {\r\n\t\t\t g2.fillStyle = this.copper.getColor();\r\n\t\t  }\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\tlet a=this.polygon.clone();\t\r\n\t\tif (this.isFloating()) {\r\n\t\t\tlet p = this.floatingEndPoint.clone();\r\n\t\t\ta.add(p);\t\r\n\t    }\r\n\t\ta.scale(scale.getScale());\r\n\t\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\t\tg2.globalCompositeOperation = 'lighter';\r\n\t\ta.paint(g2);\r\n\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\tg2._fill=false;    \r\n\t}\r\n\r\n}\r\n\r\nclass PCBRoundRect extends RoundRect{\r\nconstructor( x, y,  width,height,arc,  thickness, layermaskid) {\r\n        super( x, y, width,height,arc, thickness, layermaskid);\r\n        this.displayName = \"Rect\";\r\n    }\r\nclone(){\r\n\tvar copy = new PCBRoundRect(0,0,0,0,0,this.thickness,this.copper.getLayerMaskID());\r\n\tcopy.roundRect = this.roundRect.clone();\r\n\tcopy.fill = this.fill;\r\n\tcopy.arc=this.arc;\r\n\treturn copy;\t\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {\r\n\tvar rect = this.roundRect.box;\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2.lineWidth = this.thickness * scale.getScale();\r\n\tg2.lineCap = 'round';\r\n\tg2.lineJoin = 'round';\r\n\r\n\tif (this.fill == core.Fill.EMPTY) {\t\t\r\n\t\tif (this.selection) {\r\n\t\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t} else {\r\n\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t}\t\t\t\r\n\t} else {\r\n\t\tg2._fill=true;\r\n\t\tif (this.selection) {\r\n\t\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\tg2.fillStyle = \"gray\";\r\n\t\t} else {\r\n\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t}\t\t\t\r\n\t}\r\n\r\n\tlet r=this.roundRect.clone();\t\r\n\tr.scale(scale.getScale());\r\n    r.move(-viewportWindow.x,- viewportWindow.y);\r\n\tg2.save();\r\n\tif((this.owningUnit!=null)&&(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID()))){\t\t\r\n\t\t\tg2.globalAlpha = 1;\t\t\t\t\r\n\t}else{\t\t\r\n\t\t\tg2.globalAlpha = 0.5;\t\t\t\t\t\r\n\t}\t\t\t\r\n\tr.paint(g2);\r\n\tg2.restore();\r\n\tg2._fill=false;\r\n\t\r\n\t\r\n\r\n}\r\n\r\n}\r\n//************************PCBTrack********************\r\nclass PCBTrack extends AbstractLine{\r\nconstructor(thickness,layermaskId){\r\n       super(thickness,layermaskId);\r\n       this.displayName = \"Track\";\r\n       this.clearance=0;\r\n\t}\r\nclone() {\r\n\tvar copy = new PCBTrack(this.thickness,this.copper.getLayerMaskID());\r\n\tcopy.clearance=this.clearance=0;\r\n\tcopy.resumeState=this.resumeState;\r\n\tcopy.polyline=this.polyline.clone();\r\n\treturn copy;\r\n\r\n\t}\r\ngetDrawingLayerPriority() {    \r\n    if(this.owningUnit==null){            \r\n        return super.getDrawingOrder();\r\n    }\r\n    \r\n    if(this.owningUnit.compositeLayer.activeSide==core.Layer.Side.resolve(this.copper.getLayerMaskID())){\r\n       return 4;\r\n     }else{\r\n       return 3; \r\n     }          \r\n}\r\ndrawClearence(g2,viewportWindow,scale,source){\r\n   if((source.copper.getLayerMaskID()&this.copper.getLayerMaskID())==0){        \r\n\t   return;  //not on the same layer\r\n   }\r\n   g2.lineWidth=(this.thickness+2*(this.clearance!=0?this.clearance:source.clearance))*scale.getScale(); \r\n   g2.strokeStyle = \"black\";\r\n   \r\n    \r\n   \r\n   g2.save();   \r\n   g2.clip(source.clip);\r\n   \r\n   let a=this.polyline.clone();\r\n   a.scale(scale.getScale());\r\n   a.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n   a.paint(g2);\r\n\r\n   g2.restore();\r\n}\r\n\r\nisSegmentClicked(pt){\t\t\t\t     \r\n\t  if(this.isControlRectClicked(pt.x,pt.y))\r\n          return false;\r\n      if(this.polyline.isPointOnSegment(pt,this.thickness)){\r\n\t    return true;\r\n      }\r\n\t  return false\r\n}\r\n\r\ngetSegmentClicked(pt){\r\n\t\t      let segment=new d2.Segment(0,0,0,0);\t   \r\n\t          let prevPoint = this.polyline.points[0];        \r\n\t          for(let point of this.polyline.points){    \t        \t  \r\n\t              if(prevPoint.equals(point)){    \t            \t  \r\n\t            \t  prevPoint = point;\r\n\t                  continue;\r\n\t              }    \t              \t              \r\n                  segment.ps=prevPoint;\r\n                  segment.pe=point;\r\n\t              if(segment.isPointOn(pt,this.thickness)){\r\n\t                  return segment\r\n\t              }\r\n\t              prevPoint = point;\r\n\t          }\t\t\t       \t          \r\n\t       return null;\r\n}\r\n\r\ngetNetShapes(selectedShapes){\r\n\tlet net=[];\r\n\t//1.vias\r\n    let vias=this.owningUnit.getShapes(PCBVia);\r\n    \r\n    vias.forEach(via=>{\r\n        if(selectedShapes.has(via.uuid)){\r\n            return;\r\n        }else if(this.polyline.intersect(via.outer)){\r\n           net.push(via); \r\n        }\r\n    });\r\n    //2.track on same layer\r\n    let sameSideTracks=this.owningUnit.getShapes(PCBTrack,this.copper.getLayerMaskID());         \r\n    let  circle=new d2.Circle(new d2.Point(0,0),0);\r\n    for(let track of sameSideTracks ){\r\n        if(track==this){\r\n            continue;\r\n        }\r\n        if(selectedShapes.has(track.uuid)){\r\n            continue;\r\n        }\r\n        //my points on another\r\n        for(let pt of this.polyline.points){\r\n            circle.pc=pt;\r\n            circle.r=this.thickness/2;\r\n            if(track.polyline.intersect(circle)){\r\n               net.push(track);\r\n               break;\r\n            }   \r\n        }\r\n        //another points on me\r\n        for(let pt of track.polyline.points){\r\n            circle.pc=pt;\r\n            circle.r=track.thickness/2;\r\n            if(this.polyline.intersect(circle)){\r\n               net.push(track);\r\n               break;\r\n            }   \r\n        }            \r\n        \r\n    }\r\n    //my track crossing other track on same layer\r\n    let segments=this.polyline.segments;\r\n    for(let track of sameSideTracks){\r\n        if(track==this){\r\n            continue;\r\n        }\r\n        if(selectedShapes.has(track.uuid)){\r\n            continue;\r\n        }            \r\n        for(let segment of segments){\r\n          //is my segment crossing anyone elses's?\r\n            for(let other of track.polyline.segments){\r\n                if(segment.intersect(other)){\r\n                    net.push(track);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n    //3.Footprint pads on me\r\n    let footprints=this.owningUnit.getShapes(PCBFootprint);         \r\n    //the other side\r\n    let oppositeSideTracks=this.owningUnit.getShapes(PCBTrack,core.Layer.Side.change(this.copper.getLayerMaskID()).getLayerMaskID());    \r\n    \r\n    let bothSideTracks = [...sameSideTracks, ...oppositeSideTracks];\r\n    for(let footprint of footprints){\r\n        let pads=footprint.getPads();        \r\n        for(let pad of pads){              \r\n            for(let pt of this.polyline.points){\r\n                if(pad.shape.contains(pt)){  //found pad on track -> investigate both SMD and THROUGH_HOLE\r\n                    for(let track of bothSideTracks ){  //each track on SAME layer\r\n                        //another points on me\r\n                        for(let p of track.polyline.points){\r\n                            if(pad.shape.contains(p)){\r\n                                  if(selectedShapes.has(track.uuid)){\r\n                                      continue;\r\n                                  }\r\n                                  //track and pad should be on the same layer\r\n                                  if((this.copper.getLayerMaskID()&pad.copper.getLayerMaskID())!=0){\r\n                                      if((track.copper.getLayerMaskID()&pad.copper.getLayerMaskID())!=0){ \r\n                                            net.push(track);\r\n                                            break;\r\n                                      }\r\n                                  }\r\n                            }\r\n                        }   \r\n                    }                        \r\n                }               \r\n            }\r\n        }    \t\r\n    }\r\n    \r\n    return net;\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {    \t\r\n\tvar rect = this.polyline.box;\r\n\trect.scale(scale.getScale());\t\t\r\n\tif (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tg2.lineCap = 'round';\r\n\tg2.lineJoin = 'round';\r\n\t\r\n    \r\n\tg2.lineWidth = this.thickness * scale.getScale();\r\n\r\n\r\n\tif (this.selection)\r\n\t\tg2.strokeStyle = \"gray\";\r\n\telse\r\n\t\tg2.strokeStyle = this.copper.getColor();\r\n\r\n\tlet a=this.polyline.clone();\r\n\t\r\n\t\r\n\t\r\n\t// draw floating point\r\n\tif (this.isFloating()) {\r\n\t\tif(this.resumeState==ResumeState.ADD_AT_FRONT){\r\n\t\t\tlet p = this.floatingMidPoint.clone();\r\n\t\t\ta.points.unshift(p);\t\t\t\t\t\t    \t\t\r\n\t\t\r\n\t\t\tp = this.floatingEndPoint.clone();\r\n\t\t\ta.points.unshift(p);\t\t\t\r\n\t\t}else{\r\n\t\t\tlet p = this.floatingMidPoint.clone();\r\n\t\t\ta.add(p);\t\t\t\t\t\t    \t\t\r\n\t\t\r\n\t\t\tp = this.floatingEndPoint.clone();\r\n\t\t\ta.add(p);\r\n\t\t}\t\r\n\t}\r\n\ta.scale(scale.getScale());\r\n\ta.move( - viewportWindow.x, - viewportWindow.y);\t\r\n\t\r\n\tg2.save();\r\n\tif(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID())){\t\t\r\n\t\tg2.globalCompositeOperation = 'source-over';\t\t\r\n\t}else{\t\t\r\n\t\tg2.globalCompositeOperation = 'lighten';\t\t\t\r\n\t}\r\n\ta.paint(g2);\t\r\n\tg2.restore();\r\n\r\n}\r\n//drawControlShape(g2, viewportWindow, scale){       \r\n//    this.drawControlShape(g2, viewportWindow, scale);\r\n//}\r\nfromXML(data) {\r\n       this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"layer\"));\r\n\t   this.thickness = (parseInt(j$(data).attr(\"thickness\")));\r\n\t   var tokens = data.textContent.split(\",\");\r\n\t   var len = Math.floor(tokens.length / 2) * 2;\r\n\t   for (var index = 0; index < len; index += 2) {\r\n\t\t\tvar x = parseFloat(tokens[index]);\r\n\t\t\tvar y = parseFloat(tokens[index + 1]);\r\n\t\t\tthis.polyline.points.push(new d2.Point(x, y));\r\n\t\t}\r\n}\r\ntoXML() {\r\n\tvar result = \"<track layer=\\\"\" + this.copper.getName()\r\n\t\t\t\t\t\t\t\t+ \"\\\" thickness=\\\"\" + this.thickness + \"\\\" clearance=\\\"\" + this.clearance + \"\\\" net=\\\"\" + this.net +\"\\\">\";\r\n\tthis.polyline.points.forEach(function(point) {\r\n\t\tresult += utilities.roundFloat(point.x,5) + \",\" + utilities.roundFloat(point.y,5) + \",\";\r\n\t},this);\r\n\tresult += \"</track>\";\r\n\treturn result;\r\n}\r\n}\r\nclass PCBHole extends Shape{\r\n\tconstructor() {\r\n\t\tsuper(0, 0, 0, 0,0,core.Layer.LAYER_ALL);\t\t\r\n\t\tthis.displayName='Hole';\t\r\n        this.fillColor='white';\r\n        this.selectionRectWidth = 3000;\r\n        this.circle=new d2.Circle(new d2.Point(0,0),core.MM_TO_COORD(1.6)/2);\r\n        this.clearance=0;\r\n   \t}\r\nclone(){\r\n\t   \tvar copy = new PCBHole();\r\n\t\t copy.circle.pc.x=this.circle.pc.x;\r\n\t\t copy.circle.pc.y=this.circle.pc.y;\r\n\t\t copy.circle.r=this.circle.r;\t\r\n\t     copy.clearance=this.clearance;        \t        \r\n\t     return copy;\r\n}\t\r\nalignToGrid(isRequired) {\r\n\t    if(isRequired){\r\n\t       return super.alignToGrid(isRequired);\r\n\t    }else{\r\n\t        return null;\r\n\t    }\r\n\t}\r\nrotate(rotation) {\r\n        this.circle.rotate(rotation.angle,rotation.origin);  \r\n}    \r\n\t\r\nmove(xoffset, yoffset) {\r\n\tthis.circle.move(xoffset,yoffset);\r\n}\r\ngetDrawingLayerPriority() {\r\n  return 110;\r\n}\r\ngetClickableOrder() {\r\n    return 3;\r\n}\r\nsetWidth(width){\r\n\t  this.circle.r=width/2;\r\n\t}\r\ncalculateShape() {\r\n\t    return this.circle.box;\r\n\t}\r\ndrawClearence(g2, viewportWindow,scale, source) {\r\n\t\r\n    let r=this.circle.r+(this.clearance!=0?this.clearance:source.clearance);\r\n    let c=new d2.Circle(this.circle.pc.clone(),r);\r\n\tlet rect=c.box;\r\n\tif (!rect.intersects(source.getBoundingShape())) {\r\n\t\treturn;\r\n\t}\r\n\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\tg2._fill=true;\r\n\tg2.fillStyle = \"black\";\t\r\n\t\r\n\tc.scale(scale.getScale());\r\n    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\tc.paint(g2);\r\n\t\r\n    g2._fill=false;\t\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {\t\r\n\tvar rect = this.calculateShape();\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2.lineWidth=(scale.getScale())*1000;\r\n\tif (this.selection) {\r\n\t\tg2.strokeStyle = \"gray\";\r\n\t} else {\r\n\t\tg2.strokeStyle = \"white\";\r\n\t}\r\n\r\n    let c=this.circle.clone();\r\n\tc.scale(scale.getScale());\r\n    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\tc.paint(g2);\r\n\t\r\n}\r\ndrawControlShape(g2, viewportWindow,scale){\r\n\tutilities.drawCrosshair(g2, viewportWindow, scale,null,this.selectionRectWidth,[this.circle.center]);\r\n}\r\ntoXML(){\r\n    return \"<hole x=\\\"\"+utilities.roundFloat(this.circle.pc.x,5)+\"\\\" y=\\\"\"+utilities.roundFloat(this.circle.pc.y,5)+\"\\\" width=\\\"\"+this.circle.r*2+\"\\\"  clearance=\\\"\"+this.clearance+\"\\\" />\";\t\r\n}\r\nfromXML(data) {\r\n\tlet x=parseFloat(j$(data).attr(\"x\"));\r\n\tlet y=parseFloat(j$(data).attr(\"y\"));\r\n    this.circle.pc.set(x,y);\r\n\r\n\tthis.circle.r=(parseInt(j$(data).attr(\"width\")))/2;\t\r\n\tthis.clearance=(parseInt(j$(data).attr(\"clearance\")));\t\t\r\n} \r\n\r\n}\r\nclass PCBVia extends Shape{\r\nconstructor() {\r\n\t\tsuper(0, 0, 0, 0,core.MM_TO_COORD(0.3),core.Layer.LAYER_BACK|core.Layer.LAYER_FRONT);\t\t\r\n\t\tthis.outer=new d2.Circle(new d2.Point(0,0),core.MM_TO_COORD(0.8));\r\n\t\tthis.inner=new d2.Circle(new d2.Point(0,0),core.MM_TO_COORD(0.4));\r\n        this.selectionRectWidth = 3000;\r\n\t\tthis.displayName='Via';\t\r\n\t\tthis.net='';\r\n        this.fillColor='white'; \r\n        this.clearance=0;\r\n   \t}\r\n\r\nclone(){\r\n   \tvar copy = new PCBVia();\r\n        copy.net=this.net;\r\n        copy.clearance=this.clearance;\r\n        copy.inner=this.inner.clone();\r\n        copy.outer=this.outer.clone();\r\n        return copy;\r\n   \t}\r\n\r\nalignToGrid(isRequired) {\r\n    if(isRequired){\r\n       return super.alignToGrid(isRequired);\r\n    }else{\r\n        return null;\r\n    }\r\n}\r\nmove(xoffset, yoffset) {\r\n   this.outer.move(xoffset,yoffset);\r\n   this.inner.move(xoffset,yoffset);\r\n}\r\nrotate(rotation) {\r\n\tthis.inner.rotate(rotation.angle,rotation.origin);\r\n\tthis.outer.rotate(rotation.angle,rotation.origin);\r\n}\r\nsetWidth(width){\r\n\r\n}\r\ncalculateShape() {\r\n    return this.outer.box;\r\n}\r\ngetNetShapes(selected) {\r\n    let net=[]; \r\n    let tracks=this.owningUnit.getShapes(PCBTrack); \r\n    for(let  track of tracks){\r\n        if(selected.has(track.uuid)){\r\n            continue;\r\n        }            \r\n\r\n        if(track.polyline.intersect(this.outer)){\r\n           net.push(track); \r\n        }\r\n    }\r\n    return net;\r\n}\r\ndrawClearence(g2, viewportWindow,scale, source) {    \r\n\tif(source.net===this.net){\r\n\t\treturn;\r\n\t}\r\n    let r=this.outer.r+(this.clearance!=0?this.clearance:source.clearance);\r\n    let c=new d2.Circle(this.outer.pc.clone(),r);\r\n\tlet rect=c.box;\r\n\tif (!rect.intersects(source.getBoundingShape())) {\r\n\t\treturn;\r\n\t}\r\n\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\tg2._fill=true;\r\n\tg2.fillStyle = \"black\";\t\r\n\t\r\n\tc.scale(scale.getScale());\r\n    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\tc.paint(g2);\r\n\t\r\n    g2._fill=false;\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {   \r\n\tvar rect = this.calculateShape();\r\n\trect.scale(scale.getScale());\r\n\tif (!rect.intersects(viewportWindow)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2._fill=true;\r\n\tif (this.selection) {\r\n\t\tg2.fillStyle = \"gray\";\r\n\t} else {\r\n\t\tg2.fillStyle = \"white\";\r\n\t}\r\n\r\n\tlet c=this.outer.clone();\r\n\tc.scale(scale.getScale());\r\n    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\tc.paint(g2);\r\n\t\r\n\r\n\tg2.fillStyle = \"black\";\t\r\n\tc=this.inner.clone();\r\n\tc.scale(scale.getScale());\r\n    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\tc.paint(g2);\r\n\t\r\n    g2._fill=false;\r\n\tif(this.selection){\r\n\t   utilities.drawCrosshair(g2, viewportWindow, scale,null,this.selectionRectWidth,[this.inner.center]);\r\n\t}    \r\n}\r\ngetDrawingLayerPriority() {\r\n  return 120;\r\n}\r\n\r\nfromXML(data) {\r\n\tlet x=parseFloat(j$(data).attr(\"x\"));\r\n\tlet y=parseFloat(j$(data).attr(\"y\"));\r\n    this.inner.pc.set(x,y);\r\n    this.outer.pc.set(x,y);\r\n\r\n\r\n\tthis.outer.r=(parseInt(j$(data).attr(\"width\")))/2;\r\n\tthis.inner.r = (parseInt(j$(data).attr(\"drill\")))/2;\r\n\tthis.clearance=(parseInt(j$(data).attr(\"clearance\")));\r\n\tthis.net=(j$(data).attr(\"net\"));\r\n}\r\ntoXML() {\r\n    return \"<via x=\\\"\"+utilities.roundFloat(this.inner.center.x,5)+\"\\\" y=\\\"\"+utilities.roundFloat(this.inner.center.y,5)+\"\\\" width=\\\"\"+this.outer.r*2+\"\\\" drill=\\\"\"+this.inner.r*2+\"\\\"   clearance=\\\"\"+this.clearance+\"\\\" net=\\\"\"+(this.net==null?\"\":this.net)+\"\\\" />\";    \r\n}\r\n}\r\nclass PCBCopperArea extends Shape{\r\n\tconstructor( layermaskid) {\r\n        super( 0, 0, 0,0, 0, layermaskid);\r\n        this.displayName = \"Copper Area\";\r\n        this.clearance=core.MM_TO_COORD(0.2); \r\n        this.floatingStartPoint=new d2.Point();\r\n        this.floatingEndPoint=new d2.Point();                 \r\n        this.selectionRectWidth = 3000;\r\n        this.fill=core.Fill.FILLED;\r\n        this.polygon=new d2.Polygon();\r\n        this.resizingPoint;\r\n        this.clip=null;\r\n        this.net='GND';\r\n    }\r\nclone(){\r\n    let copy=new PCBCopperArea(this.copper.getLayerMaskID());\r\n    copy.net=this.net\r\n    copy.clearance=this.clearance;\r\n    copy.polygon=this.polygon.clone();  \r\n    return copy;\t\r\n}\r\n\r\nprepareClippingRegion(viewportWindow,scale){\r\n    let arr=[];\r\n    this.polygon.points.forEach(function(point){\r\n        let p=point.clone();            \r\n        p.scale(scale.getScale());\r\n        p.move(-viewportWindow.x,-viewportWindow.y);\r\n        arr.push(p);    \r\n\t}.bind(this));\r\n    //prepare clip only once\r\n    this.clip = new Path2D();    \r\n    this.clip.moveTo(arr[0].x,arr[0].y);\r\n    for (var i = 1; i < arr.length; i++) {\r\n \t   this.clip.lineTo(arr[i].x, arr[i].y);\r\n    } \r\n    \r\n}\r\n\r\nalignResizingPointToGrid(pt) {\r\n    this.owningUnit.getGrid().snapToGrid(pt);\r\n}\r\ncalculateShape(){  \t    \r\n   return this.polygon.box;\r\n}\t\r\n\r\ngetLinePoints() {\r\n   return this.polygon.points;\r\n}\r\nadd(point) {\r\n    this.polygon.add(point);\r\n}\r\ngetDrawingLayerPriority() {\r\n    if(this.owningUnit==null){            \r\n        return super.getDrawingOrder();\r\n    }\r\n    \r\n    if(this.owningUnit.compositeLayer.activeSide==core.Layer.Side.resolve(this.copper.getLayerMaskID())){\r\n       return 2;\r\n    }else{\r\n       return 1; \r\n    }\r\n}\r\nsetResizingPoint(point) {\r\n    this.resizingPoint=point;\r\n}\r\nisFloating() {\r\n    return (!this.floatingStartPoint.equals(this.floatingEndPoint));                \r\n}\r\nisClicked(x,y){\r\n\t  var result = false;\r\n\t\t// build testing rect\r\n\t  var rect = d2.Box.fromRect(x\r\n\t\t\t\t\t\t\t\t- (3000 / 2), y\r\n\t\t\t\t\t\t\t\t- (3000 / 2), 3000,\r\n\t\t\t\t\t\t\t\t3000);\r\n\t  var r1 = rect.min;\r\n\t  var r2 = rect.max;\r\n\r\n\t  // ***make lines and iterate one by one\r\n\t  var prevPoint = this.polygon.points[this.polygon.points.length-1];\r\n\r\n\t  this.polygon.points.some(function(wirePoint) {\r\n\t\t\t\t\t\t\t// skip first point\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (utilities.intersectLineRectangle(\r\n\t\t\t\t\t\t\t\t\t\tprevPoint, wirePoint, r1, r2)) {\r\n\t\t\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tprevPoint = wirePoint;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t});\r\n\r\n\treturn result;\r\n}\r\nisControlRectClicked(x, y) {\r\n\tvar rect = d2.Box.fromRect(x-this.selectionRectWidth / 2, y - this.selectionRectWidth/ 2, this.selectionRectWidth, this.selectionRectWidth);\r\n\tlet point = null;\r\n\r\n\tthis.polygon.points.some(function(wirePoint) {\r\n\t\tif (rect.contains(wirePoint)) {\r\n\t\t\t\t\tpoint = wirePoint;\r\n\t\t  return true;\r\n\t\t}else{\r\n\t\t  return false;\r\n\t\t}\r\n\t});\r\n\r\n\treturn point;\r\n}\r\nisInRect(r) {\r\n\r\n    return this.polygon.points.every(function(wirePoint){\r\n    \treturn r.contains(wirePoint.x,wirePoint.y);                        \r\n    });\r\n    \r\n}\r\nreset(){\r\n\tthis.resetToPoint(this.floatingStartPoint);\t\r\n}\r\nresetToPoint(p){\r\n    this.floatingStartPoint.set(p.x,p.y);\r\n    this.floatingEndPoint.set(p.x,p.y); \r\n}\r\nrotate(rotation) {\r\n\tthis.polygon.rotate(rotation.angle,rotation.origin);\r\n}\r\nResize(xoffset, yoffset, clickedPoint) {\r\n\tclickedPoint.set(clickedPoint.x + xoffset,\r\n\t\t\t\t\t\t\t\tclickedPoint.y + yoffset);\r\n}\r\npaint(g2,viewportWindow,scale, layersmask){\r\n\tvar rect = this.polygon.box;\r\n\trect.scale(scale.getScale());\t\t\r\n\tif (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2.lineWidth = 1;\r\n\t\r\n\tif(this.isFloating()){\r\n      g2.strokeStyle = this.copper.getColor();\t\t\r\n\t}else{\r\n\t  g2._fill=true;\r\n\t  if (this.selection) {\r\n\t\t g2.fillStyle = \"gray\";\r\n\t  } else {\r\n\t\t g2.fillStyle = this.copper.getColor();\r\n\t  }\r\n\t}\r\n\tlet a=this.polygon.clone();\t\r\n\tif (this.isFloating()) {\r\n\t\tlet p = this.floatingEndPoint.clone();\r\n\t\ta.add(p);\t\r\n    }\r\n\ta.scale(scale.getScale());\r\n\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\tg2.save();\r\n    if(this.owningUnit.compositeLayer.activeSide== core.Layer.Side.resolve(this.copper.getLayerMaskID())){\t\t\r\n\t\tg2.globalAlpha  = 1;\r\n\t}else{\t\t\r\n\t\tg2.globalAlpha = 0.5;\r\n\t}\r\n\ta.paint(g2);\r\n\tg2.restore();\r\n\t\r\n\tg2._fill=false;\r\n    \r\n    \r\n    //draw clearence background\r\n    this.prepareClippingRegion(viewportWindow, scale);\r\n    this.owningUnit.shapes.forEach(target=>{\r\n    \tif(target.drawClearence!=undefined){\r\n         target.drawClearence(g2, viewportWindow, scale, this);\r\n    \t}\r\n    });\r\n\t\r\n\t\r\n//\tlet dst = [];\r\n//\tthis.polygon.points.forEach(function(point) {\r\n//\t\tdst.push(point.getScaledPoint(scale));\r\n//\t});\r\n//\tg2.globalCompositeOperation = 'lighter';\r\n//\tg2.beginPath();\r\n//\tg2.lineCap = 'round';\r\n//\tg2.lineJoin = 'round';\r\n//\tg2.moveTo(dst[0].x - viewportWindow.x, dst[0].y\r\n//\t\t\t\t\t\t\t- viewportWindow.y);\r\n//\tfor (var i = 1; i < dst.length; i++) {\r\n//\t\t\t\t\t\tg2.lineTo(dst[i].x - viewportWindow.x, dst[i].y\r\n//\t\t\t\t\t\t\t\t- viewportWindow.y);\r\n//\t}\r\n//\t\r\n//\t// draw floating point\r\n//\tif (this.isFloating()) {\r\n//\t\t\tlet p = this.floatingEndPoint.getScaledPoint(scale);\r\n//\t\t\t\tg2.lineTo(p.x - viewportWindow.x, p.y\r\n//\t\t\t\t\t\t\t\t- viewportWindow.y);\r\n//\t}\r\n//\tg2.closePath();\r\n//\r\n//\tif (this.selection){\r\n//\t\tg2.fillStyle = \"gray\";\r\n//    }else{    \t\r\n//\t\tg2.fillStyle = this.copper.getColor();\r\n//\t}\r\n//    g2.fill();   \r\n//    \r\n//    if(this.isSelected()){  \r\n//    \tg2.lineWidth=1;\r\n//    \tg2.strokeStyle = \"blue\";                   \r\n//        g2.stroke();\r\n//    \r\n//        this.drawControlShape(g2,viewportWindow,scale);\r\n//    }\r\n//    \r\n//\tg2.globalCompositeOperation = 'source-over';\r\n}\t\r\ndrawControlShape(g2, viewportWindow, scale) {\r\n\tif (this.isSelected()) {\t\r\n\t  utilities.drawCrosshair(g2,viewportWindow,scale,null,this.selectionRectWidth,this.polygon.points);\r\n\t}\r\n}\r\nfromXML(data){\t\r\n    this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"layer\"));\r\n\tthis.clearance = (parseInt(j$(data).attr(\"clearance\")));\r\n\tthis.net=(j$(data).attr(\"net\"));\r\n\t\r\n\t   var tokens = data.textContent.split(\",\");\r\n\t   var len = Math.floor(tokens.length / 2) * 2;\r\n\t   for (var index = 0; index < len; index += 2) {\r\n\t\t\tvar x = parseFloat(tokens[index]);\r\n\t\t\tvar y = parseFloat(tokens[index + 1]);\r\n\t\t\tthis.polygon.points.push(new d2.Point(x, y));\r\n\t   }\r\n}\r\ntoXML() {\r\n\tvar result = \"<copperarea layer=\\\"\" + this.copper.getName()\r\n\t\t\t\t\t\t\t\t+ \"\\\" padconnect=\\\"\" + this.padConnection + \"\\\" clearance=\\\"\" + this.clearance + \"\\\" net=\\\"\" + this.net +\"\\\">\";\r\n\tthis.polygon.points.forEach(function(point) {\r\n\t\tresult += utilities.roundFloat(point.x,5) + \",\" + utilities.roundFloat(point.y,5) + \",\";\r\n\t},this);\r\n\tresult += \"</copperarea>\";\r\n\treturn result;\r\n}\r\n}\r\nclass BoardOutlineShapeFactory{\r\n\tstatic createRect(board){\r\n\t\t//create 4 lines connected\r\n\t\tlet line=new PCBLine(core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\r\n\t\tline.add(0,0);\r\n\t\tline.add(board.width,0);\r\n\t\tboard.add(line);\r\n\r\n\t\tline=new PCBLine(core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\t\t\r\n\t\tline.add(board.width,0);\r\n\t\tline.add(board.width,board.height);\r\n\t\tboard.add(line);\r\n\t\t\r\n\t\tline=new PCBLine(core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\t\t\r\n\t\tline.add(board.width,board.height);\r\n\t\tline.add(0,board.height);\r\n\t\tboard.add(line);\r\n\r\n\t\tline=new PCBLine(core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\t\t\r\n\t\tline.add(0,board.height);\r\n\t\tline.add(0,0);\r\n\t\tboard.add(line);\t\t\r\n\t}\r\n\tstatic createRoundRect(board){\r\n\t  let rect=new RoundRect(0,0,board.width,board.height,core.MM_TO_COORD(5));\r\n\t  for(const a of rect.roundRect.arcs){\r\n\t\tlet arc=new PCBArc(a.pc.x ,a.pc.y,a.r,core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\r\n\t\tarc.setExtendAngle(a.endAngle);\t\t    \t\t\r\n\t\tarc.setStartAngle(a.startAngle);       \r\n\t\tboard.add(arc);    \t\t \r\n\t  }\r\n\t  for(const s of rect.roundRect.segments){\r\n\t\tlet line=new PCBLine(core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\t\t\r\n\t\tline.add(s.ps.x,s.ps.y);\r\n\t\tline.add(s.pe.x,s.pe.y);\r\n\t\tboard.add(line);\t\t\t\t \r\n\t  }\r\n\t}\r\n\t\r\n\tstatic createCircle(board){\r\n\t\tlet d=Math.min(board.width,board.height);\r\n\t\tlet x=board.width/2;\r\n\t\tlet y=board.height/2;\r\n\t\t\r\n\t\tlet circle=new PCBCircle(x,y,d/2,core.MM_TO_COORD(0.5),core.Layer.BOARD_OUTLINE_LAYER);\r\n\t\tboard.add(circle);\r\n\t}\r\n\t\r\n}\r\nmodule.exports ={\r\n\t\tPCBCopperArea,\r\n\t\tPCBFootprint,\r\n\t\tPCBLabel,\r\n\t\tPCBCircle,\r\n\t\tPCBRoundRect,\r\n\t\tPCBArc,\r\n\t\tPCBVia,\r\n\t\tPCBHole,\r\n\t\tPCBTrack,\r\n\t\tPCBLine,\r\n\t\tPCBSolidRegion,\r\n\t\tBoardShapeFactory,\r\n\t\tBoardOutlineShapeFactory\r\n\t\t\r\n}","var mywebpcb=require('core/core').mywebpcb;\r\nvar core=require('core/core');\r\nvar BoardContainer=require('board/d/boardcomponent').BoardContainer;\r\n\r\n\r\nBoardLoadView=Backbone.View.extend({\r\n\t  initialize:function(opt){\r\n\t\t\tj$('#BoardLoadDialog').jqxWindow('open');\r\n\t\t\tj$('#BoardLoadDialog').off('close', j$.proxy(this.onclose,this)); \r\n\t\t\tj$('#BoardLoadDialog').on('close', j$.proxy(this.onclose,this)); \r\n\t\t\tthis.unitSelectionPanel=new core.UnitSelectionPanel({selectorid:'boardselectionpanel',canvasprefixid:'b',enabled:opt.enabled});\r\n\t\t\tthis.libraryview=new LibraryView({unitSelectionPanel:this.unitSelectionPanel});  \r\n\t    \tthis.buttonview=new ButtonLoadView({unitSelectionPanel:this.unitSelectionPanel});  \r\n\t\t  },\r\n      onclose:function(){\r\n    \t  this.undelegateEvents();\r\n    \t  this.unitSelectionPanel.release();\r\n    \t  this.libraryview.clear();\r\n    \t  this.buttonview.clear();\r\n    \t  this.remove();\r\n    \t  this.unbind();\r\n      },\t\t  \r\n      render:function(){\r\n    \tthis.libraryview.render();  \r\n    \tthis.buttonview.render();\r\n    \tthis.unitSelectionPanel.render();\r\n      }\r\n\t\t  \r\n});\r\n\r\nLibraryView=Backbone.View.extend({\r\n\tel:\"#projectcomboslot\",\r\n\tinitialize:function(opt){\r\n\t\tthis.unitSelectionPanel=opt.unitSelectionPanel;\r\n\t\tj$('#boardtree').jqxTree({width: '100%',height:'260px'});\r\n\t\t//bind select element\r\n\t\tj$('#boardtree').on('select',j$.proxy(this.onvaluechange,this));\t\t\t\r\n        this.loadworkspaces();\r\n\t},\r\n\tclear:function(){\r\n\t    //unbind select element\t\t\r\n\t\tj$('#boardtree').off('select',j$.proxy(this.onvaluechange,this));\r\n\t\tj$('#boardtree').jqxTree('clear');\r\n\t\tthis.undelegateEvents();\r\n\t},\r\n    events: {\r\n        'change #projectcombo':'onchange',\r\n    },\r\n    onchange:function(event){\r\n    \tthis.loadboards(j$('#projectcombo').val()); \r\n    },\r\n    onvaluechange:function(event){\r\n        //is this category or footprint selection\r\n    \tvar item = j$('#boardtree').jqxTree('getItem', event.args.element);\r\n    \tvar  url=j$('#projectcombo').val()+'/'+item.value.project;\t\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url:encodeURI('/rest/boards/workspaces/'+url),\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#BoardLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(function(data, textStatus, jqXHR){\r\n\t            this.unitSelectionPanel.release();\r\n\t            \r\n\t            let boardContainer=new BoardContainer(true);\t            \r\n\t            core.isEventEnabled=false;\r\n\t            boardContainer.parse(data);\r\n\t            core.isEventEnabled=true;\r\n\t            this.unitSelectionPanel.unitSelectionGrid.setModel(boardContainer);\r\n\t            this.unitSelectionPanel.unitSelectionGrid.scaleFactor=11;\r\n\t            this.unitSelectionPanel.unitSelectionGrid.build();   \r\n\t            this.unitSelectionPanel.render();\t        \t\r\n\t        },this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#BoardLoadDialog').unblock();\r\n\t        }\r\n\t    });\r\n    \t\r\n    },\r\n    loadworkspaces:function(){\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/boards/workspaces',\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#BoardLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(this.onloadworkspaces,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#BoardLoadDialog').unblock();\r\n\t        }\r\n\t    });\r\n\t    \r\n\t}, \r\n\tonloadworkspaces:function(data, textStatus, jqXHR){\r\n\t\tvar that=this; \r\n\t\tj$(data).find(\"name\").each(j$.proxy(function(){\r\n\t\t  j$('#projectcombo').append('<option value=\"' +j$(this).text()+ '\">' +  j$(this).text() + '</option>');\r\n\t\t}),that);\r\n\r\n\t\tthis.loadboards(j$('#projectcombo').val());\r\n\t},\t\r\n\tloadboards:function(workspace){\r\n\t\tif(workspace==null){\r\n\t\t\treturn;\r\n\t\t}\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: encodeURI('/rest/boards/workspaces/'+workspace),\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#BoardLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(this.onloadboards,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#BoardLoadDialog').unblock();\r\n\t        }\r\n\t    });\t\t\r\n\t},\r\n\tonloadboards:function(data, textStatus, jqXHR){\r\n\t\tvar that=this; \r\n\t\tj$('#boardtree').jqxTree('clear');\r\n\t\tj$(data).find(\"name\").each(j$.proxy(function(){\t\r\n\t\t\tj$('#boardtree').jqxTree('addTo', { label: j$(this).text(),value:{project:j$(this).attr(\"project\"),fullname:(j$(this).attr(\"fullname\")!=undefined?j$(this).text():undefined)}}, null);         \r\n\t\t}),that);\t\t\r\n\t\tj$('#boardtree').jqxTree('render');\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\"<select class=\\\"form-control input-sm\\\" id=\\\"projectcombo\\\"></select>\");\r\n\t\t\r\n\t}\r\n});\r\nButtonLoadView=Backbone.View.extend({\r\n\tel:\"#boardbuttonslot\",\r\n\tinitialize:function(opt){\r\n\t  this.unitSelectionPanel=opt.unitSelectionPanel;\r\n    },\t\r\n    clear:function(){\r\n       this.undelegateEvents();\r\n    },\r\n    events: {\r\n        \"click  #loadbuttonid\" : \"onload\",\t\r\n        \"click  #closebuttonid\" : \"onclose\",\t\r\n    },\r\n    onload:function(){\r\n    \t if(this.unitSelectionPanel.unitSelectionGrid.model==null){\r\n    \t\t return;\r\n    \t }\r\n    \tmywebpcb.trigger('workspaceview:load',this.unitSelectionPanel.unitSelectionGrid.model);\r\n\t\t//close dialog \r\n\t\tj$('#BoardLoadDialog').jqxWindow('close');\r\n\t\t\r\n    },\r\n    onclose:function(){\r\n    \tj$('#BoardLoadDialog').jqxWindow('close'); \t\r\n    },\r\n    \r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<button  id=\\\"loadbuttonid\\\" class=\\\"btn btn-default\\\">Load</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+\r\n\t    \"<button  id=\\\"closebuttonid\\\" class=\\\"btn btn-default\\\">Close</button>\");\r\n\t}\r\n});\r\n\r\nmodule.exports =BoardLoadView;","var mywebpcb=require('core/core').mywebpcb;\r\nvar core=require('core/core');\r\nvar BoardContainer=require('board/d/boardcomponent').BoardContainer;\r\n\r\n\r\nvar BoardSaveView=Backbone.View.extend({\r\n\tinitialize:function(opt){\r\n\t\t\tthis.model=opt.model; \r\n\t\t\tj$('#BoardSaveDialog').jqxWindow({height: 300, width: 420});\r\n\t\t\tj$('#BoardSaveDialog').jqxWindow('open');\r\n\t\t\tj$('#BoardSaveDialog').off('close', j$.proxy(this.onclose,this)); \r\n\t\t\tj$('#BoardSaveDialog').on('close', j$.proxy(this.onclose,this)); \t\t\t\t    \t\r\n\t\t\tthis.workspaceview=new WorkspaceView(opt);\r\n\t\t\tthis.buttonview=new ButtonView(opt); \r\n\t\t\t\r\n\t},\r\n\tonclose:function(){\r\n\t\tthis.buttonview.clear();\t\r\n\t},\r\n    render:function(){ \r\n    \tthis.buttonview.render();\r\n    }\r\n\t\t  \r\n});\r\n\r\nWorkspaceView=Backbone.View.extend({\r\n\tinitialize:function(opt){\r\n\t\tthis.model=opt.model;\r\n\t\tj$('#workspacecomboid').editableSelect('clear');\r\n\t\tj$('#projectnameid').val(this.model.formatedFileName);\r\n\t\tj$('#workspacecomboid').val('');\r\n\t\t this.loadworkspaces();\r\n\t},\r\n    loadworkspaces:function(){\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/boards/workspaces',\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#BoardSaveDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(this.onloadworkspaces,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#BoardSaveDialog').unblock();\r\n\t        }\r\n\t    });    \t\r\n    },\r\n    onloadworkspaces:function(data, textStatus, jqXHR){\r\n\t\tlet that=this;\r\n    \tj$(data).find(\"name\").each(j$.proxy(function(){\r\n\t\t  j$('#workspacecomboid').editableSelect('add',j$(this).text());\r\n\t\t}),that);  \t\r\n    },\r\n\r\n\trender:function(){\r\n\r\n\t\t\r\n\t}\r\n});\r\n\r\nButtonView=Backbone.View.extend({\r\n\tel:\"#savebuttonslot\",\r\n\tinitialize:function(opt){\r\n\t  this.model=opt.model;\r\n    },\t\r\n    clear:function(){\r\n       this.undelegateEvents();\r\n    },\r\n    events: {\r\n        \"click  #savebuttonid\" : \"onsave\",\t\r\n        \"click  #closebuttonid\" : \"onclose\",\t\r\n    },\r\n    onsave:function(){\r\n    \tlet workspace=j$('#workspacecomboid').val()!=''?j$('#workspacecomboid').val():'null';\r\n\t    let name=j$('#projectnameid').val()!=''?j$('#projectnameid').val():'null'\t\r\n    \tj$.ajax({\r\n\t        type: 'POST',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/boards/workspaces/'+workspace+'?projectName='+name+'&overwrite='+j$('#overrideCheck').is(\":checked\"),\r\n\t        dataType: \"xml\",\r\n\t        data:this.model.format(),\r\n\t        beforeSend:function(){\r\n\t\t          j$('#BoardSaveDialog').block({message:'<h5>Saving...</h5>'});\t\r\n\t\t        },\r\n\t        success: function(){\r\n\t    \t\t//close dialog \r\n\t    \t\tj$('#BoardSaveDialog').jqxWindow('close');\r\n\t        },\t        \t\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            //if(jqXHR.status==404){\r\n\t            \t//data=jqXHR.responseJSON;\r\n\t            \t//clean error list\r\n\t            \t//$(\"#errorsres ul\").empty();\r\n\t            \t//for(var i = 0; i < data.length; i++) {\r\n\t            \t//\t$(\"#errorsres ul\").append('<li>'+data[i]+'</li>');\r\n\t            \t//}\r\n\t            //}else{\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t            //}\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#BoardSaveDialog').unblock();\r\n\t        }\r\n\t    });    \t\r\n    },\r\n    onclose:function(){\r\n    \tj$('#BoardSaveDialog').jqxWindow('close'); \t\r\n    },\r\n    \r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<button  id=\\\"savebuttonid\\\" class=\\\"btn btn-default\\\">Save</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+\r\n\t    \"<button  id=\\\"closebuttonid\\\" class=\\\"btn btn-default\\\">Close</button>\");\r\n\t}\r\n});\r\n\r\nmodule.exports =BoardSaveView","var mywebpcb=require('core/core').mywebpcb;\r\nvar events=require('core/events');\r\nvar core=require('core/core');\r\n//var UnitMgr = require('core/unit').UnitMgr;\r\nvar utilities =require('core/utilities');\r\nvar BaseBuilder = require('core/views/panelview').BaseBuilder;\r\n\r\nvar PCBFootprint=require('board/shapes').PCBFootprint;\r\nvar PCBLabel=require('board/shapes').PCBLabel;\r\nvar PCBTrack=require('board/shapes').PCBTrack;\r\nvar PCBVia=require('board/shapes').PCBVia;\r\nvar PCBCircle=require('board/shapes').PCBCircle;\r\nvar PCBArc=require('board/shapes').PCBArc;\r\nvar PCBLine=require('board/shapes').PCBLine;\r\nvar PCBRoundRect=require('board/shapes').PCBRoundRect;\r\nvar PCBCopperArea=require('board/shapes').PCBCopperArea;\r\nvar PCBHole=require('board/shapes').PCBHole;\r\nvar\tPCBSolidRegion=require('board/shapes').PCBSolidRegion;\r\n\r\nvar ComponentPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t  ComponentPanelBuilder.__super__.initialize(component);\t\r\n      this.id=\"componentpanelbuilder\";\r\n    },\r\n    events: {\r\n        'keypress #nameid' : 'onenter',\t\r\n    },\r\n\tonclick:function(event){\r\n\t\tevent.preventDefault();\r\n\t\talert(\"Hello from me with event.\");\r\n\t},\r\n\tonenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\treturn; \r\n\t     }\r\n\t\t if(event.target.id=='nameid'){\r\n\t\t\t this.target.getModel().setFileName(j$(\"#nameid\").val()); \r\n\t\t\t this.target.fireContainerEvent({target:null,type:events.Event.RENAME_CONTAINER});\r\n\t\t }\r\n\t\t //mycanvas.focus();\r\n\t\t\r\n\t},\r\n\tupdateui:function(){\r\n\t\tj$(\"#nameid\").val(this.target.getModel().formatedFileName);\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Name</td><td><input type='text' id='nameid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar CirclePanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tCirclePanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"circlepanelbuilder\";  \r\n    },\t\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'keypress #thicknessid' : 'onenter',        \r\n        'keypress #radiusid' : 'onenter',\r\n        'change #fillid': 'onchange',\r\n        'change #controllayerid':'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        }\r\n        if(event.target.id=='fillid'){        \r\n        \tthis.target.fill=parseInt(j$('#fillid').find('option:selected').val());        \r\n        }\r\n        this.component.repaint(); \r\n      },    \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\tthis.target.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val()));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='radiusid'){\r\n\t\t\t this.target.circle.r=(core.MM_TO_COORD(parseFloat(j$('#radiusid').val())));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='xid'){\t\t\t \r\n\t         var x=this.fromUnitX(j$('#xid').val()); \r\n\t         this.target.Resize(x-this.target.resizingPoint.x, 0, this.target.resizingPoint);\t\t\t   \r\n\t\t } \r\n\t     if(event.target.id=='yid'){\t\t\r\n\t         var y=this.fromUnitY(j$('#yid').val()); \r\n\t         this.target.Resize(0, y-this.target.resizingPoint.y, this.target.resizingPoint);\t\t   \t\t\t \r\n\t\t } \t\t \r\n\t\t this.component.repaint(); \t\t \r\n    },\r\n\r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:this.target.resizingPoint.x));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:this.target.resizingPoint.y)); \r\n\t\tj$('#thicknessid').val(core.COORD_TO_MM(this.target.thickness));\r\n\t\tj$(\"#radiusid\").val(core.COORD_TO_MM(this.target.circle.radius));   \r\n\t\tj$(\"#fillid\").val(this.target.fill);\t\t\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_OUTLINE_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Fill</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"fillid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:1,value:'EMPTY',selected:true},{id:2,value:'FILLED'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Radius</td><td><input type='text' id='radiusid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar RectPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tRectPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"rectpanelbuilder\";\r\n\t\t//app.bind('itemlinkimpl:oncklick', $.proxy(this.onitemclick,this));    \r\n    },\t\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'keypress #thicknessid' : 'onenter',\r\n        'keypress #widthid' : 'onenter',\r\n        'keypress #heightid' : 'onenter',\r\n        'keypress #roundingid' : 'onenter',\r\n        'keypress #rotateid' : 'onenter',\r\n        'change #fillid': 'onchange',\r\n        'change #controllayerid': 'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        }\r\n    \tif(event.target.id=='fillid'){        \r\n        \tthis.target.fill=parseInt(j$('#fillid').find('option:selected').val());        \r\n        }\r\n        this.component.repaint(); \r\n      },    \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\t this.target.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val()));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='xid'){\t\t\t \r\n\t         var x=this.fromUnitX(j$('#xid').val()); \r\n\t         this.target.Resize(x-this.target.resizingPoint.x, 0, this.target.resizingPoint);\t\t\t   \r\n\t\t } \r\n\t     if(event.target.id=='yid'){\t\t\r\n\t         var y=this.fromUnitY(j$('#yid').val()); \r\n\t         this.target.Resize(0, y-this.target.resizingPoint.y, this.target.resizingPoint);\t\t   \t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='rotateid'){\r\n\t\t\t   this.target.setRotation(Math.abs(utilities.round(j$('#rotateid').val())));\t\t\t \r\n\t\t } \t\r\n\t\t if(event.target.id=='roundingid'){\r\n\t\t\t this.target.setRounding(core.MM_TO_COORD(parseFloat(j$('#roundingid').val())));\t\t\t \r\n\t\t }\r\n\t\t this.component.repaint(); \t\t \r\n    },\r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:this.target.resizingPoint.x));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:this.target.resizingPoint.y)); \r\n\t\tj$('#thicknessid').val(core.COORD_TO_MM(this.target.thickness));\t\r\n\t\tj$(\"#roundingid\").val(core.COORD_TO_MM(this.target.roundRect.rounding));\r\n\t\tj$(\"#rotateid\").val(this.target.rotation);\r\n\t\tj$(\"#fillid\").val(this.target.fill);\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_OUTLINE_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Fill</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"fillid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:1,value:'EMPTY',selected:true},{id:2,value:'FILLED'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Rotate</td><td><input type='text' id='rotateid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Rounding</td><td><input type='text' id='roundingid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\t\t        \r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar SolidRegionPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tSolidRegionPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"solidregionpanelbuilder\";  \r\n    },\t\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'change #controllayerid':'onchange'\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        }              \r\n        this.component.repaint(); \r\n    }, \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t if(event.target.id=='xid'){\t\t\t \r\n\t         var x=this.fromUnitX(j$('#xid').val()); \r\n\t         this.target.Resize(x-this.target.resizingPoint.x, 0, this.target.resizingPoint);\t\t\t   \r\n\t\t } \r\n\t     if(event.target.id=='yid'){\t\t\r\n\t         var y=this.fromUnitY(j$('#yid').val()); \r\n\t         this.target.Resize(0, y-this.target.resizingPoint.y, this.target.resizingPoint);\t\t   \t\t\t \r\n\t\t } \r\n\t\t this.component.repaint(); \t\r\n   },    \r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:(this.target.resizingPoint.x)));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:(this.target.resizingPoint.y))); \r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"</table>\");\t\t\t\t\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar ArcPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tArcPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"arcpanelbuilder\";  \r\n    },\t\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'keypress #thicknessid' : 'onenter',\r\n        'keypress #widthid' : 'onenter',\r\n        'keypress #startangleid' : 'onenter',\r\n        'keypress #extendangleid' : 'onenter',\r\n        'change #fillid': 'onchange', \r\n        'change #controllayerid':'onchange',\r\n        'change #arctypeid':'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        }\r\n        if(event.target.id=='arctypeid'){\r\n        \tthis.target.arcType= (j$('#arctypeid').val());\r\n        }\r\n        if(event.target.id=='fillid'){        \r\n        \tthis.target.fill=parseInt(j$('#fillid').find('option:selected').val());        \r\n        }\r\n        this.component.repaint(); \r\n    }, \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\t this.target.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val()));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='widthid'){\r\n\t\t\t   this.target.setRadius(core.MM_TO_COORD(parseFloat(j$('#widthid').val())));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='startangleid'){\r\n\t\t\t   this.target.setStartAngle(j$('#startangleid').val());\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='extendangleid'){\r\n\t\t\t   this.target.setExtendAngle(j$('#extendangleid').val());\t\r\n\t\t } \t\r\n\t\t this.component.repaint(); \t\r\n    },\r\n\tupdateui:function(){\t\t\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\t\r\n\t\tj$('#arctypeid').val(this.target.arcType);\r\n\t\tj$(\"#startangleid\").val(utilities.roundDouble(this.target.arc.startAngle));    \r\n\t\tj$(\"#extendangleid\").val(utilities.roundDouble(this.target.arc.endAngle));\t\t\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(utilities.roundDouble(this.toUnitX(this.target.resizingPoint==null?0:this.target.resizingPoint.x)));\r\n        j$('#yid').val(utilities.roundDouble(this.toUnitY(this.target.resizingPoint==null?0:this.target.resizingPoint.y))); \r\n\t\tj$('#thicknessid').val(core.COORD_TO_MM(this.target.thickness));\r\n\t\tj$(\"#widthid\").val(utilities.roundDouble(core.COORD_TO_MM(this.target.arc.r)));\r\n\t\tj$(\"#fillid\").val(this.target.fill);\t\t\r\n\t},\r\n\trender:function(){\r\n\t\t\t\t\t\t\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_OUTLINE_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Arc Type</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"arctypeid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:0,value:'TWO POINT ARC',selected:true},{id:1,value:'CENTER POINT ARC'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Fill</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"fillid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:1,value:'EMPTY',selected:true},{id:2,value:'FILLED'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Radius</td><td><input type='text' id='widthid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Start&deg</td><td><input type='text' id='startangleid' value='' class='form-control input-sm\\'></td></tr>\"+\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Extend&deg</td><td><input type='text' id='extendangleid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"</table>\");\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar CopperAreaPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tCopperAreaPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"copperareapanelbuilder\";  \r\n    },\t\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'keypress #clearanceid' : 'onenter',\r\n        'keypress #netid' : 'onenter',\r\n        'change #fillid': 'onchange', \r\n        'change #controllayerid':'onchange',\r\n        'change #paddconnectionid': 'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n            this.component.getModel().getUnit().reorder();\r\n        }\r\n        if(event.target.id=='fillid'){        \r\n        \tthis.target.fill=parseInt(j$('#fillid').find('option:selected').val());        \r\n        }\r\n        this.component.repaint(); \r\n    }, \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t if(event.target.id=='netid'){\r\n\t\t\t this.target.net=j$('#netid').val();\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='clearanceid'){\r\n\t\t\t   this.target.clearance=(core.MM_TO_COORD(parseFloat(j$('#clearanceid').val())));\t\t\t \r\n\t\t } \r\n\t\t if(event.target.id=='xid'){\t\t\t \r\n\t         var x=this.fromUnitX(j$('#xid').val()); \r\n\t         this.target.Resize(x-this.target.resizingPoint.x, 0, this.target.resizingPoint);\t\t\t   \r\n\t\t } \r\n\t     if(event.target.id=='yid'){\t\t\r\n\t         var y=this.fromUnitY(j$('#yid').val()); \r\n\t         this.target.Resize(0, y-this.target.resizingPoint.y, this.target.resizingPoint);\t\t   \t\t\t \r\n\t\t } \r\n\t\t this.component.repaint(); \t\r\n    },\r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n\t\t//j$(\"#startangleid\").val(this.target.startAngle);    \r\n\t\t//j$(\"#extendangleid\").val(this.target.extendAngle);\t\t\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:(this.target.resizingPoint.x)));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:(this.target.resizingPoint.y))); \r\n\t\tj$('#clearanceid').val(core.COORD_TO_MM(this.target.clearance));\r\n\t\tj$(\"#netid\").val(this.target.net);\r\n\t\tj$(\"#fillid\").val(this.target.fill);\r\n\t},\r\n\trender:function(){\r\n\t\t\t\t\t\t\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Fill</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"fillid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:1,value:'EMPTY',selected:true},{id:2,value:'FILLED'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Clearance</td><td><input type='text' id='clearanceid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Pad Connect</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"paddconnectionid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:0,value:'DIRECT',selected:true},{id:1,value:'THERMAL'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Net</td><td><input type='text' id='netid' value='' class='form-control input-sm\\'></td></tr>\"+\t\r\n\t\t\t\t\r\n\t\t\"</table>\");\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar FootprintPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t  FootprintPanelBuilder.__super__.initialize(component);\r\n      this.id=\"footprintpanelbuilder\";\r\n    },\r\n    events: {\r\n        'keypress #rotateid' : 'onenter',\r\n        'keypress #nameid' : 'onenter',   \r\n        'keypress #valueid' : 'onenter',\t\r\n        'keypress #referenceid' : 'onenter',\t\r\n        'change #sideid': 'onchange',\r\n    },\r\n\tonenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\treturn; \r\n\t     }\r\n\t\t  if(event.target.id=='rotateid'){\r\n\t\t\t  let center=this.target.getBoundingShape().center;\r\n\t\t      this.target.setRotation(Math.abs(utilities.round(j$('#rotateid').val())),center); \r\n\t\t  }\t\r\n\t\t if(event.target.id=='nameid'){\r\n\t\t\t this.target.displayName=j$(\"#nameid\").val(); \r\n\t\t\t this.component.getModel().fireUnitEvent({target:this.target,type:events.Event.RENAME_UNIT});\t\t   \r\n\t\t }\r\n\t\t if(event.target.id=='referenceid'){\r\n\t\t   var texture=this.target.reference;\r\n\t\t   texture.setText(j$(\"#referenceid\").val());\r\n\t\t }\r\n\t\t if(event.target.id=='valueid'){\r\n\t\t   var texture=this.target.value;\r\n\t\t   texture.setText(j$(\"#valueid\").val());\r\n\t\t }\r\n\t\t this.component.repaint();   \r\n\t},   \r\n\tonchange:function(event){\r\n\t\tif(event.target.id=='sideid'){\r\n\t\t\tthis.target.setSide(j$(\"#sideid\").val());\r\n\t\t\tthis.component.repaint();\r\n\t\t}\t\t      \r\n\t},\t\r\n\tupdateui:function(){\r\n\t\t   j$(\"#nameid\").val(this.target.displayName);\r\n\t\t   \r\n\t\t   j$(\"#rotateid\").val(this.target.rotation); \t\r\n\t\t   \r\n\t\t   var texture=this.target.reference;\r\n\t\t   j$(\"#referenceid\").val(texture==null?\"\":texture.text);\r\n\r\n\t\t\t \r\n\t\t   texture=this.target.value;\r\n\t\t   j$(\"#valueid\").val(texture==null?\"\":texture.text);\r\n\t\t   j$(\"#sideid\").val(this.target.getSide());\r\n\t},\r\n\trender:function(){\t\t\t\t\t\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<table width='100%'>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Side</td><td>\" +\r\n\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"sideid\\\">\"+\r\n\t    this.fillComboBox([{id:'1',value:'TOP',selected:true},{id:'2',value:'BOTTOM'}])+\r\n\t    \"</select>\" +\r\n\t\t\"</td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Name</td><td><input type='text' id='nameid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Reference</td><td><input type='text' id='referenceid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Value</td><td><input type='text' id='valueid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Rotate</td><td><input type='text' id='rotateid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\t\t\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\n/**Footprint and Pad properties \r\nvar FootprintPanelBuilderExt=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t  FootprintPanelBuilderExt.__super__.initialize(component);\r\n      this.id=\"footprintpanelbuilderext\";\r\n    },\r\n    events: {\r\n        'keypress #rotateid' : 'onenter',\r\n        'keypress #nameid' : 'onenter',   \r\n        'keypress #valueid' : 'onenter',\t\r\n        'keypress #referenceid' : 'onenter',\t\r\n        'change #sideid': 'onchange',\r\n    },\r\n\tonenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\treturn; \r\n\t     }\r\n\t\t  if(event.target.id=='rotateid'){\r\n\t\t\t  let center=this.target.getBoundingShape().center;\r\n\t\t      this.target.setRotation(Math.abs(utilities.round(j$('#rotateid').val())),center); \r\n\t\t  }\t\r\n\t\t if(event.target.id=='nameid'){\r\n\t\t\t this.target.displayName=j$(\"#nameid\").val(); \r\n\t\t\t this.component.getModel().fireUnitEvent({target:this.target,type:events.Event.RENAME_UNIT});\t\t   \r\n\t\t }\r\n\t\t if(event.target.id=='referenceid'){\r\n\t\t   var texture=this.target.reference;\r\n\t\t   texture.setText(j$(\"#referenceid\").val());\r\n\t\t }\r\n\t\t if(event.target.id=='valueid'){\r\n\t\t   var texture=this.target.value;\r\n\t\t   texture.setText(j$(\"#valueid\").val());\r\n\t\t }\r\n\t\t this.component.repaint();   \r\n\t},   \r\n\tonchange:function(event){\r\n\t\tif(event.target.id=='sideid'){\r\n\t\t\tthis.target.setSide(j$(\"#sideid\").val());\r\n\t\t\tthis.component.repaint();\r\n\t\t}\t\t      \r\n\t},\t\r\n\tupdateui:function(){\r\n\t\t   j$(\"#nameid\").val(this.target.displayName);\r\n\t\t   \r\n\t\t   j$(\"#rotateid\").val(this.target.rotation); \t\r\n\t\t   \r\n\t\t   var texture=this.target.reference;\r\n\t\t   j$(\"#referenceid\").val(texture==null?\"\":texture.text);\r\n\r\n\t\t\t \r\n\t\t   texture=this.target.value;\r\n\t\t   j$(\"#valueid\").val(texture==null?\"\":texture.text);\r\n\t\t   j$(\"#sideid\").val(this.target.getSide());\r\n\r\n/**pad props \r\n\t\t   j$('#layerid').val(\"Cu\")\r\n\t\t   j$('#padwidthid').val(core.COORD_TO_MM(this.target.selectedPad.width));\r\n\t        if(this.target.selectedPad.getShape()==PadShape.CIRCULAR||this.target.selectedPad.getShape()==PadShape.POLYGON){\r\n\t        \tj$('#padheightid').prop('disabled',true);\r\n\t        \tj$('#padheightid').val('');\r\n\t        }else{\r\n\t        \tj$('#padheightid').prop('disabled',false);\r\n\t        \tj$('#padheightid').val(core.COORD_TO_MM(this.target.selectedPad.height));  \r\n\t        }\r\n\t},\r\n\trender:function(){\t\t\t\t\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<table width='100%'>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>OO Side</td><td>\" +\r\n\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"sideid\\\">\"+\r\n\t    this.fillComboBox([{id:'1',value:'TOP',selected:true},{id:'2',value:'BOTTOM'}])+\r\n\t    \"</select>\" +\r\n\t\t\"</td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Name</td><td><input type='text' id='nameid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Reference</td><td><input type='text' id='referenceid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Value</td><td><input type='text' id='valueid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\"<tr><td style='width:50%;padding:7px'>Rotate</td><td><input type='text' id='rotateid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\t\t\r\n        \"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t        \"<select class=\\\"form-control input-sm\\\" id=\\\"layerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'},{id:'Cu',value:'Cu'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\"</td></tr>\"+\r\n\t\t\"<tr><td style='padding:7px'>Width</td><td><input type='text' id='padwidthid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n   \t    \"<tr><td style='padding:7px'>Height</td><td><input type='text' id='padheightid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\t\t\t\r\n\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\n*/\r\nvar BoardPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t  BoardPanelBuilder.__super__.initialize(component);\r\n      this.id=\"boardpanelbuilder\";\r\n    },\r\n    events: {\r\n        'keypress #nameid' : 'onenter',\r\n        'keypress #widthid':'onenter',\r\n        'keypress #heightid':'onenter',\r\n        'change #gridrasterid': 'onchange',\r\n        'change #sideid': 'onchange',\r\n        'keypress #originxid':'onenter',\r\n        'keypress #originyid':'onenter',\r\n    },\r\n\tonenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\treturn; \r\n\t     }\r\n\t\t if(event.target.id=='widthid'||event.target.id=='heightid'){           \r\n\t\t    this.component.getModel().getUnit().setSize(core.MM_TO_COORD(parseFloat(j$('#widthid').val())),core.MM_TO_COORD(parseFloat(j$('#heightid').val())));  \r\n\t\t    this.component.componentResized();     \r\n\t\t    this.component.repaint();\r\n\t\t }\r\n\t\t if(event.target.id=='nameid'){\t\t\t \r\n\t\t\t this.target.unitName=j$(\"#nameid\").val(); \r\n\t\t\t this.component.getModel().fireUnitEvent({target:this.target,type:events.Event.RENAME_UNIT});\r\n\t\t }\r\n\t\t if(event.target.id=='originxid'||event.target.id=='originyid'){           \r\n\t\t\t    this.component.getModel().getUnit().getCoordinateSystem().reset(core.MM_TO_COORD(parseFloat(j$('#originxid').val())),core.MM_TO_COORD(parseFloat(j$('#originyid').val())));  \r\n\t\t\t    this.component.componentResized();     \r\n\t\t\t    this.component.repaint();\r\n\t\t }\r\n\t\t //mycanvas.focus();\r\n\t},\r\n\tonchange:function(event){\r\n\t\tif(event.target.id=='gridrasterid'){\r\n\t\t\tthis.target.grid.setGridValue(parseFloat(j$(\"#gridrasterid\").val()));\r\n\t\t\tthis.component.repaint();\r\n\t\t}\t\r\n\t\tif(event.target.id=='sideid'){\r\n\t\t\tthis.target.setActiveSide(parseInt(j$(\"#sideid\").val()));\r\n\t\t\tthis.component.repaint();\r\n\t\t}\t\t\r\n\t},\r\n\tupdateui:function(){\r\n\t   j$(\"#nameid\").val(this.target.unitName);\r\n\t   j$(\"#widthid\").val(core.COORD_TO_MM( this.target.width));    \r\n\t   j$(\"#heightid\").val(core.COORD_TO_MM(this.target.height));\r\n\t   j$(\"#gridrasterid\").val(this.target.grid.getGridValue());\t \r\n\t   j$(\"#sideid\").val((this.target.compositeLayer.activeSide));\r\n\t   if(this.component.getModel().getUnit().coordinateSystem!=null){\r\n\t\t     j$(\"#originxid\").val(core.COORD_TO_MM(this.component.getModel().getUnit().getCoordinateSystem().getX()));    \r\n\t\t     j$(\"#originyid\").val(core.COORD_TO_MM(this.component.getModel().getUnit().getCoordinateSystem().getY()));\r\n\t   }\t   \r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Name</td><td><input type='text' id='nameid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Side</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"sideid\\\">\"+\r\n\t\t\t    this.fillComboBox([{id:1,value:'TOP',selected:true},{id:2,value:'BOTTOM'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Width</td><td><input type='text' id='widthid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Height</td><td><input type='text' id='heightid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Units</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"unitsid\\\">\"+\r\n\t\t\t    this.fillComboBox([{id:'mm',value:'MM',selected:true},{id:'inch',value:'INCH'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Grid</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"gridrasterid\\\">\"+\r\n\t\t\t    this.fillComboBox(core.GridRaster)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Origin X</td><td><input type='text' id='originxid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Origin Y</td><td><input type='text' id='originyid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar HolePanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tViaPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"holepanelbuilder\"; \r\n    },\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\t\r\n        'keypress #drillsizeid' : 'onenter',   \r\n\t\t'keypress #clearanceid' : 'onenter',     \r\n    },\r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t     }\r\n\t\t if(event.target.id=='drillsizeid'){\r\n\t\t\t this.target.setWidth(core.MM_TO_COORD(parseFloat(j$('#drillsizeid').val()))); \r\n\t\t }     \r\n\r\n\t\t if(event.target.id=='xid'){\t            \r\n\t\t\t this.target.x=this.fromUnitX(j$('#xid').val()); \r\n\t     }\t         \r\n\t\t if(event.target.id=='yid'){\t            \r\n\t\t\t this.target.y=this.fromUnitY(j$('#yid').val());  \r\n\t     }\r\n\t\t if(event.target.id=='clearanceid'){\r\n\t\t\t   this.target.clearance=(core.MM_TO_COORD(parseFloat(j$('#clearanceid').val())));\t\t\t \r\n\t\t }\r\n\t\t this.component.repaint();  \r\n   },\r\n\tupdateui:function(){\t\t\r\n        j$('#xid').val(this.toUnitX(this.target.circle.center.x));\r\n        j$('#yid').val(this.toUnitY(this.target.circle.center.y)); \r\n        j$('#drillsizeid').val(core.COORD_TO_MM(2*this.target.circle.r));\r\n\t\tj$('#clearanceid').val(core.COORD_TO_MM(this.target.clearance));\r\n        \r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Drill size</td><td><input type='text' id='drillsizeid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Clearance</td><td><input type='text' id='clearanceid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}    \r\n});\r\nvar ViaPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tViaPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"viapanelbuilder\"; \r\n    },\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\t\r\n        'keypress #drillsizeid' : 'onenter',\r\n        'keypress #netid' : 'onenter',\r\n\t\t'keypress #viasizeid':'onenter',\r\n    },\r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t     }\r\n\t\t if(event.target.id=='drillsizeid'){\r\n\t\t\t this.target.inner.r=core.MM_TO_COORD(parseFloat(j$('#drillsizeid').val())/2); \r\n\t\t }   \r\n\t\t if(event.target.id=='netid'){\r\n\t\t\t this.target.net=j$('#netid').val(); \r\n\t\t }   \r\n\r\n\t\t if(event.target.id=='viasizeid'){\r\n\t\t\t \r\n\t\t\t this.target.outer.r=core.MM_TO_COORD(parseFloat(j$('#viasizeid').val())/2); \r\n\t\t }   \r\n\r\n\t\t if(event.target.id=='xid'){\t            \r\n\t\t\t this.target.x=this.fromUnitX(j$('#xid').val()); \r\n\t     }\t         \r\n\t\t if(event.target.id=='yid'){\t            \r\n\t\t\t this.target.y=this.fromUnitY(j$('#yid').val());  \r\n\t     }\r\n\t\t this.component.repaint();  \r\n   },\r\n\tupdateui:function(){\t\t\r\n        j$('#xid').val(this.toUnitX(this.target.inner.pc.x));\r\n        j$('#yid').val(this.toUnitY(this.target.inner.pc.y)); \r\n        j$('#drillsizeid').val(core.COORD_TO_MM(2*this.target.inner.r));\r\n        j$('#viasizeid').val(core.COORD_TO_MM(2*this.target.outer.r));\r\n\t\tj$('#netid').val(this.target.net);\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Drill size</td><td><input type='text' id='drillsizeid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Via size</td><td><input type='text' id='viasizeid' value='' class='form-control input-sm\\'></td></tr>\"+        \r\n\t\t\t\t\"<tr><td style='padding:7px'>Net</td><td><input type='text' id='netid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}    \r\n});\r\nvar LinePanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tLinePanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"linepanelbuilder\";\r\n\t\t//app.bind('itemlinkimpl:oncklick', $.proxy(this.onitemclick,this));    \r\n    },\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\t\r\n        'keypress #thicknessid' : 'onenter',\r\n        'change #controllayerid':'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        }\r\n        this.component.repaint(); \r\n      }, \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t     }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\t this.target.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val())); \r\n\t\t }   \r\n\t\t if(event.target.id=='xid'){\t            \r\n\t\t\t this.target.resizingPoint.x=this.fromUnitX(j$('#xid').val()); \r\n\t     }\t         \r\n\t\t if(event.target.id=='yid'){\t            \r\n\t\t\t this.target.resizingPoint.y=this.fromUnitY(j$('#yid').val());  \r\n\t     }\r\n\t\t this.component.repaint();  \r\n    },\r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:this.target.resizingPoint.x));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:this.target.resizingPoint.y)); \r\n        j$('#thicknessid').val(core.COORD_TO_MM(this.target.thickness));\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_OUTLINE_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t        \"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\nvar TrackPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tTrackPanelBuilder.__super__.initialize(component);\r\n\t\tthis.id=\"trackpanelbuilder\";\r\n\t\t//app.bind('itemlinkimpl:oncklick', $.proxy(this.onitemclick,this));    \r\n    },\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\t\r\n        'keypress #thicknessid' : 'onenter',\r\n        'change #controllayerid':'onchange',\r\n    },\r\n    onchange:function(event){\r\n        if(event.target.id=='controllayerid'){\r\n        \tthis.target.copper= core.Layer.Copper.valueOf(j$('#controllayerid').val());\r\n        \tthis.component.getModel().getUnit().reorder();\r\n        }\r\n        this.component.repaint(); \r\n      }, \r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t     }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\t this.target.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val())); \r\n\t\t }   \r\n\t\t if(event.target.id=='xid'){\t            \r\n\t\t\t this.target.resizingPoint.x=this.fromUnitX(j$('#xid').val()); \r\n\t     }\t         \r\n\t\t if(event.target.id=='yid'){\t            \r\n\t\t\t this.target.resizingPoint.y=this.fromUnitY(j$('#yid').val());  \r\n\t     }\r\n\t\t this.component.repaint();  \r\n    },\r\n\tupdateui:function(){\r\n\t\tj$('#controllayerid').val(this.target.copper.getName());\r\n        j$('#xid').prop('disabled',this.target.resizingPoint==null?true:false);  \r\n        j$('#yid').prop('disabled',this.target.resizingPoint==null?true:false);\r\n        j$('#xid').val(this.toUnitX(this.target.resizingPoint==null?0:this.target.resizingPoint.x));\r\n        j$('#yid').val(this.toUnitY(this.target.resizingPoint==null?0:this.target.resizingPoint.y)); \r\n        j$('#thicknessid').val(core.COORD_TO_MM(this.target.thickness));\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox([{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'}])+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Clearance</td><td><input type='text' id='clearanceid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Net</td><td><input type='text' id='netid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\r\n\t\t\"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\n\r\nvar LabelPanelBuilder=BaseBuilder.extend({\r\n\tinitialize:function(component){\r\n\t\tLabelPanelBuilder.__super__.initialize(component);\t\r\n\t\tthis.id=\"labelpanelbuilder\";   \r\n    },\r\n    events: {\r\n        'keypress #xid' : 'onenter',\t\r\n        'keypress #yid' : 'onenter',\r\n        'keypress #textid' : 'onenter',\t\r\n        'keypress #rotateid' : 'onenter',\r\n        'keypress #sizeid' : 'onenter',\t\r\n        'keypress #thicknessid' : 'onenter',\t\r\n\t\t'change #controllayerid':'onchange',\r\n    },\r\n    onchange:function(event){      \r\n\t  if(event.target.id=='controllayerid'){\r\n\t\t  this.target.setCopper(core.Layer.Copper.valueOf(j$('#controllayerid').val()));\r\n      }\r\n      this.component.repaint(); \r\n    },\r\n    onenter:function(event){\r\n\t\t if(event.keyCode != 13){\r\n\t\t\t\treturn; \r\n\t\t }\r\n\t\t  if(event.target.id=='rotateid'){\r\n\t\t      this.target.setRotation(Math.abs(utilities.round(j$('#rotateid').val()))); \r\n\t\t  }\t\t\t \r\n\t\t if(event.target.id=='textid'){\r\n\t\t\t this.target.texture.setText(j$('#textid').val());\t\t\t  \r\n\t\t }\r\n\t\t if(event.target.id=='sizeid'){\r\n\t\t\t this.target.texture.setSize(core.MM_TO_COORD(parseFloat(j$('#sizeid').val())));\t\t\t \r\n\t\t }\r\n\t\t if(event.target.id=='thicknessid'){\r\n\t\t\t this.target.texture.thickness=core.MM_TO_COORD(parseFloat(j$('#thicknessid').val()));\t\t\t \r\n\t\t }\t\t \r\n\t\t if((event.target.id=='yid')||(event.target.id=='xid')){\t            \r\n\t\t\t this.target.texture.setLocation(this.fromUnitX(j$('#xid').val()),this.fromUnitY(j$('#yid').val()));  \r\n\t     }\t \r\n\t\t this.component.repaint();     \t\t    \t\r\n    },\r\n\tupdateui:function(){\r\n\t j$(\"#rotateid\").val(this.target.texture.rotation); \t\r\n\t j$('#controllayerid').val(this.target.copper.getName());\t\r\n\t j$('#textid').val(this.target.texture.text);\t\r\n\t j$('#xid').val(this.toUnitX(this.target.texture.anchorPoint.x));\r\n\t j$('#yid').val(this.toUnitY(this.target.texture.anchorPoint.y));\t \r\n\t j$('#sizeid').val(core.COORD_TO_MM(this.target.texture.size));\r\n\t j$('#thicknessid').val(core.COORD_TO_MM(this.target.texture.thickness));\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\t\t\"<table width='100%'>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>Layer</td><td>\" +\r\n\t\t\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"controllayerid\\\">\"+\r\n\t\t\t\tthis.fillComboBox(core.PCB_SYMBOL_LAYERS)+\r\n\t\t\t    \"</select>\" +\r\n\t\t\t\t\"</td></tr>\"+\r\n\t\t\t\t\"<tr><td style='width:50%;padding:7px'>X</td><td><input type='text' id='xid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Y</td><td><input type='text' id='yid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Text</td><td><input type='text' id='textid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Rotate</td><td><input type='text' id='rotateid' value='' class='form-control input-sm\\'></td></tr>\"+\t\t\t\t\r\n\t\t\t\t\"<tr><td style='padding:7px'>Size</td><td><input type='text' id='sizeid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t\t\t\"<tr><td style='padding:7px'>Thickness</td><td><input type='text' id='thicknessid' value='' class='form-control input-sm\\'></td></tr>\"+\r\n\t\t        \"</table>\");\r\n\t\t\t\r\n\t\treturn this;\r\n\t}\r\n});\r\n\r\nvar BoardsTree=Backbone.View.extend({\t\r\n\tinitialize:function(opt){\t\t\r\n\t    //creat tree\r\n\t\tthis.name=opt.name;\r\n\t\tthis.boardComponent=opt.boardComponent;\t\t\r\n\t\tthis.$tree=j$('#'+opt.name);\r\n\t\t//bind select element\r\n\t\tthis.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n\t    \r\n\t    mywebpcb.bind('shape:inspector',this.onshapeevent,this);\r\n\t\tmywebpcb.bind('unit:inspector',this.onunitevent,this);\r\n\t\tmywebpcb.bind('container:inspector',this.oncontainerevent,this);\r\n\t},\r\n\taddUnit:function(unit){\r\n\t\tvar treeItems = this.$tree.jqxTree('getItems');\r\n\t\tvar firstItem = treeItems[0];\r\n\t\tvar firstItemElement = firstItem.element;\r\n\t\tthis.$tree.jqxTree('addTo', { label: unit.unitName,id:unit.getUUID(),value:111}, firstItemElement);\t\r\n\t\tthis.$tree.jqxTree('expandItem', firstItemElement);\r\n\t    //bypass select event\r\n\t\tthis.$tree.off('select',j$.proxy(this.valuechanged,this));\r\n\t\tthis.$tree.jqxTree('selectItem',  j$(\"#\"+unit.getUUID())[0]);\r\n\t\tthis.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n\t},\r\n\tvaluechanged:function(event){\r\n\t\tvar id=event.args.element.id;\r\n        var item = this.$tree.jqxTree('getItem', event.args.element);\r\n        \r\n\t\tif(id==\"root\"){\r\n\t\t\tmywebpcb.trigger('tree:select',{target:null,type:events.Event.SELECT_CONTAINER}); \r\n\t\t}\r\n\r\n\t\tif(item.value==111){\r\n\t\t   //unit\t\r\n\t\t\tthis.boardComponent.getModel().getUnit().setViewportPositionValue(this.boardComponent.viewportWindow.x,this.boardComponent.viewportWindow.y);\r\n\t\t\t\r\n\t\t\tthis.boardComponent.getModel().setActiveUnitUUID(item.id);\r\n\t\t\tthis.boardComponent.getModel().getUnit().setSelected(false);\r\n\t\t\tthis.boardComponent.componentResized();\r\n\t\t\t\r\n\t\t\t//restore viewport\r\n\t\t\tthis.boardComponent.viewportWindow.x=this.boardComponent.getModel().getUnit().viewportPositionX;\r\n\t\t\tthis.boardComponent.viewportWindow.y=this.boardComponent.getModel().getUnit().viewportPositionY;\t\t\t\r\n\t\t\t\r\n\t\t\tthis.boardComponent.repaint();\r\n\t\t\tmywebpcb.trigger('tree:select',{target:this.boardComponent.getModel().getUnit(),type:events.Event.SELECT_UNIT}); \r\n\t\t}\r\n\t\tif(item.value==222){\r\n\t\t\t//is this the same shape of the current unit\r\n\t\t\tif(this.boardComponent.getModel().getUnit().getUUID()!=item.parentId){\r\n\t\t \t\t   this.$tree.off('select',j$.proxy(this.valuechanged,this));\r\n\t\t \t\t   this.$tree.jqxTree('selectItem',  j$(\"#\"+item.parentId)[0]);\r\n\t\t\t\t   this.boardComponent.getModel().getUnit().setViewportPositionValue(this.boardComponent.viewportWindow.x,this.boardComponent.viewportWindow.y);\r\n\t\t \t\t   this.boardComponent.getModel().setActiveUnitUUID(item.parentId);\r\n\t\t \t\t   this.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n\t\t\t}\r\n\t\t\t   //shape\r\n\t\t\tvar shape=this.boardComponent.getModel().getUnit().getShape(item.id);\r\n\t\t\tthis.boardComponent.getModel().getUnit().setSelected(false);\r\n\t\t\tshape.setSelected(true);\t\t\t\r\n\t\t\t\r\n\t\t\t            \r\n\t        //position on shape center\r\n            var rect=shape.getBoundingShape();            \r\n            this.boardComponent.setViewportPosition(rect.center.x,rect.center.y);\r\n            this.boardComponent.repaint(); \t\t  \r\n\t\t\tmywebpcb.trigger('tree:select',{target:shape,type:events.Event.SELECT_SHAPE}); \t\r\n\t\t}\r\n\t\r\n\t},\r\n\toncontainerevent:function(event){\r\n\t      switch (event.type) {\r\n\t      case events.Event.SELECT_CONTAINER:\r\n\r\n\t         break;\r\n\t      case events.Event.RENAME_CONTAINER:\r\n\t    \t  var element=j$('#root')[0];\r\n\t    \t  this.$tree.jqxTree('updateItem', { label: this.boardComponent.getModel().formatedFileName},element);\r\n\t    \t  this.$tree.jqxTree('render');\r\n\t         break; \r\n\t      case events.Event.DELETE_CONTAINER:\r\n\r\n\t         break; \r\n\t     }   \t\r\n\t},\r\n    onunitevent:function(event){\r\n \t   if(event.type==events.Event.ADD_UNIT){\r\n \t\t   //add unit to tree\r\n \t\t   this.addUnit(event.target);\r\n \t   }\r\n \t   if(event.type==events.Event.SELECT_UNIT){\r\n \t\t   //select unit\r\n \t\t   this.$tree.off('select',j$.proxy(this.valuechanged,this));\r\n \t\t   this.$tree.jqxTree('selectItem',  j$(\"#\"+event.target.getUUID())[0]);\r\n \t\t   this.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n \t   }\r\n \t   if(event.type==events.Event.DELETE_UNIT){\r\n\t \t\t    this.$tree.jqxTree('removeItem', j$(\"#\"+event.target.getUUID())[0], false);\r\n\t            // update the tree.\r\n\t\t \t\tthis.$tree.jqxTree('render');\r\n \t   } \r\n \t   if(event.type==events.Event.RENAME_UNIT){\r\n           var selectedItem = this.$tree.jqxTree('selectedItem');\r\n           if (selectedItem != null) {\r\n        \t   this.$tree.jqxTree('updateItem', { label: event.target.unitName}, selectedItem.element);\r\n        \t   this.$tree.jqxTree('render');\r\n           }  \r\n \t   }\r\n \t   \r\n    },\r\n\tonshapeevent:function(event){\r\n\t \tif(event.type==events.Event.ADD_SHAPE){\r\n\t \t\t   //add shape to tree\r\n\t \t\tvar element=j$(\"li #\"+event.target.owningUnit.getUUID())[0];\t \r\n\t \t\tthis.$tree.jqxTree('addTo', { label:event.target.displayName,id:event.target.getUUID(),value:222 }, element, false);\r\n\t \t\tthis.$tree.jqxTree('render');\r\n\t \t}\r\n\t \tif(event.type==events.Event.SELECT_SHAPE){\r\n\t \t\tthis.$tree.off('select',j$.proxy(this.valuechanged,this));\r\n\t \t\tthis.$tree.jqxTree('selectItem',  j$(\"#\"+event.target.getUUID())[0]);\t \t\t\r\n\t \t\tthis.$tree.jqxTree('render');\r\n\t \t\tthis.$tree.jqxTree('expandItem', j$(\"#\"+event.target.getUUID())[0]);\r\n\t \t\tthis.$tree.jqxTree('ensureVisible',  j$(\"#\"+event.target.getUUID())[0]);\r\n\t \t\tthis.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n\t \t}\r\n\t \tif(event.type==events.Event.DELETE_SHAPE){\r\n\t \t\tthis.$tree.jqxTree('removeItem', j$(\"#\"+event.target.getUUID())[0], false);\r\n  \t\t   //select unit\r\n\t \t\tthis.$tree.off('select',j$.proxy(this.valuechanged,this));\r\n\t \t\tthis.$tree.jqxTree('selectItem',  j$(\"#\"+event.target.owningUnit.getUUID())[0]);\r\n\t \t\tthis.$tree.on('select',j$.proxy(this.valuechanged,this));\r\n            // update the tree.\r\n\t \t\tthis.$tree.jqxTree('render');\r\n\t \t}\r\n\t \t\r\n\t},\r\n\tupdate:function(){\r\n\t\t\r\n\t},\r\n\trender:function(){\r\n\t  //tree is already shown\t\r\n\t}\r\n});\r\n\r\nvar BoardsInspector=Backbone.View.extend({\t\r\n\tinitialize:function(opt){\r\n\t\tthis.boardComponent=opt.boardComponent;\r\n\t\tthis.collection=new Backbone.Collection([\r\n\t\t                                         new BoardPanelBuilder(this.boardComponent),\r\n\t\t                                         new TrackPanelBuilder(this.boardComponent),\r\n\t\t                                         new FootprintPanelBuilder(this.boardComponent),\r\n\t\t\t\t\t\t\t\t\t\t\t\t //new FootprintPanelBuilderExt(this.boardComponent),\t\t                                         \r\n\t\t\t\t\t\t\t\t\t\t\t\t new ViaPanelBuilder(this.boardComponent),\r\n\t\t                                         new LabelPanelBuilder(this.boardComponent),\r\n\t\t                                         new ComponentPanelBuilder(this.boardComponent),\r\n\t\t                                         new CirclePanelBuilder(this.boardComponent),\r\n\t\t                                         new ArcPanelBuilder(this.boardComponent),\r\n\t\t                                         new LinePanelBuilder(this.boardComponent),\r\n\t\t                                         new RectPanelBuilder(this.boardComponent),\r\n\t\t                                         new HolePanelBuilder(this.boardComponent),\r\n\t\t                                         new SolidRegionPanelBuilder(this.boardComponent),\r\n\t\t                                         new CopperAreaPanelBuilder(this.boardComponent)\r\n\t\t                                         ]);\r\n\t\tthis.el= '#boardsinspectorid';\t\r\n\t\t//select container\r\n\t\tthis.panel=this.collection.get('componentpanelbuilder');\r\n\t\tthis.panel.attributes.delegateEvents();\r\n\t\tthis.panel.attributes.setTarget(this.boardComponent);\r\n\t\t//this.oncontainerevent({target:this.boardComponent,type:mywebpads.container.Event.SELECT_CONTAINER});\r\n\t\t\r\n\t\tmywebpcb.bind('shape:inspector',this.onshapeevent,this);\r\n\t\tmywebpcb.bind('unit:inspector',this.onunitevent,this);\r\n\t\tmywebpcb.bind('container:inspector',this.oncontainerevent,this);\r\n\t\t\r\n\t\tmywebpcb.bind('tree:select',this.ontreeevent,this);\r\n    },\r\n    ontreeevent:function(event){\r\n    \tif(event.type==events.Event.SELECT_CONTAINER){\r\n              this.oncontainerevent(event);\r\n    \t}\r\n    \tif(event.type==events.Event.SELECT_UNIT){\r\n    \t\t  this.onunitevent(event);\r\n    \t}\r\n    \tif(event.type==events.Event.SELECT_SHAPE){\r\n    \t\t  this.onshapeevent(event);\r\n    \t}\r\n    },\r\n    oncontainerevent:function(event){\r\n    \tif(event.type==events.Event.SELECT_CONTAINER){\r\n\t \t\t   //select unit\r\n\t \t\t  if(this.panel.id!='componentpanelbuilder'){\t\r\n\t \t\t\tthis.panel.attributes.remove();\r\n\t \t\t\tthis.panel=this.collection.get('componentpanelbuilder');\r\n\t \t\t\tthis.panel.attributes.delegateEvents();\r\n\t \t\t\tthis.panel.attributes.setTarget(this.boardComponent);\r\n\t \t\t\tthis.render(); \r\n\t \t\t  }\r\n \t    } \r\n    \tthis.panel.attributes.updateui();\r\n    },\r\n    onunitevent:function(event){\t\r\n\t \t   if(event.type==events.Event.ADD_UNIT){\r\n\t \t\t   //add unit to tree\r\n\t\t \t\t  if(this.panel.id!='boardpanelbuilder'){\t\r\n\t\t\t \t\t\tthis.panel.attributes.remove();\r\n\t\t\t \t\t\tthis.panel=this.collection.get('boardpanelbuilder');\r\n\t\t\t \t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t \t\t\tthis.render(); \r\n\t\t\t \t  }\r\n\t \t   }\r\n\t \t  if(event.type==events.Event.PROPERTY_CHANGE){\r\n\t \t\t  \r\n\t \t  }\r\n\t \t  if(event.type==events.Event.SELECT_UNIT){\r\n\t \t\t   //select unit\r\n\t \t\t  if(this.panel.id!='boardpanelbuilder'){\t\r\n\t \t\t\tthis.panel.attributes.remove();\r\n\t \t\t\tthis.panel=this.collection.get('boardpanelbuilder');\r\n\t \t\t\tthis.panel.attributes.delegateEvents();\r\n\t \t\t\tthis.render(); \r\n\t \t\t  }\r\n\t \t   }\r\n\t \t   if(event.type==events.Event.DELETE_UNIT){\r\n\t\t \t\t  if(this.panel.id!='componentpanelbuilder'){\t\r\n\t\t\t \t\t\tthis.panel.attributes.remove();\r\n\t\t\t \t\t\tthis.panel=this.collection.get('componentpanelbuilder');\r\n\t\t\t \t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t \t\t\tthis.panel.attributes.setTarget(this.boardComponent);\r\n\t\t\t \t\t\tthis.render(); \r\n\t\t\t \t\t\tthis.panel.attributes.updateui();\r\n\t\t\t \t\t  }\r\n\t\t \t\t return;\r\n\t \t   } \t\r\n\t\t\t//update panel ui values\r\n\t\t   this.panel.attributes.setTarget(event.target);\r\n\t\t   this.panel.attributes.updateui();\r\n    },\r\n\tonshapeevent:function(event){\r\n\t\tswitch(event.type){\r\n\t\tcase events.Event.PROPERTY_CHANGE:\r\n\t\tcase events.Event.SELECT_SHAPE:\r\n\t\tif(event.target instanceof PCBFootprint){\t\t\t\r\n\t\t\t//if(event.target.selectedPad==null){\r\n\t\t\t if(this.panel.id!='footprintpanelbuilder'){\t\t\t\t\r\n\t\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\t\tthis.panel=this.collection.get('footprintpanelbuilder');\r\n\t\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\t\tthis.render();\r\n\t\t     } \r\n            //}else{  //draw extended pad view\r\n\t        //  if(this.panel.id!='footprintpanelbuilderext'){\t\t\t\t\r\n\t\t\t//\t\tthis.panel.attributes.remove();\r\n\t\t\t//\t\tthis.panel=this.collection.get('footprintpanelbuilderext');\r\n\t\t\t//\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t//\t\tthis.render();\r\n\t\t    // }\r\n\t\t\t//}\r\n\t\t}\t\t\t\r\n\t\tif(event.target instanceof PCBLabel){\r\n\t\t\tif(this.panel.id!='labelpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('labelpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\r\n\t\tif(event.target instanceof PCBTrack){\r\n\t\t\tif(this.panel.id!='trackpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('trackpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\r\n\t\tif(event.target instanceof PCBRoundRect){\r\n\t\t\tif(this.panel.id!='rectpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('rectpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\t\t\r\n\t\tif(event.target instanceof PCBLine){\r\n\t\t\tif(this.panel.id!='linepanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('linepanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\t\t\r\n\t\tif(event.target instanceof PCBVia){\r\n\t\t\tif(this.panel.id!='viapanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('viapanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\r\n\t\tif(event.target instanceof PCBHole){\r\n\t\t\tif(this.panel.id!='holepanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('holepanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t    }\r\n\t\t}\t\t\r\n\t\tif((event.target instanceof PCBCircle)){\r\n\t\t\tif(this.panel.id!='circlepanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('circlepanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t}\t\r\n\t\tif((event.target instanceof PCBCopperArea)){\r\n\t\t\tif(this.panel.id!='copperareapanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('copperareapanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(event.target instanceof PCBSolidRegion){\r\n\t\t\tif(this.panel.id!='solidregionpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('solidregionpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t\t}\t\t\t\t\r\n\t\t}\r\n\t\tif((event.target instanceof PCBTrack)){\r\n\t\t\tif(this.panel.id!='trackpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('trackpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\tif(event.target instanceof PCBArc){\r\n\t\t\tif(this.panel.id!='arcpanelbuilder'){\r\n\t\t\t\tthis.panel.attributes.remove();\r\n\t\t\t\tthis.panel=this.collection.get('arcpanelbuilder');\r\n\t\t\t\tthis.panel.attributes.delegateEvents();\r\n\t\t\t\tthis.render();\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t//update panel ui values\r\n\t\tthis.panel.attributes.setTarget(event.target);\r\n\t\tthis.panel.attributes.updateui();\r\n\t\tbreak;\r\n\t\tcase events.Event.DELETE_SHAPE:\r\n\t\t\t//select unit\r\n//\t \t\t  if(this.panel.id!='footprintpanelbuilder'){\t\r\n//\t \t\t\tthis.panel.attributes.remove();\r\n//\t \t\t\tthis.panel=this.collection.get('footprintpanelbuilder');\r\n//\t \t\t\tthis.panel.attributes.delegateEvents();\r\n//\t \t\t\tthis.render(); \r\n//\t \t\t\tthis.panel.attributes.setTarget(event.target.owningUnit);\r\n//\t \t\t\tthis.panel.attributes.updateui();\r\n//\t \t\t  }\t\t\t\r\n\t\tbreak;\t\r\n\t   }\r\n\r\n\t},\r\n\tupdate:function(event){\r\n\t\t\r\n\t},\r\n\trender:function(){\r\n\t  j$(this.el).empty();\r\n\t  j$(this.el).append(this.panel.attributes.render().el);\r\n\t}\r\n});\r\n\r\n/**\r\n * Represents Tree View and Properties Inspector\r\n */\r\nvar BoardsPanelView=Backbone.View.extend({\r\n\tinitialize:function(opt){\r\n       this.footprintstree=new BoardsTree(opt);\r\n       this.footprintinspector=new BoardsInspector(opt);\r\n\t},\r\n\tupdate:function(){\r\n\t\t\r\n\t},\r\n\trender:function(){\r\n\t\t this.footprintstree.render();\r\n\t\t this.footprintinspector.render();\r\n\t},\r\n\t\r\n});\r\n\r\nmodule.exports ={\r\n\t       ComponentPanelBuilder,\r\n\t\t   BoardsPanelView\t   \r\n\t}","var LayerCollection = require('board/models/layer').LayerCollection;\r\nvar LayerModel = require('board/models/layer').LayerModel;\r\nvar Layer = require('core/core').Layer;\r\n\r\nvar LayerView=Backbone.View.extend({\r\n\ttagName: 'div',\r\n\tinitialize: function(opt){\r\n\t\tthis.boardComponent=opt.boardComponent;\r\n\t\t\r\n    },\r\n    events: {\r\n        \"click .layer-check\": 'onChange'\r\n    },\r\n    \r\n    onChange:function(){\r\n    \tthis.model.toggle();\r\n    \tthis.boardComponent.getModel().getUnit().compositeLayer.setLayerVisible(this.model.get('value'),this.model.get('checked'));\r\n    \tthis.boardComponent.repaint();\r\n    },\r\n    render:function(){\r\n        this.$el.html('<input type=\"checkbox\" style=\"width:3vw;height:3vh;\" class=\"layer-check\" value=\"' + this.model.get('value') + '\" /> ' + this.model.get('name'));\r\n        this.$('input').prop('checked', this.model.get('checked'));\r\n        \r\n    \treturn this;\r\n    }\t\r\n});\r\n\r\nvar LayersPanelView=Backbone.View.extend({\r\n\t  // Base the view on an existing element\r\n\tel:'#layer-panel-view-id',\r\n    initialize: function(boardComponent){\r\n    \tj$(this.el).empty();\r\n    \tthis.collection=new LayerCollection([\r\n                                         new LayerModel({ name: 'Top Silk Layer',value:Layer.SILKSCREEN_LAYER_FRONT,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.SILKSCREEN_LAYER_FRONT)}),\r\n\t\t\t\t\t\t\t\t\t\t new LayerModel({ name: 'Top Solder Mask Layer',value:Layer.SOLDERMASK_LAYER_FRONT,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.SOLDERMASK_LAYER_FRONT)}),\r\n\t\t\t\t\t\t\t\t\t     new LayerModel({ name: 'Top Copper Layer',value:Layer.LAYER_FRONT,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.LAYER_FRONT)}),\r\n                                         new LayerModel({ name: 'Bottom Copper Layer',value:Layer.LAYER_BACK,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.LAYER_BACK)}),\r\n                                         new LayerModel({ name: 'Bottom Solder Mask Layer',value:Layer.SOLDERMASK_LAYER_BACK,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.SOLDERMASK_LAYER_BACK)}),\r\n                                         new LayerModel({ name: 'Bottom Silk Layer',value:Layer.SILKSCREEN_LAYER_BACK,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.SILKSCREEN_LAYER_BACK)}),\r\n                                         new LayerModel({ name: 'Board Outline',value:Layer.BOARD_OUTLINE_LAYER,checked:boardComponent.getModel().getUnit().compositeLayer.isLayerVisible(Layer.BOARD_OUTLINE_LAYER)})\r\n                                     ]);\r\n    \tthis.list = j$('#layer-panel-view-id');\r\n    \tthis.collection.forEach(function(item){\r\n    \t\t  var view = new LayerView({ model: item,boardComponent:boardComponent });\r\n    \t\t  j$(this.el).append(view.render().el);              \r\n    \t}.bind(this));\r\n    \tj$(\"#LayerVisibilityDialog\").modal('show');\r\n    },\r\n    render:function(){\r\n    \t\r\n    }\r\n});\r\n\r\nmodule.exports =LayersPanelView;\r\n\t\r\n","var mywebpcb=require('core/core').mywebpcb;\r\nvar core=require('core/core');\r\nvar shape=require('core/shapes');\r\nvar events=require('core/events');\r\nvar FootprintLoadView=require('pads/views/footprintloadview');\r\nvar Board=require('board/d/boardcomponent').Board;\r\nvar BoardMgr = require('board/d/boardcomponent').BoardMgr;\r\nvar BoardOutlineShapeFactory = require('board/shapes').BoardOutlineShapeFactory;\r\nvar BoardContainer = require('board/d/boardcomponent').BoardContainer;\r\nvar UnitMgr = require('core/unit').UnitMgr;\r\nvar BoardLoadView=require('board/views/boardloadview');\r\nvar BoardSaveView=require('board/views/boardsaveview');\r\nvar LayersPanelView=require('board/views/layerspanelview');\r\nvar d2=require('d2/d2');\r\n\r\nvar ToggleButtonView=Backbone.View.extend({\r\n\r\n\t/*\r\n\t * initialize UI\r\n\t */\r\n\tinitialize:function(opt){\r\n\t\tthis.collection=opt.collection;\r\n\t\tthis.boardComponent=opt.boardComponent;\r\n\t\tmywebpcb.bind('libraryview:load',this.onfootprintload,this);\r\n\t\tmywebpcb.bind('workspaceview:load',this.onboardload,this);\r\n\t\tthis.bind();\r\n\t\tthis.update();\r\n\t},\r\n\tbind:function(){\r\n\t\t_.each(this.collection.models,j$.proxy(function(model,index,list) {\r\n\t\t\t    j$(\"#\"+model.id).bind( \"click\",{model:model},j$.proxy(this.onclick,this));\r\n\t\t\t}),this);\t\r\n\t},\r\n\tupdate:function(){\r\n\t\t_.each(this.collection.models,function(model,index,list) {\r\n              model.update();\r\n\t\t\t});\r\n\t\r\n\t},\r\n\ttogglegroup:function(group){\r\n\t\t_.each(this.collection.models,j$.proxy(function(model,index,list) {\r\n\t\t\tif(model.attributes.group===group){\r\n\t\t\t\tmodel.attributes.active=false;\r\n\t\t    }\r\n\t\t}),this);\t\t\r\n\t},\t\r\n\tonclick:function(event){\r\n\t    event.preventDefault();\r\n\t    //is this a group button\r\n\t    if(event.data.model.attributes.active&&event.data.model.attributes.group!=''){\r\n\t    \treturn;\r\n\t    }\r\n\t    if(event.data.model.attributes.group!=''){\r\n\t    \t//toggle group\r\n\t    \tthis.togglegroup(event.data.model.attributes.group);\r\n\t\t    event.data.model.attributes.active=!event.data.model.attributes.active;\r\n\t    }\r\n\t\tthis.update();\r\n\t\tif(event.data.model.id=='importfromclipboardid'){\t\r\n\t\t\tnavigator.clipboard.readText().then(data =>{ \r\n\t\t\t      let boardContainer=new BoardContainer(true);\r\n\t\t\t      let xml=(j$.parseXML(data));\t\t    \t  \r\n\t\t\t      //disable \r\n\t\t\t      core.isEventEnabled=false;\r\n\t\t\t      boardContainer.parse(xml);\r\n\t\t\t      core.isEventEnabled=true;\r\n\t\t\t  \t  mywebpcb.trigger('workspaceview:load',boardContainer);\r\n\t\t\t\t});\r\n\t\t}\r\n\t\tif(event.data.model.id=='exporttoclipboardid'){\t\r\n\t\t\tnavigator.clipboard.writeText(this.boardComponent.getModel().format());\r\n\t\t}\r\n\t\tif(event.data.model.id=='addunitid'){\t\t\t\r\n\t\t\tvar board=new Board(core.MM_TO_COORD(80),core.MM_TO_COORD(80));\r\n            board.unitName=\"Unknown\";\r\n\t\t\tthis.boardComponent.getModel().add(board);\r\n            this.boardComponent.getModel().setActiveUnitUUID(board.getUUID());\r\n            this.boardComponent.componentResized(); \r\n            this.boardComponent.repaint();\r\n            this.boardComponent.getModel().fireUnitEvent({target:this.boardComponent.getModel().getUnit(),type:events.Event.SELECT_UNIT}); \t\r\n\t\t}\r\n\t\tif(event.data.model.id=='boardoutlineroundrectid'){\r\n\t\t\tBoardMgr.getInstance().deleteBoardOutlineShapes(this.boardComponent.getModel().getUnit());\r\n\t\t\tBoardOutlineShapeFactory.createRoundRect(this.boardComponent.getModel().getUnit());\r\n\t\t\tthis.boardComponent.repaint();\r\n\t\t}\r\n\t\tif(event.data.model.id=='boardoutlinerectid'){\r\n\t\t\tBoardMgr.getInstance().deleteBoardOutlineShapes(this.boardComponent.getModel().getUnit());\r\n\t\t\tBoardOutlineShapeFactory.createRect(this.boardComponent.getModel().getUnit());\r\n\t\t\tthis.boardComponent.repaint();\r\n\t\t}\r\n\t\tif(event.data.model.id=='boardoutlinecircleid'){\r\n\t\t\tBoardMgr.getInstance().deleteBoardOutlineShapes(this.boardComponent.getModel().getUnit());\r\n\t\t\tBoardOutlineShapeFactory.createCircle(this.boardComponent.getModel().getUnit());\r\n\t\t\tthis.boardComponent.repaint();\r\n\t\t}\r\n\t\tif(event.data.model.id=='saveid'){\r\n\t\t\tnew BoardSaveView({model:this.boardComponent.model}).render();\t\t\t\r\n\t\t}\r\n\r\n\t\tif(event.data.model.id=='loadid'){\r\n\t\t\t new BoardLoadView({boardComponent:this.boardComponent}).render();\t\t\t\r\n\t\t}\r\n\t\t//set mode\r\n\t\tif(event.data.model.id=='rectid'){\r\n\t\t    this.boardComponent.setMode(core.ModeEnum.RECT_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='lineid'){\r\n\t\t    this.boardComponent.setMode(core.ModeEnum.LINE_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='solidregionid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.SOLID_REGION);\r\n\t\t}\t\t\r\n\t\tif(event.data.model.id=='trackid'){\r\n\t\t  //Track mode\r\n\t\t   this.boardComponent.setMode(core.ModeEnum.TRACK_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='anchorid'){\r\n\t\t\tevent.data.model.setActive(!event.data.model.isActive());  \r\n\t\t\tthis.boardComponent.setParameter(\"snaptogrid\",event.data.model.isActive());\r\n\t\t}\t\t\r\n\t\tif(event.data.model.id=='rectid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.RECT_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='ellipseid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.ELLIPSE_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='arcid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.ARC_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='labelid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.LABEL_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='viaid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.VIA_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='holeid'){\r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.HOLE_MODE);\r\n\t\t}\t\t\r\n\t\tif(event.data.model.id=='selectionid'){\r\n\t\t  //Board mode\r\n\t\t   this.boardComponent.setMode(core.ModeEnum.COMPONENT_MODE);\r\n\t\t}\r\n\t\tif(event.data.model.id=='loadfootprintid'){\r\n\t\t\t new FootprintLoadView({enabled:true}).render();\t\t\t\r\n\t\t}\r\n\t\tif(event.data.model.id=='measureid'){ \r\n\t\t\tthis.boardComponent.setMode(core.ModeEnum.MEASUMENT_MODE);\r\n\t\t}\t\t\r\n\t\tif(event.data.model.id=='originid'){\t\t\t \r\n\t\t\tevent.data.model.setActive(!event.data.model.isActive());\r\n\t\t\tif(event.data.model.isActive()){\r\n\t\t\t  this.boardComponent.getModel().getUnit().coordinateSystem=new shape.CoordinateSystem(this.boardComponent.getModel().getUnit());\r\n\t\t\t  this.boardComponent.setMode(core.ModeEnum.ORIGIN_SHIFT_MODE);\r\n\t\t\t}else{\r\n\t\t\t  this.boardComponent.getModel().getUnit().coordinateSystem=null;\r\n\t\t\t  this.boardComponent.setMode(core.ModeEnum.COMPONENT_MODE);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(event.data.model.id=='copperareaid'){\r\n\t\t    this.boardComponent.setMode(core.ModeEnum.COPPERAREA_MODE);\r\n\t\t}\r\n\t\tif((event.data.model.id=='rotateleftid')||(event.data.model.id=='rotaterightid')){\r\n            shapes= this.boardComponent.getModel().getUnit().shapes;\r\n            if(shapes.length==0){\r\n               return; \r\n            }  \r\n\t\t\tvar r=this.boardComponent.getModel().getUnit().getShapesRect(shapes);\r\n               \r\n            UnitMgr.getInstance().rotateBlock(shapes,{origin:new d2.Point(r.center.x,r.center.y),angle:(event.data.model.id==(\"rotateleftid\")?1:-1)*(90.0)});\r\n            UnitMgr.getInstance().alignBlock(this.boardComponent.getModel().getUnit().grid,shapes);  \r\n            \r\n            this.boardComponent.repaint();\r\n\t\t}\r\n\t\tif(event.data.model.id=='zoominid'){\r\n\t\t\tthis.boardComponent.zoomOut(parseInt(this.boardComponent.width/2),parseInt(this.boardComponent.height/2));\r\n\t\t}\r\n\t\tif(event.data.model.id=='zoomoutid'){\r\n\t\t\tthis.boardComponent.zoomIn(parseInt(this.boardComponent.width/2),parseInt(this.boardComponent.height/2));\r\n\t\t}\t\r\n\t\tif(event.data.model.id=='grabid'){\r\n\t\t\t this.boardComponent.setMode(core.ModeEnum.DRAGHEAND_MODE);\r\n\t\t}\t\r\n\t\tif(event.data.model.id=='tocenterid'){\r\n\t\t\tthis.boardComponent.getModel().getUnit().getScalableTransformation().setScaleFactor(this.boardComponent.getModel().getUnit().getScalableTransformation().maxScaleFactor);\r\n            this.boardComponent.setViewportPosition((this.boardComponent.getModel().getUnit().width/2),\r\n            \t\t(this.boardComponent.getModel().getUnit().height/2));\r\n\t\t\tthis.boardComponent.repaint();\r\n\t\t}\t\r\n\t\tif(event.data.model.id=='layerid'){\r\n\t\t\tnew LayersPanelView(this.boardComponent);\t\t\r\n\t\t}\t\t\r\n\t},\r\n\tonfootprintload:function(selectedModel){\r\n\t\t  let scaledEvent=this.boardComponent.getScaledEvent(selectedModel.event);\r\n\t\t//****load it    \t\r\n\t\t  this.boardComponent.setMode(core.ModeEnum.FOOTPRINT_MODE);\t\t  \r\n\t\t  var pcbfootprint=BoardMgr.getInstance().createPCBFootprint(selectedModel.getUnit());\r\n\t\t  \r\n          //            //***set chip cursor\r\n          pcbfootprint.move(-1 * pcbfootprint.getBoundingShape().center.x,\r\n                         -1 * pcbfootprint.getBoundingShape().center.y);\r\n          \r\n          //pcbfootprint.Move(scaledEvent.x,\r\n          //        scaledEvent.y);\r\n          \r\n\t\t  this.boardComponent.setContainerCursor(pcbfootprint);\r\n          this.boardComponent.getEventMgr().setEventHandle(\"cursor\", pcbfootprint);\r\n          \r\n          this.boardComponent.mouseMove(selectedModel.event);\r\n          //this.boardComponent.Repaint();\r\n\t},\r\n\tonboardload:function(selectedModel){\r\n\t\t  this.boardComponent.clear();\r\n\t\t  this.boardComponent.setMode(core.ModeEnum.COMPONENT_MODE);\r\n\t\t  \r\n\t\t  for(let unit of selectedModel.getUnits()){\r\n\t\t\t  core.isEventEnabled=false;\r\n\t\t\t  var copy=unit.clone();\t\r\n\t          copy.scalableTransformation.reset(0.5,10,3,13);\r\n\t\t\t  core.isEventEnabled=true;\r\n\t\t\t  this.boardComponent.getModel().add(copy);  \t                   \r\n\t\t\t  copy.notifyListeners(events.Event.ADD_SHAPE);\r\n\t\t  };\r\n\t\t  \r\n\t\t  this.boardComponent.getModel().setActiveUnit(0);\r\n\t\t  this.boardComponent.getModel().formatedFileName=selectedModel.formatedFileName;\r\n\t\t  this.boardComponent.getModel().libraryname=selectedModel.libraryname;\r\n\t\t  this.boardComponent.getModel().categoryname=selectedModel.categoryname;\r\n\t\t  \r\n\t\t  this.boardComponent.componentResized();\r\n\r\n\t        //position on center\r\n          var rect=this.boardComponent.getModel().getUnit().getBoundingRect();\r\n          this.boardComponent.setViewportPosition(rect.center.x,rect.center.y);\r\n          this.boardComponent.fireContainerEvent({target:null,type: events.Event.RENAME_CONTAINER});\r\n          this.boardComponent.getModel().fireUnitEvent({target:this.boardComponent.getModel().getUnit(),type: events.Event.SELECT_UNIT});\r\n\t\t  this.boardComponent.repaint();\r\n\t\t  //set button group\r\n\t\t  this.boardComponent.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\r\n\r\n\t\t  //position all to circuit center\r\n\t\t  for(let unit of this.boardComponent.getModel().getUnits()){\t\t\t   \r\n\t            let r=unit.getBoundingRect();\r\n\t            var x=unit.getScalableTransformation().getScale()*r.x-(this.boardComponent.viewportWindow.width-unit.getScalableTransformation().getScale()*r.width)/2;\r\n\t            var y=unit.getScalableTransformation().getScale()*r.y-(this.boardComponent.viewportWindow.height-unit.getScalableTransformation().getScale()*r.height)/2;;\r\n\t            unit.setViewportPositionValue(x,y);              \t\t\t  \r\n\t\t  }\t\r\n\t\t  \r\n\t},\r\n    setButtonGroup:function(requestedMode) {\r\n         if (requestedMode == core.ModeEnum.COMPONENT_MODE) {\r\n        \t //find selection button and pressed\r\n        \t var model=this.collection.get('selectionid');\r\n        \t this.togglegroup(model.attributes.group);\r\n     \t     model.attributes.active=true;\r\n    \t\t this.update();\r\n         }\r\n         if(requestedMode==core.ModeEnum.LINE_MODE){\r\n        \t var model=this.collection.get('lineid');\r\n        \t this.togglegroup(model.attributes.group);\r\n     \t     model.attributes.active=true;\r\n    \t\t this.update();          \r\n         }\r\n         if(requestedMode==core.ModeEnum.TRACK_MODE){\r\n        \t var model=this.collection.get('trackid');\r\n        \t this.togglegroup(model.attributes.group);\r\n     \t     model.attributes.active=true;\r\n    \t\t this.update();          \r\n         }\r\n         \r\n\r\n}\r\n});\r\n\r\nmodule.exports =ToggleButtonView\r\n","var d2=require('d2/d2');\r\n\r\nvar mywebpcb = mywebpcb || {};\r\n\r\nvar SELECT_RECT_WIDTH = 3000; \r\n \r\nvar  UUID=(function(){\r\n\t var count=0;\r\n\t return function(){\r\n\t\t return ++count;\r\n\t }\r\n})();\r\n\r\nGridRaster=[{id:2.54,value:2.54},{id:1.27,value:1.27},{id:0.635,value:0.635},{id:0.508,value:0.508},{id:0.254,value:0.254},{id:0.127,value:0.127},{id:0.0635,value:0.0635},{id:0.0508,value:0.0508},{id:0.0254,value:0.0254},{id:0.0127,value:0.0127},{id:5.0,value:5.0},{id:2.5,value:2.5},{id:1.0,value:1.0},{id:0.5,value:0.5},{id:0.25,value:0.25},{id:0.8,value:0.8},{id:0.2,value:0.2},{id:0.1,value:0.1},{id:0.05,value:0.05},{id:0.025,value:0.025},{id:0.01,value:0.01}];\r\nResumeState={\r\n\t\t ADD_AT_FRONT:0,\r\n\t\t ADD_AT_END:1\t\t\r\n};\r\nArcType={\r\n\t\t TWO_POINT_ARC:0,\r\n\t\t CENTER_POINT_ARC:1\t\t\r\n};\r\nFill = {\r\n\t\tEMPTY : 1,\r\n\t\tFILLED : 2,\r\n\t\tGRADIENT : 3,\r\n\t\ttoString : {\r\n\t\t\t1 : {\r\n\t\t\t\tname : \"EMPTY\"\r\n\t\t\t},\r\n\t\t\t2 : {\r\n\t\t\t\tname : \"FILLED\"\r\n\t\t\t},\r\n\t\t\t3 : {\r\n\t\t\t\tname : \"GRADIENT\"\r\n\t\t\t}\r\n\t\t},\r\n};\r\n\r\nvar Units=(function(){\r\n\treturn {\r\n        MM:0,\r\n        INCH:1,\r\n        PIXEL:2\t\t\r\n\t}\r\n})();\r\n\r\nSymbolType={\r\n\t\tSYMBOL:0,\r\n\t\tGROUND:1,\r\n\t\tPOWER:2,\r\n\t\tvalueOf:function(v){\r\n\t\t   switch(v){\r\n\t\t   case 0:return \"SYMBOL\";\r\n\t\t   case 1:return \"GROUND\";\r\n\t\t   case 2:return \"POWER\";\r\n\t\t   }\t\r\n\t\t},\r\n\t\tparse:function(v){\r\n\t\t\tswitch(v){\r\n\t\t\t   case \"SYMBOL\": return 0;\r\n\t\t\t   case \"GROUND\":return 1;\r\n\t\t\t   case \"POWER\":return 2;\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t };\r\nvar ModeEnum=(function(){\r\n\treturn{\r\n\t\t   COMPONENT_MODE:0,\t\t   \r\n\t\t   PAD_MODE : 1,\r\n\t\t   RECT_MODE : 2,\r\n\t\t   LINE_MODE : 3,\r\n\t\t   ELLIPSE_MODE : 4,\r\n\t\t   ARC_MODE : 5,\r\n\t\t   LABEL_MODE : 6,\r\n\t\t   DRAGHEAND_MODE:7,\r\n\t\t   ORIGIN_SHIFT_MODE:8,\r\n\t\t   FOOTPRINT_MODE:9,\r\n\t\t   TRACK_MODE:10,\r\n\t\t   MEASUMENT_MODE : 12,\r\n\t\t   COPPERAREA_MODE:13,\r\n\t\t   VIA_MODE:14,\r\n\t\t   HOLE_MODE:15,\r\n\t\t   SOLID_REGION_MODE:16,\r\n\t\t   PIN_MODE:17,\r\n\t\t   ARROW_MODE:18,\r\n\t\t   TRIANGLE_MODE:19,\r\n\t\t   SYMBOL_MODE:20,\r\n\t\t   JUNCTION_MODE:21,\r\n\t\t   WIRE_MODE:22,\r\n\t\t   BUS_MODE:23,\r\n\t\t   BUSPIN_MODE:24,\r\n\t\t   NOCONNECTOR_MODE:25,\r\n\t\t   NETLABEL_MODE:26,\r\n\t}\r\n})();\r\n\r\nvar BOARD_LAYERS=[{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'},{id:'BSilkS',value:'BSilkS'},{id:'FSilkS',value:'FSilkS'},{id:'All',value:'All'},{id:'None',value:'None'}];\r\nvar PCB_SYMBOL_LAYERS=[{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'},{id:'BSilkS',value:'BSilkS'},{id:'FSilkS',value:'FSilkS'}];\r\nvar PCB_SYMBOL_OUTLINE_LAYERS=[{id:'FCu',value:'FCu',selected:true},{id:'BCu',value:'BCu'},{id:'BSilkS',value:'BSilkS'},{id:'FSilkS',value:'FSilkS'},{id:'BOutln',value:'BOutln'}];\r\n\r\nvar Layer=(function(){\r\n\treturn{\r\n\t    /* Layer identification (layer number) */\r\n\t       FIRST_COPPER_LAYER  :    0,\r\n\t       LAYER_N_BACK         :   0,\r\n\t       LAYER_N_2              : 1,\r\n\t       LAYER_N_3             :  2,\r\n\t       LAYER_N_4             :  3,\r\n\t       LAYER_N_5             :  4,\r\n\t       LAYER_N_6             :  5,\r\n\t       LAYER_N_7             :  6,\r\n\t       LAYER_N_8             :  7,\r\n\t       LAYER_N_9              : 8,\r\n\t       LAYER_N_10             : 9,\r\n\t       LAYER_N_11             : 10,\r\n\t       LAYER_N_12            :  11,\r\n\t       LAYER_N_13             : 12,\r\n\t       LAYER_N_14             : 13,\r\n\t       LAYER_N_15             : 14,\r\n\t       LAYER_N_FRONT          : 15,\r\n\t       LAST_COPPER_LAYER      : 15,\r\n\t       NB_COPPER_LAYERS       : (15 + 1),\r\n\r\n\t      FIRST_NO_COPPER_LAYER  : 16,\r\n\t      ADHESIVE_N_BACK        :16,\r\n\t      ADHESIVE_N_FRONT       : 17,\r\n\t      SOLDERPASTE_N_BACK      :18,\r\n\t      SOLDERPASTE_N_FRONT     :19,\r\n\t      SILKSCREEN_N_BACK       :20,\r\n\t      SILKSCREEN_N_FRONT      :21,\r\n\t      SOLDERMASK_N_BACK       :22,\r\n\t      SOLDERMASK_N_FRONT      :23,\r\n\t      DRAW_N                  :24,\r\n\t      COMMENT_N               :25,\r\n\t      ECO1_N                  :26,\r\n\t      ECO2_N                  :27,\r\n\t      EDGE_N                  :28,\r\n\t      LAST_NO_COPPER_LAYER    :28,\r\n\t      UNUSED_LAYER_29         :29,\r\n\t      UNUSED_LAYER_30         :30,\r\n\t      UNUSED_LAYER_31         :31,\r\n\t      NB_LAYERS               :(28 + 1),\r\n\r\n\t      LAYER_COUNT             :32,\r\n\r\n\t    // Masks to identify a layer by a bit map\r\n\t      LAYER_BACK        :      (1 << 0),     ///< bit mask for copper layer\r\n\t      LAYER_2            :     (1 << 1),        ///< bit mask for layer 2\r\n\t      LAYER_3            :     (1 << 2),        ///< bit mask for layer 3\r\n\t      LAYER_4            :     (1 << 3),        ///< bit mask for layer 4\r\n\t      LAYER_5             :    (1 << 4),        ///< bit mask for layer 5\r\n\t      LAYER_6             :    (1 << 5),        ///< bit mask for layer 6\r\n\t      LAYER_7             :    (1 << 6),        ///< bit mask for layer 7\r\n\t      LAYER_8             :    (1 << 7),        ///< bit mask for layer 8\r\n\t      LAYER_9             :    (1 << 8),        ///< bit mask for layer 9\r\n\t      LAYER_10             :   (1 << 9),       ///< bit mask for layer 10\r\n\t      LAYER_11            :   (1 << 10),       ///< bit mask for layer 11\r\n\t      LAYER_12            :    (1 << 11),       ///< bit mask for layer 12\r\n\t      LAYER_13            :    (1 << 12),       ///< bit mask for layer 13\r\n\t      LAYER_14            :    (1 << 13),      ///< bit mask for layer 14\r\n\t      LAYER_15            :    (1 << 14),      ///< bit mask for layer 15\r\n\t      LAYER_FRONT          :   (1 << 15),    ///< bit mask for component layer\r\n\t      ADHESIVE_LAYER_BACK    : (1 << 16),\r\n\t      ADHESIVE_LAYER_FRONT   : (1 << 17),\r\n\r\n\t\t  SILKSCREEN_LAYER_BACK :  (1 << 20),\r\n\t      SILKSCREEN_LAYER_FRONT : (1 << 21),\r\n\t\t  SOLDERMASK_LAYER_BACK  : (1 << 22),\r\n\t      SOLDERMASK_LAYER_FRONT : (1 << 23),\r\n\t      DRAW_LAYER             : (1 << 25),\r\n\t      COMMENT_LAYER          : (1 << 26),\r\n\t      ECO1_LAYER             : (1 << 27),\r\n\t      ECO2_LAYER             : (1 << 28),\r\n\t      BOARD_OUTLINE_LAYER    : (1 << 29),\r\n\t      \r\n\t      LAYER_ALL :0xFFFFFFFF,\r\n\t          \r\n\t      BOARD_COLOR_FRONT:'rgb(56,0,0)',\r\n\t      BOARD_COLOR_BACK:'rgb(0,0,56)',\r\n\t      BOARD_COLOR_ALL:'black',\r\n\t    Side:{\r\n\t\t   TOP:1,\r\n           BOTTOM:2,\r\n           change:function(layermaskId){\r\n        \t   \r\n               if ( layermaskId== Layer.LAYER_FRONT) {\r\n                   return Layer.Copper.BCu;\r\n               } else if (layermaskId == Layer.SILKSCREEN_LAYER_FRONT) {\r\n                   return Layer.Copper.BSilkS;\r\n               } else if (layermaskId == Layer.SOLDERMASK_LAYER_FRONT) {\r\n                   return Layer.Copper.BMask;\r\n               } else if (layermaskId == Layer.LAYER_BACK) {\r\n                   return Layer.Copper.FCu;\r\n               } else if (layermaskId == Layer.SILKSCREEN_LAYER_BACK) {\r\n                   return Layer.Copper.FSilkS;\r\n               } else if (layermaskId == Layer.SOLDERMASK_LAYER_BACK) {\r\n                   return Layer.Copper.FMask;\r\n               }\r\n\r\n               return Layer.Copper.All;        \t   \r\n           },\r\n\t\t   resolve:function(layermaskId) {\r\n            if (layermaskId == Layer.LAYER_BACK) {\r\n                return Layer.Side.BOTTOM;\r\n            } else if (layermaskId == Layer.SILKSCREEN_LAYER_BACK) {\r\n                return Layer.Side.BOTTOM;\r\n            } else if (layermaskId == Layer.SOLDERMASK_LAYER_BACK) {\r\n                return Layer.Side.BOTTOM;            \r\n\t\t\t}\r\n            return Layer.Side.TOP;\r\n           }\r\n\t\t},\t\t\t\r\n\t\tCopper:{\r\n\t\t\tFCu:{\r\n\t\t          toString:function(){\r\n\t\t              return \"F.Cu\";\r\n\t\t          },\r\n\t\t          getName:function(){\r\n\t\t              return \"FCu\";\r\n\t\t          },\r\n\t\t          getLayerMaskID:function(){\r\n\t\t              return Layer.LAYER_FRONT;\r\n\t\t          },\r\n\t\t          getColor:function(){\r\n\t\t              return 'red';\r\n\t\t          },\r\n//\t\t          getBoardColor:function(){\r\n//\t\t              return Layer.BOARD_COLOR_FRONT;\r\n//\t\t          }\t\t\t\t\r\n\t\t\t},\r\n\t\t\tBCu:{\r\n\t            toString:function(){\r\n\t                return \"B.Cu\";\r\n\t            },\r\n\t            getName:function(){\r\n\t                return \"BCu\";\r\n\t            },\r\n\t            getLayerMaskID:function(){\r\n\t                return Layer.LAYER_BACK;\r\n\t            },\r\n\t            getColor:function(){\r\n\t                return 'green';\r\n\t            },\r\n//\t            getBoardColor:function(){\r\n//\t                  return Layer.BOARD_COLOR_BACK;\r\n//\t            },\t\t\t\t\r\n\t\t\t},\r\n\t\t\tCu:{\r\n\t            toString:function(){\r\n\t                return \"Cu\";\r\n\t            },\r\n\t            getName:function(){\r\n\t                return \"Cu\";\r\n\t            },\r\n\t            getLayerMaskID:function(){\t                \r\n\t                return Layer.LAYER_FRONT | Layer.LAYER_BACK;\r\n\t            },\r\n\t            getColor:function(){\r\n\t            \treturn 'rgb(128,128,0)';\r\n\t            },\r\n//\t            getBoardColor:function(){\r\n//\t                  return Layer.BOARD_COLOR_BACK;\r\n//\t            },\t\t\t\t\r\n\t\t\t},\t\t\t\r\n\t        FSilkS:{\r\n\t\t          toString:function(){\r\n\t\t              return \"F.SilkS\";\r\n\t\t          },\r\n\t\t          getName:function(){\r\n\t\t              return \"FSilkS\";\r\n\t\t          },\r\n\t\t          getLayerMaskID:function(){\r\n\t\t              return Layer.SILKSCREEN_LAYER_FRONT;\r\n\t\t          },\r\n\t\t          getColor:function(){\r\n\t\t              return 'cyan';\r\n\t\t          },\r\n//\t\t          getBoardColor:function(){\r\n//\t\t                return Layer.BOARD_COLOR_FRONT;\r\n//\t\t          }\r\n\t\t        },\r\n\t\t    BSilkS:{\r\n\t\t          toString:function(){\r\n\t\t              return \"B.SilkS\";\r\n\t\t          },\r\n\t\t          getName:function(){\r\n\t\t              return \"BSilkS\";\r\n\t\t          },\r\n\t\t          getLayerMaskID:function(){\r\n\t\t              return Layer.SILKSCREEN_LAYER_BACK;\r\n\t\t          },\r\n\t\t          getColor:function(){\r\n\t\t              return 'magenta';\r\n\t\t          },\r\n//\t\t          getBoardColor:function(){\r\n//\t\t                return Layer.BOARD_COLOR_BACK;\r\n//\t\t          }\r\n\t\t        }, \r\n\t        FMask:{\r\n\t\t          toString:function(){\r\n\t\t              return \"F.Mask\";\r\n\t\t          },\r\n\t\t          getName:function(){\r\n\t\t              return \"FMask\";\r\n\t\t          },\r\n\t\t          getLayerMaskID:function(){\r\n\t\t              return Layer.SOLDERMASK_LAYER_FRONT;\r\n\t\t          },\r\n\t\t          getColor:function(){\r\n\t\t              return 'rgb(144, 12, 63)';\r\n\t\t          },\r\n\t\t        },\r\n\t        BMask:{\r\n\t\t          toString:function(){\r\n\t\t              return \"B.Mask\";\r\n\t\t          },\r\n\t\t          getName:function(){\r\n\t\t              return \"BMask\";\r\n\t\t          },\r\n\t\t          getLayerMaskID:function(){\r\n\t\t              return Layer.SOLDERMASK_LAYER_BACK;\r\n\t\t          },\r\n\t\t          getColor:function(){\r\n\t\t              return 'rgb(144, 12, 63)';\r\n\t\t          },\r\n\t\t        },\r\n\t\t\tBOutln:{\r\n\t\t\t          toString:function(){\r\n\t\t\t              return \"B.Outline\";\r\n\t\t\t          },\r\n\t\t\t          getName:function(){\r\n\t\t\t              return \"BOutln\";\r\n\t\t\t          },\r\n\t\t\t          getLayerMaskID:function(){\r\n\t\t\t              return Layer.BOARD_OUTLINE_LAYER;\r\n\t\t\t          },\r\n\t\t\t          getColor:function(){\r\n\t\t\t              return 'yellow';\r\n\t\t\t          },\r\n//\t\t\t          getBoardColor:function(){\r\n//\t\t\t                return Layer.BOARD_COLOR_BACK;\r\n//\t\t\t          }\r\n\t\t\t        }, \t\t        \r\n\t\t\tAll:{\r\n\t            toString:function(){\r\n\t                return \"All\";\r\n\t            },\r\n\t            getName:function(){\r\n\t                return \"All\";\r\n\t            },\r\n\t            getLayerMaskID:function(){\r\n\t                return Layer.LAYER_ALL;\r\n\t            },\t            \r\n\t            getColor:function(){\r\n\t                return 'rgb(128,128,0)';\r\n\t            },\r\n//\t            getBoardColor:function(){\r\n//\t                  return 'black';\r\n//\t            }\r\n\t\t\t},\r\n\t\t\tNone:{\r\n\t            toString:function(){\r\n\t                return \"None\";\r\n\t            },\r\n\t            getName:function(){\r\n\t                return \"None\";\r\n\t            },\r\n\t            getLayerMaskID:function(){\r\n\t                return 0;\r\n\t            },\r\n\t            getColor:function(){\r\n\t                return 'gray';\r\n\t            },\r\n//\t            getBoardColor:function(){\r\n//\t                  return 'black';\r\n//\t            }\t\t\t\t\r\n\t\t\t},\r\n\t        resolve:function(layermask){\r\n\t            if(layermask==Layer.LAYER_FRONT){\r\n\t                return Layer.Copper.FCu;\r\n\t            }\r\n\t            if(layermask==Layer.SILKSCREEN_LAYER_FRONT){\r\n\t                return Layer.Copper.FSilkS;\r\n\t            }\r\n\t            if(layermask==Layer.LAYER_BACK){\r\n\t                return Layer.Copper.BCu;\r\n\t            }\r\n\t            if(layermask==Layer.SILKSCREEN_LAYER_BACK){\r\n\t                return Layer.Copper.BSilkS;\r\n\t            }\r\n\t            if(layermask==Layer.BOARD_OUTLINE_LAYER){\r\n\t                return Layer.Copper.BOutln;\r\n\t            }\r\n\t            if(layermask==(Layer.LAYER_BACK|Layer.LAYER_FRONT)){\r\n\t                return Layer.Copper.Cu;\r\n\t            } \r\n\t\t\t\tif(layermask==Layer.SOLDERMASK_LAYER_BACK){\r\n\t\t\t\t    return \tLayer.Copper.BMask;\r\n\t\t\t\t}\r\n\t\t\t\tif(layermask==Layer.SOLDERMASK_LAYER_FRONT){\r\n\t\t\t\t    return \tLayer.Copper.FMask;\r\n\t\t\t\t}\t\t\t\t\r\n\t            if (layermask == Layer.LAYER_ALL) {\r\n\t                return Layer.Copper.All;\r\n\t            }else{\r\n\t                return Layer.Copper.None;\r\n\t            }\t            \t            \r\n\t        },\r\n\t\t\tvalueOf:function(copper){\r\n\t\t\t\tswitch(copper){\r\n\t\t\t\tcase 'FCu': return this.FCu;\r\n\t\t\t\tcase 'BCu': return this.BCu;\r\n\t\t\t\tcase 'Cu': return this.Cu;\r\n\t\t\t\tcase 'FSilkS':return this.FSilkS;\r\n\t\t\t\tcase 'BSilkS':return this.BSilkS;\r\n\t\t\t\tcase 'FMask':return this.FMask;\r\n\t\t\t\tcase 'BMask':return this.BMask;\t\t\t\t\r\n\t\t\t\tcase 'BOutln':return this.BOutln;\r\n\t\t\t\tcase 'All': return this.All;\r\n\t\t\t\tcase 'None': return this.None;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow  'Unknown copper text : '+copper;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n})();\r\n\r\nvar isEventEnabled=true;\r\n\r\nclass CompositeLayer{\r\n  constructor() {\r\n\t     this.compositelayer=Layer.LAYER_ALL;\r\n\t     this.activeSide=Layer.Side.TOP;\r\n  }\r\nisLayerVisible(mask) {\r\n\t     return (this.compositelayer & mask)!=0;          \r\n  } \r\ngetLayerMaskID() {\r\n    return this.compositelayer;\r\n}\r\nsetLayerVisible(mask,flag) {\r\n    if(flag){\r\n        this.compositelayer |= mask;     \r\n    }else{\r\n        this.compositelayer &= ~mask;\r\n    }\r\n}\r\n\t  \r\n}\r\n/*\r\nvar AffineTransform=(function(){\r\n\tvar x,y,a;\r\n\treturn{\r\n\t\tcreateRotateInstance:function(originx,originy,angle){\r\n\t\t\tx=originx;\r\n\t\t\ty=originy;\r\n\t\t\ta=angle;\r\n\t\t\treturn {\r\n\t\t\t\torigin:new d2.Point(originx,originy),\t\t\t\t\r\n\t\t\t\tangle:a,\r\n\t\t\t\ttoString:function(){\r\n\t\t\t\t  return \"x=\"+x+\",y=\"+y+\"angle=\"+a;\t\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t}; \r\n})();\r\n*/\r\nclass ScalableTransformation{\r\n  constructor(scaleFactor,minScaleFactor,maxScaleFactor) {\t    \r\n        this.reset(0.5,scaleFactor,minScaleFactor,maxScaleFactor);\r\n  }\r\n  getScaleRatio(){\r\n     return this.scaleRatio;  \r\n   }\r\n   \r\n  getInverseScaleRatio(){\r\n\treturn 1/this.scaleRatio;\r\n  }\r\n  getScaleFactor(){\r\n     return this.scaleFactor;  \r\n  }\r\n  setScaleFactor(scaleFactor){\r\n\tthis.scaleFactor=scaleFactor;\r\n    this.scale=this.calculateTransformation(); \r\n  } \r\n  reset(scaleRatio,scaleFactor,minScaleFactor,maxScaleFactor){\r\n        this.scaleFactor=scaleFactor;\r\n        this.maxScaleFactor=maxScaleFactor;\r\n        this.minScaleFactor=minScaleFactor;\r\n        this.scaleRatio=scaleRatio;\r\n        this.scale=this.calculateTransformation();\r\n  }\r\n  getScale(){\r\n     return this.scale;\r\n  }\r\n  scaleOut(){\r\n        this.scaleFactor --;\r\n        if (this.scaleFactor == this.minScaleFactor-1) {\r\n                this.scaleFactor = this.minScaleFactor;\r\n                return false;\r\n        }\r\n        \r\n        this.scale=this.calculateTransformation();\r\n        return true;\r\n  }\r\n  scaleIn(){\r\n            this.scaleFactor++ ;\r\n            if (this.scaleFactor == this.maxScaleFactor) {\r\n                this.scaleFactor = this.maxScaleFactor-1;\r\n                return false;\r\n            }            \r\n            this.scale=this.calculateTransformation();\r\n            return true;    \r\n  }\r\n  getInversePoint(x,y){\r\n       let s=1.0;\r\n       if(this.scaleFactor!=0){     \r\n           for(let i=0;i<this.scaleFactor;i++){\r\n             s*=this.getInverseScaleRatio();\r\n           }\r\n       }\r\n\t  return new d2.Point(x*s,y*s);\r\n}\r\n  getInverseRect(r){\r\n       let s=1.0;\r\n       if(this.scaleFactor!=0){     \r\n           for(let i=0;i<this.scaleFactor;i++){\r\n             s*=this.getInverseScaleRatio();\r\n           }\r\n       }\r\n\t  return d2.Box.fromRect(r.x*s,r.y*s,r.width*s,r.height*s);\r\n  }  \r\n  calculateTransformation(){\r\n       let x=1.0;\r\n       if(this.scaleFactor!=0){     \r\n           for(let i=0;i<this.scaleFactor;i++){\r\n             x*=this.scaleRatio;\r\n           }\r\n       }\r\n       return x;\r\n  }\r\n}\r\n\r\nclass ViewportWindow{\r\n\t constructor(x,y,width,height){\r\n\t   this.x=x;\r\n\t   this.y=y;\r\n\t   this.width=width;\r\n\t   this.height=height;\r\n\t }\r\n\t getX(){\r\n\t   return this.x;\r\n\t }\r\n\t getY(){\r\n\t   return this.y;\r\n\t }\r\n\t getWidth(){\r\n\t   return this.width;\r\n\t }\r\n\t getHeight(){\r\n\t   return this.height;\r\n\t }\r\n\t setSize(width,height){\r\n\t     this.width=width;\r\n\t     this.height=height;\t \r\n\t }\r\n\t scaleIn( xx, yy,scale){ \r\n\t    let a=(this.x+xx)*scale.getScaleRatio();\r\n\t\tlet b=(this.y+yy)*scale.getScaleRatio();\r\n\t    this.x=a-xx;\r\n\t    this.y=b-yy;\r\n\t }\r\n\t scaleOut( xx, yy,scale){ \t    \r\n        let a=(this.x+xx)*scale.getInverseScaleRatio();\r\n        let b=(this.y+yy)*scale.getInverseScaleRatio();\r\n        this.x=a-xx;\r\n        this.y=b-yy;\r\n\t }\r\n\t toString(){\r\n\t   return \"{\"+this.x+\",\"+this.y+\",\"+this.width+\",\"+this.height+\"}\";\r\n\t }\r\n}\r\n\r\n    //must be 10000 for printing\r\nvar MM_TO_COORD=function(mm){\r\n      //return Math.floor(mm*10000);\r\n     return (mm*10000);\r\n}\r\n \r\nvar COORD_TO_MM=function(coord){ \r\n\treturn (coord/10000);    \r\n}\r\n   \r\nclass Grid{\r\n constructor(value,units) {\r\n   this.gridPointToPoint=0;\r\n   this.pixelToPixelLimit=10;\r\n   this.paintable=true;\r\n   this.pointsColor='white';\r\n   this.setGridUnits(value,units);\r\n }\r\n clone(){\r\n\tvar copy=new Grid(this.value,this.units);\r\n\tcopy.pointsColor=this.pointsColor;\r\n\treturn copy;\r\n }\r\ngetGridPointToPoint(){\r\n     return this.gridPointToPoint;\r\n}\r\ngetGridUnits(){\r\n    return this.units;\r\n}\r\nsetGridUnits(value,units){\r\n     this.value=value;\r\n     this.units=units;\r\n     switch(units){\r\n     case Units.MM:\r\n         this.gridPointToPoint=MM_TO_COORD(value);\r\n         break;\r\n     case Units.INCH:\r\n         throw  \"BG is in EU -> stick to mm for now.\";\r\n     case Units.PIXEL:\r\n         this.gridPointToPoint=value;        \r\n     }          \r\n}\r\nsetGridValue(value){\r\n     this.setGridUnits(value,this.units);\r\n}\r\ngetGridValue(){\r\n    return this.value; \r\n} \r\nUNIT_TO_COORD(mm){\r\n    switch(this.units){ \r\n      case Units.MM:\r\n          return MM_TO_COORD(mm);\r\n      case Units.INCH:\r\n          throw  \"BG is in EU -> stick to mm for now.\";\r\n      case Units.PIXEL:\r\n          return mm;\r\n    default:\r\n        throw \"Unknown/unsupported units.\";\r\n    }            \r\n}\r\nCOORD_TO_UNIT(coord){\r\n    switch(this.units){ \r\n      case Units.MM:\r\n          return COORD_TO_MM(coord);\r\n      case Units.INCH:\r\n          throw  \"BG is in EU -> stick to mm for now.\";\r\n      case Units.PIXEL:\r\n          return coord;\r\n    default:\r\n        throw  \"Unknown/unsupported units.\";\r\n    }            \r\n  }\r\npaint(g2,viewportWindow,scalableTransformation){\r\n\tif(this.paintable){\r\n\t this.drawPoints(g2, viewportWindow, scalableTransformation);\r\n    }\r\n }\r\n drawPoints(g2, viewportWindow, scalableTransformation){\r\n   var w = 0, h = 0;\r\n \r\n        //scale out the visible static rectangle to the real schema size to see which point fall in to be rendered.\r\n        //scale back to origine\r\n    let r=d2.Box.fromRect(parseInt(viewportWindow.x/scalableTransformation.getScale()),parseInt(viewportWindow.y/scalableTransformation.getScale()),parseInt(viewportWindow.getWidth()/scalableTransformation.getScale()),parseInt(viewportWindow.getHeight()/scalableTransformation.getScale()));\r\n\r\n    \r\n    let position=this.positionOnGrid(r.x,r.y);\r\n\t\r\n\tif(!this.isGridDrawable(position,scalableTransformation)){        \t\t  \r\n\t\treturn;\r\n    }\r\n\t\t\r\n\tlet point=new d2.Point();  \r\n\tg2.strokeStyle = this.pointsColor;\t\t\t\t \r\n    g2.lineWidth = 1;\r\n     \r\n\tfor (let h =position.y; h <= position.y+r.height; h += this.gridPointToPoint) {\r\n            for (w =position.x; w <=position.x+r.width; w += this.gridPointToPoint) {\r\n                 point.set(w, h); \r\n                 //let scaledPoint=point.clone();\r\n                 point.scale(scalableTransformation.scale);\r\n                \t \r\n                 point.set(point.x-viewportWindow.x,point.y-viewportWindow.y);\r\n                 //***no need to draw outside of visible rectangle\r\n                 //if(point.x>viewportWindow.getWidth()||point.y>viewportWindow.getHeight()){                   \r\n                 //  continue;  \r\n                 //}   \r\n                \r\n\t\t\t\t \r\n             \tg2.beginPath();\r\n            \tg2.arc(point.x,point.y,0.1, 0, 2 * Math.PI, false);\r\n\t\t\t    g2.stroke();\r\n\t\t\t\t \r\n            }\r\n\t}\r\n   \r\n }\r\nisGridDrawable(point,scalableTransformation){\r\n        let x=point.x*scalableTransformation.scale;    \r\n\t    let xx=(point.x+this.gridPointToPoint)*scalableTransformation.scale;\r\n\t    return  (parseInt(Math.round(xx-x)))>this.pixelToPixelLimit;   \r\n    }\r\npositionOnGrid( x,  y) {        \r\n        let ftmp     =  x / this.gridPointToPoint;\r\n        let xx = ( parseInt( Math.round( ftmp )) ) * this.gridPointToPoint;\r\n\r\n        ftmp     = y / this.gridPointToPoint;\r\n        let yy = ( parseInt( Math.round( ftmp )) ) * this.gridPointToPoint;\r\n        return new d2.Point(xx,yy);        \r\n    } \r\nlengthOnGrid(length){\r\n        let  ftmp     =  length / this.gridPointToPoint;\r\n        let xx = ( parseInt(Math.round( ftmp ) )) * this.gridPointToPoint;        \r\n        return xx;\t\r\n}\r\nsnapToGrid(p){        \r\n   p.set(this.lengthOnGrid(p.x), this.lengthOnGrid(p.y));\r\n} \r\n}\r\n \r\nclass UnitFrame{\r\nconstructor(width,height) {\r\n\t      this.rectangle=new d2.Box(0,0,0,0);\r\n\t      this.offset=0;\r\n\t      this.setSize(width,height); \r\n\t      this.color=\"white\";\r\n}\r\nsetSize(width,height) {\r\n    this.width=width;\r\n    this.height=height;\r\n    this.rectangle.setRect(this.offset,this.offset,this.width-(2*this.offset),this.height-(2*this.offset));\r\n }\t  \r\n \r\npaint(g2, viewportWindow, scale) {\r\n\t  var rect=this.rectangle.clone();\t  \r\n\t  rect.scale(scale.scale);\r\n\t  \r\n      if(!rect.intersects(viewportWindow)){\r\n      \t  return;   \r\n      }\r\n      g2.beginPath();\r\n      g2.lineWidth=\"1\";\r\n      g2.strokeStyle = this.color;\r\n      g2.rect(rect.x-viewportWindow.x, rect.y-viewportWindow.y, rect.width, rect.height);      \r\n      g2.stroke(); \r\n}\r\nsetOffset(offset) {\r\n    this.offset=offset;\r\n    this.rectangle.setRect(this.offset,this.offset,this.width-(2*this.offset),this.height-(2*this.offset));\r\n }\r\ngetOffset(){\r\n   return this.offset;    \r\n }\t  \r\n}\r\n\r\n//-----------------------Queue--------------------\r\nclass Queue {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    isEmpty() {\r\n        return (this.items.length === 0);\r\n    }\r\n\r\n    enqueue(item) {\r\n        this.items.unshift(item);\r\n    }\r\n\r\n    dequeue() {\r\n        return this.items.pop();\r\n    }\r\n\r\n    size() {\r\n        return this.items.length;\r\n    }\r\n}\r\n//-----------------------UnitSelectionCell---------\r\nvar UnitSelectionCell = function (uuid,x, y,width,height,name) {\r\n\t return {\r\n\t       x: x-20,\r\n\t       y: y-20,\r\n\t       width:width+(2*20),\r\n\t       height:height+(2*20),\r\n\t       name:name,\r\n\t       selected:false,\r\n\t       uuid:uuid\r\n\t };\r\n}\r\n\r\n//------------------------UnitSelectionGrid--------\r\nvar UnitSelectionGrid = Backbone.Model.extend({\r\n\tinitialize: function(){\r\n    this.model=null;\r\n    this.cells=[];\r\n    this.scaleFactor=10;\r\n    this.scaleRatio=0.5;    \r\n    this.minScaleFactor=4;\r\n    this.maxScaleFactor=13;\r\n  },\r\nsetModel:function(model){\r\n\t\tthis.model=model;\r\n\t},\r\ngetModel:function(model){\r\n\t\treturn\tthis.model;\r\n},\r\nrelease:function(){\r\n\tthis.cells=[];\r\n\tif(this.model!=null){\r\n\t   this.model.clear();\r\n\t}   \r\n\tthis.model=null;\r\n},\r\n\r\nbuild:function(){\r\n\t var width=300;\r\n\t for(let unit of this.model.getUnits()){\r\n\t     //hide grid\r\n\t\t unit.getGrid().paintable=false;\r\n\t\t //hide frame\r\n\t\t unit.frame=null;\r\n\t\t //make it smaller\r\n\t\t //unit.scalableTransformation=new ScalableTransformation(this.scaleFactor,4,13);\r\n\t     unit.scalableTransformation.reset(this.scaleRatio,this.scaleFactor,this.minScaleFactor,this.maxScaleFactor);\r\n\t\t var w=Math.round(unit.getBoundingRect().width*unit.scalableTransformation.getScale());\r\n\t\t width=Math.max(width,w);\r\n       \r\n\t  }\r\n\t for(let unit of this.model.getUnits()){     \r\n\t\t var r=unit.getBoundingRect();\r\n\t\t var x=Math.round(r.x*unit.scalableTransformation.getScale());\r\n\t\t var y=Math.round(r.y*unit.scalableTransformation.getScale());\r\n         var height=Math.round(r.height*unit.getScalableTransformation().getScale());\r\n         var cell=UnitSelectionCell(unit.getUUID(),x,y,width,height,unit.unitName);\r\n         cell.selected=( this.model.getUnit()==unit?true:false);\r\n         this.cells.push(cell);        \r\n\t  }\r\n\t \r\n}\r\n\r\n});\r\n\r\n//------------------------UnitSelectionPanel-------\r\nvar UnitSelectionPanel=Backbone.View.extend({\r\n\t//el:\"#unitselectionpanel\",\r\n\tinitialize: function(opt){\t\t\r\n\tthis.setElement('#'+opt.selectorid);\r\n\tthis.unitSelectionGrid=new UnitSelectionGrid();\r\n\tthis.canvasprefixid=opt.canvasprefixid;\r\n    this.enabled=opt.enabled;\r\n    this.textColor='white';\r\n    this.backColor='black';\r\n  },\r\n  events: {\r\n\t  'click [type=\"checkbox\"]': 'checkBoxClick',\r\n\t  'click' : 'panelClick',\r\n  },\r\n  panelClick:function(event){\r\n\t  if(event.originalEvent.target.id==\"\"){\r\n\t\t  return;\r\n\t  }\r\n      let uuid=(j$('#'+event.originalEvent.target.id).data('uuid'));\r\n      if(this.enabled){\r\n\t\t  this.unitSelectionGrid.getModel().setActiveUnitUUID(uuid);\t\t  \t\t \r\n\t\t  \r\n\t\t  var group = \"input:checkbox[name='cb']\";\r\n\t\t  j$(group).prop(\"checked\", false);\r\n\t\t  \r\n\t\t  j$('#'+uuid).prop(\"checked\",true);\r\n\t  }\r\n  },\t  \r\n  checkBoxClick:function(event){\r\n\t  \r\n\t  var j$box = j$(event.currentTarget);\r\n\t  if (j$box.is(\":checked\")) {\r\n\t    // the name of the box is retrieved using the .attr() method\r\n\t    // as it is assumed and expected to be immutable\r\n\t    var group = \"input:checkbox[name='\" + j$box.attr(\"name\") + \"']\";\r\n\t    // the checked state of the group/box on the other hand will change\r\n\t    // and the current value is retrieved using .prop() method\r\n\t    j$(group).prop(\"checked\", false);\r\n\t    j$box.prop(\"checked\", true);\r\n\t  } else {\r\n\t    j$box.prop(\"checked\", true);\r\n\t  }\r\n\t  if(this.enabled){\r\n\t\t  this.unitSelectionGrid.getModel().setActiveUnitUUID(parseInt(j$box[0].id));\r\n\t  }\r\n  },\r\n  release:function(){\r\n  \tthis.unitSelectionGrid.release();  \r\n  \tthis.undelegateEvents();\r\n  },\r\n  repaint:function(){\r\n  \tif(this.unitSelectionGrid.model!=null){\r\n  \t\tvar i=0;\r\n\t\tfor(let unit of this.unitSelectionGrid.model.getUnits()){  \t\r\n  \t        var cell=this.unitSelectionGrid.cells[i];\r\n  \t\t\tvar canvas = j$('#'+this.canvasprefixid+(i));\r\n  \t  \t    var ctx = canvas[0].getContext(\"2d\");\r\n  \t        ctx.fillStyle = this.backColor;\r\n  \t        ctx.fillRect(0, 0, cell.width, cell.height);  \r\n  \t        unit.paint(ctx,d2.Box.fromRect(cell.x,cell.y,cell.width,cell.height));\r\n  \t        i++;\r\n  \r\n  \t\t  };\r\n  \t}\r\n  },\r\n  render:function(){\r\n\t\t    \t//create picker\r\n\t\t    var panel=\"\"\r\n\t\t    if(this.unitSelectionGrid.model!=null){\r\n\t\t      for(i=0;i<this.unitSelectionGrid.cells.length;i++){\r\n\t\t    \tvar cell=this.unitSelectionGrid.cells[i];\r\n\t\t    \t\r\n\t\t    \tpanel+=\"<div><canvas id=\\\"\"+this.canvasprefixid+i+\"\\\" width=\\\"\"+cell.width+\"px\\\" height=\\\"\"+cell.height+\"px\\\"  data-uuid=\\\"\"+cell.uuid+\"\\\" >\"+\r\n\t\t        \"</canvas></div>\"+\r\n\t\t        \"<div><input type=checkbox name='cb' id='\"+cell.uuid+\"' style='vertical-align: -2px;margin-left:10px;margin-right:5px;' \"+\r\n\t\t        (cell.selected?\" checked \":(this.enabled?\" \":\" checked \"))+\r\n\t\t        (this.enabled?'':'disabled')+\"><label for='\"+cell.uuid+\"' style='color:\"+this.textColor+\"'>\"+cell.name+\"</label></div>\";\t\t       \r\n\t\t\t   }\r\n\t\t      }\r\n\t\t\t j$(this.el).empty();\r\n\t\t\t j$(this.el).append(\r\n\t\t\t\t\"<div style=\\\"background-color:\"+this.backColor+\"\\\">\"+panel+\r\n\t\t\t\t\"</div>\"\t\t\t\t\r\n\t\t     );\t\r\n\t\t\t this.repaint();\r\n\t\t\t this.delegateEvents();\r\n\t}\r\n});\r\n\r\n\r\nmodule.exports ={\r\n\tmywebpcb,\t\r\n\tUUID,\r\n\tGridRaster,\r\n\tFill,\r\n\tUnits,\r\n\tModeEnum,\r\n\tBOARD_LAYERS,PCB_SYMBOL_LAYERS,PCB_SYMBOL_OUTLINE_LAYERS,\r\n\tLayer,\r\n\tScalableTransformation,\r\n\tViewportWindow,\r\n\tGrid,\t\r\n\tUnitFrame,\r\n\t//AffineTransform,\r\n    MM_TO_COORD,\r\n    COORD_TO_MM,\r\n\tUnitSelectionPanel,\r\n\tCompositeLayer,\r\n\tisEventEnabled,\r\n\tSymbolType,\r\n\tQueue,\r\n\tResumeState,\r\n\tArcType,\r\n}\r\n\r\nvar events=require('core/events');\r\nvar utilities=require('core/utilities');\r\nvar font = require('core/text/d2font');","var core = require('core/core');\r\nvar DefaultLineBendingProcessor=require('core/line/linebendingprocessor').DefaultLineBendingProcessor;\r\nvar d2=require('d2/d2');\r\nvar utilities =require('core/utilities'); \r\nvar MementoType = require('core/undo').MementoType;\r\nEvent={\r\n\t    SELECT_SHAPE:1,\r\n\t    DELETE_SHAPE:2,\r\n\t    RENAME_SHAPE:3,\r\n\t    ADD_SHAPE:4,\r\n\t    PROPERTY_CHANGE:5,\r\n\t    ADD_UNIT:6,\r\n\t    DELETE_UNIT:7,\r\n\t    SELECT_UNIT:8,  \r\n\t    RENAME_UNIT:9,\r\n\t    SELECT_CONTAINER:10,\r\n\t    RENAME_CONTAINER:11,\r\n\t    DELETE_CONTAINER:12\r\n};\r\n\r\nclass EventHandle{\r\n\t constructor(component) {\r\n\t     this.component=component;\r\n\t     this.mx=0;\r\n\t\t this.mx=0;\r\n\t\t this.target=null;\r\n\t }\t\r\n\t attach(){\r\n\t     this.ctrlButtonPress = false;\r\n\t     this.mx=0;\r\n\t     this.my=0;  \t     \r\n\t }\r\n\t dblClick(){\r\n \r\n\t }\r\n\t keyPressed(event){\r\n\t\t //default\r\n\t\t if(this.component.popup.isOpen()){\r\n\t\t\tthis.component.popup.close(); \r\n\t\t\treturn; \r\n\t\t }\r\n\t\t if (this.component.getModel().getUnit() != null) { \r\n\t\t\t if (event.keyCode == 8) { //BACKSPACE\r\n\t\t\t\t this.component.getModel().getUnit().getSelectedShapes().forEach(function(shape) {\r\n\t\t\t\t\t this.component.getModel().getUnit().remove(shape.getUUID());\t\r\n\t\t           }.bind(this));  \r\n\t\t\t\t this.component.repaint();\r\n\t\t\t }\r\n\t\t\t if (this.component.getEventMgr().getTargetEventHandle() != null&&event.keyCode==27) {\t\r\n\t\t\t   this.component.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\r\n\t\t       this.component.setMode(core.ModeEnum.COMPONENT_MODE);       \r\n\t\t     } \r\n\t\t }\t\t \r\n\t }\r\n\t setTarget(target){\r\n       this.target=target;\r\n\t }\r\n\t clear(){\r\n\t\t \r\n\t }\r\n\t detach(){\r\n\t   this.clear();\r\n\t }\r\nisRightMouseButton(e){\t \r\n\t  return e.which!=1\r\n}\r\n}\r\n\r\nclass MoveEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t }\r\n\t mousePressed(event){\t\r\n\t    this.component.getModel().getUnit().setSelected(false);\r\n\t    this.target.setSelected(true);\r\n\t\tthis.component.repaint();\r\n\t\tif(super.isRightMouseButton(event)){\r\n            if (this.target[\"getLinePoints\"]!=undefined){\r\n            \tthis.component.popup.registerLineSelectPopup(this.target,event);\r\n            }else if(this.target[\"getPinsRect\"]!=undefined){\r\n            \tthis.component.popup.registerPadPopup(this.target,event);\r\n            }\r\n            else{\t\r\n                this.component.popup.registerShapePopup(this.target,event);\r\n                \r\n            }\r\n            return;\r\n        }\r\n\t    \r\n\t    this.mx=event.x;\r\n\t\tthis.my=event.y;\r\n\t\t\t\t\r\n\t\tthis.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));    \r\n\t }\r\n\t mouseReleased(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t}\r\n\t\tthis.target.alignToGrid(false || this.component.getParameter(\"snaptogrid\"));\r\n        this.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));\t\t\t\t \r\n\t\tthis.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t \r\n\t mouseDragged(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t} \r\n\t \tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t\t\r\n\t    this.target.move(new_mx - this.mx, new_my - this.my);\r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseMove(event){\r\n\t \r\n\t }\t \r\n}\r\n\r\nclass ResizeEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t\t this.targetPoint=null;\r\n\t }\r\n\t mousePressed(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t            if (this.target[\"getLinePoints\"]!=undefined){\r\n\t            \tthis.component.popup.registerLineSelectPopup(this.target,event);            \r\n\t            }            \r\n\t    }\r\n\t     \r\n\t    this.component.getModel().getUnit().setSelected(false);\r\n\t    this.target.setSelected(true);\r\n\t\tthis.mx=event.x;\r\n\t\tthis.my=event.y;\r\n\t        \r\n\t    this.targetPoint=this.target.isControlRectClicked(event.x,event.y);\r\n\t    this.target.setResizingPoint(this.targetPoint);\r\n\t    this.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));\r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    \r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseReleased(event){\r\n\t\t    if(this.component.getParameter(\"snaptogrid\")){\r\n\t         this.target.alignResizingPointToGrid(this.targetPoint);\r\n\t\t     this.component.repaint();\t \r\n\t\t\t}\r\n\t\t\tthis.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));\r\n\t\t\t\r\n\t }\r\n\t mouseDragged(event){\r\n\t \tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t    this.target.Resize(new_mx - this.mx, new_my - this.my,this.targetPoint);\r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseMove(event){\r\n\t \r\n\t }\r\n\t \r\n}\r\nclass DragingEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\nmousePressed(event){\r\n   this.mx = event.windowx;\r\n   this.my = event.windowy;\r\n   \r\n\t\t }\r\nmouseReleased(event){\r\n\r\n\t\t }\r\nmouseDragged(event){\r\n   var newX =this.component.viewportWindow.x- (event.windowx - this.mx);\r\n   var newY =this.component.viewportWindow.y- (event.windowy - this.my);        \r\n    \r\n\r\n   this.component.viewportWindow.x=newX;\r\n   this.component.viewportWindow.y=newY;\r\n   \r\n   //this.component.hbar.jqxScrollBar('setPosition',newX); \r\n   //this.component.vbar.jqxScrollBar('setPosition',newY);\r\n   \r\n   this.mx = event.windowx;\r\n   this.my = event.windowy;\r\n   this.component.repaint();  \r\n\t\t }\r\nmouseMove(event){\r\n\t\t \r\n\t\t }\t \r\n}\r\n\r\nclass UnitEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t\t this.selectionBox=new d2.Box(0,0,0,0);\r\n\t }\r\n\t attach(){\r\n\t\t super.attach();\r\n\t     this.selectionBox.setRect(0,0,0,0);\r\n\t }\r\n\t mousePressed(event){\r\n\t\tthis.component.getModel().getUnit().setSelected(false);\r\n\t\tthis.component.repaint();\r\n\t\t\t\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t\tthis.component.popup.registerUnitPopup(this.target,event);\r\n\t\t\t//this.component.popup.open(event.data.originalEvent.clientX,event.data.originalEvent.clientY);\t\t\r\n\t\t\treturn;\r\n\t\t} \r\n\t\tthis.mx=event.windowx;\r\n\t\tthis.my=event.windowy;\r\n\t }\r\n\t mouseReleased(event){\r\n\t\t if(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t }\r\n\t\t this.selectionBox.move(this.component.viewportWindow.x,this.component.viewportWindow.y);\r\n\t\t this.component.getModel().getUnit().setSelectedInRect(this.component.getModel().getUnit().getScalableTransformation().getInverseRect(this.selectionBox));\r\n\t     this.component.repaint();\r\n\t }\r\n\t mouseDragged(event){\r\n\t\t if(super.isRightMouseButton(event)){\r\n\t\t\t return;\r\n\t\t }\r\n\t \t  let w = event.windowx-this.mx;\r\n\t      let h = event.windowy-this.my;\r\n\t\t\r\n\t\t  let x=this.mx - (w < 0 ? Math.abs(w) : 0);\r\n\t\t  let y=this.my - (h < 0 ? Math.abs(h) : 0);\r\n\t\t\r\n\t      this.selectionBox.setRect(x,y,Math.abs(w),Math.abs(h));\t\r\n\t      this.component.repaint();\r\n\t\t  \r\n\t\t  this.component.ctx.save();\t\t  \r\n\t      this.component.ctx.globalAlpha =0.5; \t\t  \r\n\t\t  this.component.ctx.fillStyle = 'blue';\r\n\t\t  this.component.ctx.fillRect(this.selectionBox.x,this.selectionBox.y,this.selectionBox.width,this.selectionBox.height);\r\n          \t\t  \r\n          \r\n\t      this.component.ctx.lineWidth = 1;\r\n\t      this.component.ctx.strokeStyle = 'blue';\r\n\t      this.component.ctx.stroke();\r\n\t\t  this.component.ctx.restore();\r\n\r\n\t }\r\n\t mouseMove(event){\r\n\r\n\t }\t \r\n}\r\n\r\nclass OriginEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\tsuper(component);\t\t\r\n\t}\r\nattach(){\r\n\t\t super.attach();\r\n\t\t this.component.getModel().getUnit().coordinateSystem.reset(0,0);  \r\n\t }\r\nmousePressed(event){\r\n\t     this.component.getModel().getUnit().getCoordinateSystem().reset(event.x,event.y); \r\n\t     this.mx = event.x;\r\n\t     this.my = event.y; \r\n\t     this.component.getModel().getUnit().setSelected(false);\t     \r\n\t\t this.component.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\r\n\t\t \r\n\t }\r\nmouseReleased(event){\r\n\tif (event.which == 3) {\r\n      //this.component.getModel().getUnit().coordinateSystem=null;   \t\t \t\t\t   \t\r\n\t}else{\r\n\t   this.component.getModel().getUnit().getCoordinateSystem().alignToGrid(false || this.component.getParameter(\"snaptogrid\")); \r\n\t}\r\n\tthis.component.setMode(core.ModeEnum.COMPONENT_MODE);\t \r\n}\r\nmouseDragged(event){\r\n\t\t this.mouseMove(event);\r\n\t\t }\r\nmouseMove(event){\r\n\t        let new_mx = event.x;\r\n\t        let new_my = event.y;\r\n\t       \r\n\t        this.component.getModel().getUnit().getCoordinateSystem().move((new_mx - this.mx), (new_my - this.my));\r\n\t        this.component.getModel().fireUnitEvent({target:this.component.getModel().getUnit(),type:Event.PROPERTY_CHANGE});\r\n\r\n\t        this.mx = new_mx;\r\n\t        this.my = new_my;     \r\n\t        this.component.repaint();   \t\t \r\n\t\t }\r\n\r\n}\r\n\r\nclass CursorEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t }\r\n\t attach(){\r\n\t\t super.attach();\r\n\t\t    this.mx = this.target.getCenter().x;\r\n\t\t    this.my = this.target.getCenter().y;\r\n\t }\t \r\n\t mousePressed(event){\r\n\t\t if(event.which==3){\r\n\t\t\t this.component.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\r\n\t         this.component.setMode(core.ModeEnum.COMPONENT_MODE);  \r\n\t\t\t return;\r\n\t\t }\r\n\t     var shape = this.target.clone();\t            \r\n\t         this.component.getModel().getUnit().add(shape);       \r\n\t         this.component.getModel().getUnit().setSelected(false);\r\n\t         shape.setSelected(true);\r\n\t         shape.alignToGrid();\r\n\t         this.component.getModel().getUnit().fireShapeEvent({target:shape,type:Event.SELECT_SHAPE});\r\n\t         this.component.repaint();\t            \r\n\t }\r\n\t mouseReleased(event){\r\n\r\n\t }\r\n\t mouseDragged(event){\r\n\r\n\t }\r\n\t mouseMove(event){\t\t    \r\n\t\t \tlet new_mx = event.x;\r\n\t\t    let   new_my = event.y;\r\n\t\t    \r\n\t\t\t\r\n\t\t    this.target.move(new_mx - this.mx, new_my - this.my);\r\n\r\n\t\t    this.mx = new_mx;\r\n\t\t    this.my = new_my;\r\n\t\t\tthis.component.repaint(); \r\n\t }\r\n}\r\nclass LineEventHandle extends EventHandle{\r\n\tconstructor(component) {\r\n\t\t\t super(component);\r\n    }\r\n\tattach() {        \r\n\t    super.attach();\r\n\t    this.component.lineBendingProcessor=new DefaultLineBendingProcessor(); \r\n\t    this.component.lineBendingProcessor.initialize(this.target);\r\n\t}\t\r\n\tmousePressed(event){\r\n\t\tthis.component.popup.close();\r\n\t\t\r\n\t\tif(super.isRightMouseButton(event)){\t\r\n\t\t   this.component.popup.registerLinePopup(this.target,event);\r\n\t\t   return; \r\n\t\t}\r\n\t\t\r\n\t\tthis.component.getModel().getUnit().setSelected(false);\t\t\r\n\t\tthis.target.setSelected(true);\r\n\t\t\r\n\t    let p;      \r\n\t    if(this.component.getParameter(\"snaptogrid\")){        \r\n\t        p=this.component.getModel().getUnit().getGrid().positionOnGrid(event.x,event.y);  \r\n\t        this.component.lineBendingProcessor.isGridAlignable=true;\r\n\t    }else{\r\n\t    \tp=new d2.Point(event.x,event.y);\r\n\t        this.component.lineBendingProcessor.isGridAlignable=false;\r\n\t    }\r\n\t    \r\n\t    //this.component.getModel().getUnit().fireShapeEvent(new ShapeEvent(this.target, ShapeEvent.PROPERTY_CHANGE)); \r\n\t    \r\n\t    let justcreated=this.target.getLinePoints().length==1; \r\n\t        \r\n\t    if(this.component.lineBendingProcessor.addLinePoint(p)){\r\n\t        if(justcreated){\r\n\t            this.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.CREATE_MEMENTO));   \r\n\t            this.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));    \r\n\t        }\r\n\t        if(this.target.getLinePoints().length>=2){\r\n\t           this.component.getModel().getUnit().registerMemento(this.target.getState(MementoType.MOVE_MEMENTO));    \r\n\t        }            \r\n\t    }\r\n\t    this.component.repaint();  \r\n}\r\nmouseReleased(event){\r\n\r\n\t   }\r\nmouseDragged(event){\r\n\t   }\r\nmouseMove(event){\r\n\tthis.component.lineBendingProcessor.moveLinePoint(event.x,event.y);    \r\n\tthis.component.repaint();  \r\n\t   }\r\n\r\nkeyPressed(event){\r\n\t if(this.component.getEventMgr().getTargetEventHandle() != null&&event.keyCode==27){   //ESCAPE      \r\n\t\t this.component.lineBendingProcessor.release();\r\n\t\t this.component.getEventMgr().resetEventHandle();\r\n\t\t this.component.repaint();\r\n\t }   \r\n}\r\n\r\ndblClick(){\r\n\tthis.target.reset();\r\n    this.target.setSelected(false);\r\n    this.component.getEventMgr().resetEventHandle();\r\n    this.component.repaint();\t \r\n} \r\ndetach() {\r\n    this.target.reset(); \r\n    if(this.target.getLinePoints().length<2){\r\n        this.target.owningUnit.remove(this.target.uuid);\r\n    }\r\n    super.detach();\r\n}   \r\n}\r\nclass BlockEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t\t this.selectedShapes=[];\r\n\t }\r\n\t attach(){\r\n\t\t super.attach();\r\n\t     this.selectedShapes = this.component.getModel().getUnit().getSelectedShapes(false);\r\n\t }\r\n\t detach(){\r\n\t     this.selectedShapes=null;\r\n\t     super.detach();\r\n\t }\r\n\t mousePressed(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t   this.component.popup.registerBlockPopup(this.target,event);\t\t\t\t\t\r\n\t\t   return;\r\n\t\t}   \r\n\t\tif(event.data.ctrlKey){\r\n\t\t  this.component.getModel().getUnit().setSelectedShape(this.target.uuid,\r\n\t                   !this.target.isSelected());\r\n\t      this.ctrlButtonPress = true;\r\n\t      this.component.repaint();\r\n\t      return;\t\t   \r\n\t\t}\t\t\r\n\t\tthis.mx=event.x;\r\n\t\tthis.my=event.y;\r\n\t }\r\n\t mouseReleased(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t  return;\r\n\t\t}\r\n\t\tUnitMgr.getInstance().alignBlock(this.component.getModel().getUnit().grid, this.selectedShapes);\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseDragged(event){\r\n\t\tif(super.isRightMouseButton(event)){\r\n\t\t  return;\t \r\n\t\t}\r\n\t\tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t\t\r\n\t    UnitMgr.getInstance().moveBlock(this.selectedShapes,new_mx - this.mx, new_my - this.my);\r\n\t\t\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();\r\n\t   \r\n\t }\r\n\t mouseMove(event){\r\n\t \r\n\t }\r\n}\r\n\r\nclass TextureEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\r\n\t\t this.texture=null;\r\n\t }\r\nclear() {\r\n\t this.texture=null;\r\n}\r\nmousePressed(event){\r\n   this.component.getModel().getUnit().setSelected(false);\r\n   this.target.setSelected(true);\r\n\tthis.mx=event.x;\r\n\tthis.my=event.y;\r\n\r\n\tthis.texture= this.target.getClickedTexture(event.x,event.y);  \r\n\tthis.component.repaint();\r\n\t\r\n}\r\nmouseReleased(event){\r\n\r\n}\r\nmouseDragged(event){\r\n\t \tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t\t\r\n\t\tthis.texture.move(new_mx - this.mx, new_my - this.my);\r\n\t\tthis.target.owningUnit.fireShapeEvent({target:this.target,type: Event.PROPERTY_CHANGE});\r\n\t\t\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();       \r\n}\r\nmouseMove(event){\r\n\r\n}\r\n}\r\n\r\nclass MeasureEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\nattach(){\r\n\t super.attach();\r\n}\t \r\ndetach() {\r\n    this.component.getModel().getUnit().ruler.resizingPoint=null;\r\n    super.detach();\r\n}\r\nmouseReleased(e){\r\n\r\n}\r\nmouseDragged(e){\r\n}\r\nmousePressed(e) {        \r\n        this.component.getModel().getUnit().ruler.resizingPoint=new d2.Point(e.x,e.y);\r\n        this.mx = e.x;\r\n        this.my = e.y;\r\n}\r\nmouseMove(e) {\r\n        let new_mx = e.x;\r\n        let new_my = e.y;\r\n        this.component.getModel().getUnit().ruler.Resize(new_mx - this.mx, new_my - this.my);\r\n        // update our data\r\n        this.mx = new_mx;\r\n        this.my = new_my;\r\n        \r\n        this.component.repaint();\r\n    }\t\r\n}\r\n\r\nclass MouseScaledEvent{\r\n constructor(x,y,basePoint,originalEvent) {\r\n   this.windowx=x;\r\n   this.windowy=y;\r\n   this.x=basePoint.x;\r\n   this.y=basePoint.y;\r\n   this.which=originalEvent.which;\r\n   this.data=originalEvent;\r\n }\r\n toString(){\r\n   return    \"base x=\"+this.x+\r\n             \"; base y=\"+this.y+\r\n\t\t\t \"; window x=\"+this.windowx+\r\n\t\t\t \"; window y=\"+this.windowy+\r\n\t\t\t \"; which=\"+this.which; \r\n }\r\n}\r\nclass MoveLineSegmentHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\t\t \r\n\t     this.adapter;\r\n\t }\r\nmousePressed(event){\r\n    this.component.getModel().getUnit().setSelected(false);\r\n    this.target.setSelected(true);\r\n\tthis.component.repaint();\r\n    if(this.isRightMouseButton(event)){          \r\n\t\tthis.component.popup.registerLineSelectPopup(this.target,event);           \r\n        return;\r\n    }         \r\n    \r\n    let segment=this.target.getSegmentClicked(event);\r\n        \r\n    //this.adapter=new  MoveLineSegmentAdapter(this.target,segment)\r\n    this.adapter=new  End90DegreeMoveLineSegmentAdapter(this.target,segment)\r\n }\r\n mouseReleased(event){\r\n\t \tif(this.isRightMouseButton(event)){ \r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t    if(this.component.getParameter(\"snaptogrid\")){\r\n          this.target.alignResizingPointToGrid(this.adapter.segment.ps);\r\n          this.target.alignResizingPointToGrid(this.adapter.segment.pe);\t      \r\n\t\t}\t    \r\n\t\tthis.adapter.validateNonZeroVector();\r\n\t\t\r\n\t\tthis.component.repaint();\t \r\n }\r\n mouseDragged(event){\r\n    this.adapter.moveSegment(new d2.Point(event.x,event.y));    \r\n\tthis.component.repaint();\r\n }\r\n mouseMove(event){\r\n \r\n }\r\n}\r\n\r\n/**movable segment track  */\r\nclass MoveLineSegmentAdapter{\r\nconstructor(track,segment) {\r\n\t\t this.segments=track.polyline.segments\r\n\t\t this.segment=segment\r\n\t     this.isMidSegment=false\r\n         this.copy=segment.clone()\r\n\t }\r\nmoveSegment(p){\t\r\n\t if(this.segment==null){\r\n\t  return\t\r\n\t }\t \r\n     if(this.isSingleSegment()){\r\n\t   this.moveSingleSegment(p)\r\n\t }else if(this.isEndSegment()){\r\n\t   this.isMidSegment=false\r\n\t   this.moveEndSegment(p)\t\r\n\t }else{\r\n\t\tthis.isMidSegment=true\r\n\t\tthis.moveMidSegment(p)\r\n\t }\r\n}\r\nisSingleSegment(){\r\n\treturn this.segments.length==1\r\n}\t\r\nisEndSegment(){\r\n\t //find neigbor segment\r\n\t let segm=this.findPrev()     \t \r\n     if(segm==null){\r\n\t     return true;\r\n\t }\r\n\r\n     segm=this.findNext()     \r\n     return segm==null;\t\t\r\n}\r\nmoveSingleSegment(p){\r\n}\r\nmoveEndSegment(p){\r\n     //find neigbor segment\r\n\t let segm=this.findPrev()     \r\n\t if(segm==null){\r\n\t   \tsegm=this.findNext()\r\n\t }\r\n\t //find common point and end point on same segm\r\n     let commonpoint=segm.pe //common point between target segment and segm\r\n     let endpoint1=segm.ps   //distant point from common one\t\t\r\n\t if(segm.ps==this.segment.ps||segm.ps==this.segment.pe){\t  \r\n\t   commonpoint=segm.ps\r\n       endpoint1=segm.pe\t   \r\n     }\r\n\t //find free end point on this.segment\r\n\t let endpoint2=this.segment.ps\r\n     if(commonpoint==this.segment.ps){\r\n\t   endpoint2=this.segment.pe\t\r\n\t }\r\n//find the direction of movement in regard to mouse point and segm end point\r\n     let invertDirection=true;\r\n     if(utilities.isLeftPlane(this.segment.ps,this.segment.pe,p)==utilities.isLeftPlane(this.segment.ps,this.segment.pe,endpoint1)){\t\t\r\n\t \tinvertDirection=false;\t    \r\n     }\r\n//1. move common point\r\n     let projPoint=this.segment.projectionPoint(p)\t \r\n     let distance=projPoint.distanceTo(p)\t\t\r\n    \r\n     let vsegment=new d2.Vector(commonpoint,endpoint2);\r\n     let vsegm=new d2.Vector(commonpoint,endpoint1);\r\n\r\n\t \r\n     let angle=vsegment.angleTo(vsegm);\r\n     if(angle>180){\r\n        angle=360-angle    \r\n\t }\r\n\t//find units to move along segm\r\n\tlet sina=Math.sin(d2.utils.radians(angle))\r\n    let delta=distance/sina\r\n\r\n    let inverted=vsegm.clone()\r\n    if(invertDirection){\r\n      inverted.invert();\r\n\t}\r\n    let norm=inverted.normalize();\r\n\t  \r\n      \r\n    let x=commonpoint.x +delta*norm.x;\r\n\tlet y=commonpoint.y +delta*norm.y;\r\n\t\r\n//2. move free end point of this.segment\r\n    let xx=endpoint2.x +delta*norm.x;\r\n\tlet yy=endpoint2.y +delta*norm.y;\r\n    \t\r\n    endpoint2.set(xx,yy)\r\n    commonpoint.set(x,y)\r\n\t\r\n}\r\nmoveMidSegment(p){\r\n\t //find neigbor segment\r\n\t let prevsegm=this.findPrev()     \t      \r\n     let nextsegm=this.findNext()     \r\n\r\n//1. prev segment movement\r\n\t //find common point and end point of  prev segment\r\n     let prevpoint=prevsegm.pe\t//common point between target segment and prev\r\n     let endpoint1=prevsegm.ps  //distance point\r\n\t if(prevsegm.ps==this.segment.ps||prevsegm.ps==this.segment.pe){\t  \r\n\t   prevpoint=prevsegm.ps\r\n       endpoint1=prevsegm.pe\t   \r\n     }\r\n\r\n\t //find end point on this.segment\r\n\t let endpoint2=this.segment.ps\r\n     if(prevpoint==this.segment.ps){\r\n\t   endpoint2=this.segment.pe\t\r\n\t }\r\n\r\n     //find the direction of movement in regard to mouse point and prevsegm end point\r\n     let invertDirection=true;\r\n     if(utilities.isLeftPlane(this.segment.ps,this.segment.pe,p)==utilities.isLeftPlane(this.segment.ps,this.segment.pe,endpoint1)){\t\t\r\n\t \tinvertDirection=false;\t    \r\n     }\t \r\n\r\n     let projPoint=this.segment.projectionPoint(p)\t \r\n     let distance=projPoint.distanceTo(p)\t\t\r\n    \r\n     let vsegment=new d2.Vector(prevpoint,endpoint2);\r\n     let vsegm=new d2.Vector(prevpoint,endpoint1);\r\n\t \r\n     let angle=vsegment.angleTo(vsegm);\r\n     if(angle>180){\r\n        angle=360-angle    \r\n\t }\r\n\t//find units to move along segm\r\n\tlet sina=Math.sin(d2.utils.radians(angle))\r\n    let delta=distance/sina\r\n\r\n    let inverted=vsegm.clone()\r\n    if(invertDirection){\r\n    \tinverted.invert();\r\n\t}\r\n\r\n    let norm=inverted.normalize();\r\n\t  \r\n      \r\n    let x=prevpoint.x +delta*norm.x;\r\n\tlet y=prevpoint.y +delta*norm.y;\r\n    \r\n\r\n\r\n//2. next segment movement\r\n\t //find common point and end point on same segm - prev\r\n     let nextpoint=nextsegm.pe //common point between target segment and next segment\r\n     endpoint1=nextsegm.ps\r\n\t if(nextsegm.ps==this.segment.ps||nextsegm.ps==this.segment.pe){\t  \r\n\t   nextpoint=nextsegm.ps\r\n       endpoint1=nextsegm.pe\t   \r\n     }\r\n\r\n\t //find end point on this.segment\r\n\t endpoint2=this.segment.ps\r\n     if(nextpoint==this.segment.ps){\r\n\t   endpoint2=this.segment.pe\t\r\n\t }\r\n     //find the direction of movement in regard to mouse point and nextsegm end point\r\n     invertDirection=true;\r\n     if(utilities.isLeftPlane(this.segment.ps,this.segment.pe,p)==utilities.isLeftPlane(this.segment.ps,this.segment.pe,endpoint1)){\t\t\r\n\t \tinvertDirection=false;\t    \r\n     }\t \r\n\r\n      projPoint=this.segment.projectionPoint(p)\t \r\n      distance=projPoint.distanceTo(p)\t\t\r\n    \r\n      vsegment=new d2.Vector(nextpoint,endpoint2);\r\n      vsegm=new d2.Vector(nextpoint,endpoint1);\r\n\t \r\n     angle=vsegment.angleTo(vsegm);\r\n     if(angle>180){\r\n        angle=360-angle    \r\n\t }\r\n\t//find units to move along segm\r\n\t sina=Math.sin(d2.utils.radians(angle))\r\n     delta=distance/sina\r\n\r\n     inverted=vsegm.clone()\r\n     if(invertDirection){\r\n    \tinverted.invert();\r\n\t }\r\n\r\n     norm=inverted.normalize();\r\n\r\n    let xx=nextpoint.x +delta*norm.x;\r\n\tlet yy=nextpoint.y +delta*norm.y;\r\n    nextpoint.set(xx,yy)\r\n    \r\n    prevpoint.set(x,y)\t\r\n}\r\n/*\r\nAvoid loosing direction vectors by moving point to overlapping position\r\n*/\r\nvalidateNonZeroVector(){\t\t  \r\n\t  for(let s of this.segments){\t\t\t\t\r\n\t\t  if(isNaN(s.length)||d2.utils.EQ(s.length,0)){\r\n\t\t\tthis.segment.set(this.copy.ps.x,this.copy.ps.y,this.copy.pe.x,this.copy.pe.y);\r\n\t\t\tbreak;\r\n\t\t  }\r\n\t  }\t\t\r\n}\r\nfindPrev(){\r\n\tlet prev=null;\r\n\tfor(let s of this.segments){\t\t\t\t\r\n\t\tif(s.same(this.segment)){\r\n\t\t\treturn prev;\r\n\t\t}\r\n\t\tprev=s;\r\n\t}\r\n\treturn null;\r\n}\r\nfindNext(){\t\t\r\n\tlet next=null;\r\n\tfor (var i = this.segments.length - 1; i >= 0; i--) {\r\n\t\tif(this.segments[i].same(this.segment)){\r\n\t\t\treturn next;\r\n\t\t}\r\n\t\tnext=this.segments[i];\r\n    \t\r\n\t}\r\n\treturn null;\t\t\r\n}\r\n}\r\n/*\r\nMake end segment move 90 degree wise only\r\n*/\r\nclass End90DegreeMoveLineSegmentAdapter extends MoveLineSegmentAdapter{\r\n\tconstructor(track,segment) {\r\n\t  super(track,segment)\r\n\t}\r\nmoveEndSegment(p){\r\n\tif(!(this.segment.isVertical||this.segment.isHorizontal)){\t\t\r\n\t\tsuper.moveEndSegment(p)\r\n\t\treturn;\r\n\t}\r\n\t\r\n\t //find neigbor segment\r\n\t let segm=this.findPrev()     \r\n\t if(segm==null){\r\n\t   \tsegm=this.findNext()\r\n\t }\r\n\t //find common point and end point on same segm\r\n     let commonpoint=segm.pe //common point between target segment and segm\r\n     let endpoint1=segm.ps   //distant point from common one\t\t\r\n\t if(segm.ps==this.segment.ps||segm.ps==this.segment.pe){\t  \r\n\t   commonpoint=segm.ps\r\n       endpoint1=segm.pe\t   \r\n     }\r\n\t //find free end point on this.segment\r\n\t let endpoint2=this.segment.ps\r\n     if(commonpoint==this.segment.ps){\r\n\t   endpoint2=this.segment.pe\t\r\n\t }\r\n//find the direction of movement in regard to mouse point and segm end point\r\n     let invertDirection=true;     \r\n     if(utilities.isLeftPlane(this.segment.ps,this.segment.pe,p)===utilities.isLeftPlane(this.segment.ps,this.segment.pe,endpoint1)){\t\t\r\n\t \tinvertDirection=false;\t    \r\n     }\r\n//1. move common point\r\n     let projPoint=this.segment.projectionPoint(p)\t \r\n     let distance=projPoint.distanceTo(p)\t\t\r\n    \r\n     let vsegment=new d2.Vector(commonpoint,endpoint2);\r\n     let vsegm=new d2.Vector(commonpoint,endpoint1);\r\n\r\n\t \r\n     let angle=vsegment.angleTo(vsegm);\r\n     if(angle>180){\r\n        angle=360-angle    \r\n\t }\r\n\t//find units to move along segm\r\n\tlet sina=Math.sin(d2.utils.radians(angle))\r\n    let delta=distance/sina\r\n\r\n    let inverted=vsegm.clone()\r\n    if(invertDirection){\r\n      inverted.invert();\r\n\t}\r\n    let norm=inverted.normalize();\r\n\t  \r\n      \r\n    let x=commonpoint.x +delta*norm.x;\r\n\tlet y=commonpoint.y +delta*norm.y;\r\n\t\r\n//2. move free end point of this.segment\r\n    let xx,yy;   \r\n    if(this.segment.isHorizontal){     \r\n     xx=endpoint2.x\r\n\t yy=y\r\n    }else{\r\n\t xx=x\r\n\t yy=endpoint2.y\r\n\t}\t\r\n    endpoint2.set(xx,yy)\r\n    commonpoint.set(x,y)\r\n\r\n}\t\r\n} \r\nmodule.exports ={\r\n   Event,\r\n   MouseScaledEvent,\r\n   TextureEventHandle,\r\n   BlockEventHandle,\r\n   CursorEventHandle,\r\n   OriginEventHandle,\r\n   UnitEventHandle,\r\n   DragingEventHandle,\r\n   MoveEventHandle,\r\n   ResizeEventHandle,\r\n   EventHandle,\r\n   LineEventHandle,\r\n   MeasureEventHandle,\r\n   MoveLineSegmentAdapter,\r\n   MoveLineSegmentHandle\r\n}\r\nvar UnitMgr = require('core/unit').UnitMgr;\r\n","var core=require('core/core');\r\nvar d2=require('d2/d2');\r\nvar utilities =require('core/utilities');\r\n\r\nclass LineBendingProcessor{\r\nconstructor () {\r\n\t    this.line;\t    \r\n\t    this.isGridAlignable=false;\r\n  }\t\r\ninitialize(line){           \r\n      this.line=line         \r\n  }\r\naddLinePoint(point){\r\n\t\r\n}   \r\n\r\nmoveLinePoint(x,y){\r\n\r\n}\r\nrelease(){\r\n\tthis.line.reset();\t\r\n}\r\nisOverlappedPoint(pointToAdd){\r\n    if(this.line.getLinePoints().length>0){      \r\n      let lastPoint;\r\n          if(this.line.resumeState==core.ResumeState.ADD_AT_END){\r\n        \t  lastPoint=this.line.getLinePoints()[(this.line.getLinePoints().length-1)];                 \r\n          }else{\r\n              lastPoint=this.line.getLinePoints()[0]; \r\n          }\r\n      //***is this the same point as last one?   \r\n      if(d2.utils.EQ(pointToAdd.x,lastPoint.x)&&d2.utils.EQ(pointToAdd.y,lastPoint.y))\r\n        return true;    \r\n    }\r\n    return false;\r\n}\r\nisPointOnLine(pointToAdd){\r\n    if(this.line.getLinePoints().length>=2){\r\n        //let lastPoint=this.line.getLinePoints()[(this.line.getLinePoints().length-1)]; \r\n        //let lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2];\r\n    \tlet lastPoint,lastlastPoint;\r\n    \tif(this.line.resumeState==core.ResumeState.ADD_AT_END){  \r\n            lastPoint=this.line.getLinePoints()[(this.line.getLinePoints().length-1)]; \r\n            lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2]; \r\n        }else{\r\n            lastPoint=this.line.getLinePoints()[0];  \r\n            lastlastPoint=this.line.getLinePoints()[1];                  \r\n        }    \t\r\n      //***check if point to add overlaps last last point\r\n      if(lastlastPoint.equals(pointToAdd)){\r\n        //this.line.deleteLastPoint();\r\n        lastPoint.set(pointToAdd);  \r\n        return true;\r\n      }\r\n      if((d2.utils.EQ(lastPoint.x,pointToAdd.x)&&d2.utils.EQ(lastlastPoint.x,pointToAdd.x))||(d2.utils.EQ(lastPoint.y,pointToAdd.y)&&d2.utils.EQ(lastlastPoint.y,pointToAdd.y))){                \r\n        lastPoint.set(pointToAdd);                           \r\n        return true;\r\n      }                    \r\n   }\r\n   return false;\t\r\n}\r\nisSlopeInterval(p1,p2){\r\n\tif(d2.utils.EQ(p1.x,p2.x)){\r\n\t\treturn false;\r\n\t}\r\n\tif(d2.utils.EQ(p1.y,p2.y)){\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\t\r\n}\r\n}\r\nclass LineSlopBendingProcessor extends LineBendingProcessor{\r\n\tconstructor () {\r\n\t\tsuper();\r\n  }\t\r\n\r\naddLinePoint( point) {\r\n        if(this.line.getLinePoints().length==0){\r\n             this.line.reset(point);\r\n        }               \r\n        let result=false;\r\n        if(!this.isOverlappedPoint(point)){\r\n            if(!this.isPointOnLine(point)) {\r\n                let midP,endP;\r\n               \r\n                if(this.isGridAlignable){\r\n                  midP=this.line.owningUnit.getGrid().positionOnGrid(this.line.floatingMidPoint.x,this.line.floatingMidPoint.y);\r\n                  endP=this.line.owningUnit.getGrid().positionOnGrid(this.line.floatingEndPoint.x,this.line.floatingEndPoint.y);\r\n                }else{\r\n                  midP=new d2.Point(this.line.floatingMidPoint.x,this.line.floatingMidPoint.y);\r\n                  endP=new d2.Point(this.line.floatingEndPoint.x,this.line.floatingEndPoint.y);\r\n                  \r\n                }\r\n                if(this.isOverlappedPoint(midP)){\r\n                   this.line.addPoint(endP);\r\n                   result=true;  \r\n                }else if(!this.isPointOnLine(midP)){\r\n                   this.line.addPoint(midP);\r\n                   result=true;\r\n                } \r\n            }  \r\n        }  \r\n    \r\n        this.line.shiftFloatingPoints(); \r\n        return result;\r\n        \r\n        \r\n}\t\r\nmoveLinePoint(x,y){\r\n\t\r\n\t    if(this.line.getLinePoints().length>1){\r\n\t        //line is resumed if line end is not slope then go on from previous segment\t        \r\n\t        let lastPoint,lastlastPoint;\r\n\t        if(this.line.resumeState==core.ResumeState.ADD_AT_FRONT){\t        \t\r\n\t            lastPoint=this.line.getLinePoints()[0];  \r\n\t            lastlastPoint=this.line.getLinePoints()[1];  \r\n\t        }else{\r\n\t\t    \tlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-1];  \r\n\t\t        lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2]; \t        \t\t             \r\n\t        }\t        \r\n\t        if(this.isSlopeInterval(lastPoint, lastlastPoint)){\r\n\t        \tthis.handleLine(x, y);\r\n\t        }else{\r\n\t           this.handleSlope(x, y); \r\n\t        }\r\n\t        \r\n\t    }else{\r\n\t        this.handleLine(x, y);\r\n\t    }\t\r\n\t}\r\n\r\nhandleSlope(x,y){    \r\n    this.line.floatingEndPoint.set(x,y);\r\n    let quadrant = utilities.getQuadrantLocation(this.line.floatingStartPoint,this.line.floatingEndPoint);\r\n    let dx=Math.abs(this.line.floatingStartPoint.x-this.line.floatingEndPoint.x);\r\n    let dy=Math.abs(this.line.floatingStartPoint.y-this.line.floatingEndPoint.y); \r\n    \r\n    \r\n    if(dx>=dy){ \r\n        switch(quadrant){\r\n            case  utilities.QUADRANT.FIRST:\r\n                  this.line.floatingMidPoint.set(this.line.floatingStartPoint.x+dy,this.line.floatingEndPoint.y); \r\n                  break;            \r\n            case  utilities.QUADRANT.SECOND:\r\n                  this.line.floatingMidPoint.set(this.line.floatingStartPoint.x-dy,this.line.floatingEndPoint.y);  \r\n                  break;             \r\n            case  utilities.QUADRANT.THIRD:\r\n                  this.line.floatingMidPoint.set(this.line.floatingStartPoint.x-dy,this.line.floatingEndPoint.y);   \r\n                  break; \r\n            case  utilities.QUADRANT.FORTH:\r\n                  this.line.floatingMidPoint.set(this.line.floatingStartPoint.x+dy,this.line.floatingEndPoint.y);                        \r\n                  break;                \r\n        }\r\n    }else{\r\n        switch(quadrant){\r\n            case  utilities.QUADRANT.FIRST:\r\n                  this.line.floatingMidPoint.set(this.line.floatingEndPoint.x,this.line.floatingStartPoint.y-dx);                        \r\n                  break;            \r\n            case  utilities.QUADRANT.SECOND:\r\n                  this.line.floatingMidPoint.set(this.line.floatingEndPoint.x,this.line.floatingStartPoint.y-dx); \r\n                  break;             \r\n            case  utilities.QUADRANT.THIRD:\r\n                  this.line.floatingMidPoint.set(this.line.floatingEndPoint.x,this.line.floatingStartPoint.y+dx); \r\n                  break; \r\n            case  utilities.QUADRANT.FORTH:\r\n                  this.line.floatingMidPoint.set(this.line.floatingEndPoint.x,this.line.floatingStartPoint.y+dx);                        \r\n                  break;                \r\n        }            \r\n    }\r\n       \r\n}        \r\n\t\r\nhandleLine( x,  y){        \r\n        this.line.floatingEndPoint.set(x,y);\r\n        let quadrant = utilities.getQuadrantLocation(this.line.floatingStartPoint,this.line.floatingEndPoint);\r\n        let dx=Math.abs(this.line.floatingStartPoint.x-this.line.floatingEndPoint.x);\r\n        let dy=Math.abs(this.line.floatingStartPoint.y-this.line.floatingEndPoint.y); \r\n        \r\n        if(dx>=dy){ \r\n            switch(quadrant){\r\n                case  utilities.QUADRANT.FIRST:\r\n                      this.line.floatingMidPoint.set(this.line.floatingEndPoint.x-dy,this.line.floatingStartPoint.y); \r\n                      break;            \r\n                case  utilities.QUADRANT.SECOND:\r\n                      this.line.floatingMidPoint.set(this.line.floatingEndPoint.x+dy,this.line.floatingStartPoint.y);  \r\n                      break;             \r\n                case  utilities.QUADRANT.THIRD:\r\n                      this.line.floatingMidPoint.set(this.line.floatingEndPoint.x+dy,this.line.floatingStartPoint.y);   \r\n                      break; \r\n                case  utilities.QUADRANT.FORTH:\r\n                      this.line.floatingMidPoint.set(this.line.floatingEndPoint.x-dy,this.line.floatingStartPoint.y);                        \r\n                      break;                \r\n            }\r\n        }else{\r\n        \tswitch(quadrant){\r\n                case  utilities.QUADRANT.FIRST:\r\n                      this.line.floatingMidPoint.set(this.line.floatingStartPoint.x,this.line.floatingEndPoint.y+dx);                        \r\n                      break;            \r\n                case  utilities.QUADRANT.SECOND:\r\n                      this.line.floatingMidPoint.set(this.line.floatingStartPoint.x,this.line.floatingEndPoint.y+dx); \r\n                      break;             \r\n                case  utilities.QUADRANT.THIRD:\r\n                      this.line.floatingMidPoint.set(this.line.floatingStartPoint.x,this.line.floatingEndPoint.y-dx); \r\n                      break; \r\n                case  utilities.QUADRANT.FORTH:\r\n                      this.line.floatingMidPoint.set(this.line.floatingStartPoint.x,this.line.floatingEndPoint.y-dx);                        \r\n                      break;                \r\n            }            \r\n        }\r\n        \r\n    }\t\r\n\t\r\n}\r\nclass SlopLineBendingProcessor extends LineSlopBendingProcessor{\r\n\tconstructor () {\r\n\t\tsuper();\r\n  }\t\t\r\naddLinePoint( point) {\r\n\t\tsuper.addLinePoint(point);\r\n\t}\r\nmoveLinePoint(x,y){\r\n    if(this.line.getLinePoints().length>1){\r\n        let lastPoint,lastlastPoint;\r\n        if(this.line.resumeState==core.ResumeState.ADD_AT_FRONT){\t        \t\r\n            lastPoint=this.line.getLinePoints()[0];  \r\n            lastlastPoint=this.line.getLinePoints()[1];  \r\n        }else{\r\n\t    \tlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-1];  \r\n\t        lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2]; \t        \t\t             \r\n        }        \r\n        \r\n        if(this.isSlopeInterval(lastPoint, lastlastPoint)){\r\n           this.handleLine(x, y);\r\n        }else{\r\n           this.handleSlope(x, y); \r\n        }\r\n        \r\n    }else{\r\n        this.handleSlope(x, y);\r\n    }\t\r\n}\t\r\n\t\r\n}\r\nclass DefaultLineBendingProcessor extends LineBendingProcessor {\r\nconstructor () {\r\n\t\tsuper();\r\n  }\t   \r\naddLinePoint(point) {      \r\n       let result=false;\r\n       if(!this.isOverlappedPoint(point)){\r\n           if(!this.isPointOnLine(point)){\r\n               this.line.addPoint(point);   \r\n               result=true;\r\n           }               \r\n       }         \r\n       this.line.reset(point); \r\n       return result;\r\n    }\r\n\r\nmoveLinePoint( x,  y) {\r\n      this.line.floatingEndPoint.set(x,y); \r\n      this.line.floatingMidPoint.set(x,y);\r\n    }\r\n\r\n}\r\n\r\nclass HorizontalToVerticalProcessor extends LineBendingProcessor{\r\n  constructor () {\r\n\t\tsuper();\r\n  }\r\n  addLinePoint( point) {\r\n      if(this.line.getLinePoints().length==0){\r\n          this.line.reset(point);\r\n     }               \r\n     let result=false;\r\n     if(!this.isOverlappedPoint(point)){\r\n         if(!this.isPointOnLine(point)) {\r\n             let midP,endP;\r\n            \r\n             if(this.isGridAlignable){\r\n               midP=this.line.owningUnit.getGrid().positionOnGrid(this.line.floatingMidPoint.x,this.line.floatingMidPoint.y);\r\n               endP=this.line.owningUnit.getGrid().positionOnGrid(this.line.floatingEndPoint.x,this.line.floatingEndPoint.y);\r\n             }else{\r\n               midP=new d2.Point(this.line.floatingMidPoint.x,this.line.floatingMidPoint.y);\r\n               endP=new d2.Point(this.line.floatingEndPoint.x,this.line.floatingEndPoint.y);\r\n               \r\n             }\r\n             if(this.isOverlappedPoint(midP)){\r\n                this.line.addPoint(endP);\r\n                result=true;  \r\n             }else if(!this.isPointOnLine(midP)){\r\n                this.line.addPoint(midP);\r\n                result=true;\r\n             } \r\n         }  \r\n     }  \r\n \r\n     this.line.shiftFloatingPoints(); \r\n     return result;\r\n  }\t\r\n  moveLinePoint(x,y){\t\t\r\n\t    if(this.line.getLinePoints().length>1){\r\n\t        //line is resumed if line end is not slope then go on from previous segment\t    \t\r\n\t        let lastPoint,lastlastPoint;\r\n\t        if(this.line.resumeState==core.ResumeState.ADD_AT_FRONT){\t        \t\r\n\t            lastPoint=this.line.getLinePoints()[0];  \r\n\t            lastlastPoint=this.line.getLinePoints()[1];  \r\n\t        }else{\r\n\t\t    \tlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-1];  \r\n\t\t        lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2]; \t        \t\t             \r\n\t        }  \t        \r\n\t        \r\n\t        if(this.isHorizontalInterval(lastPoint, lastlastPoint)){\r\n\t           this.handleVertical(x, y);\r\n\t        }else{\r\n\t           this.handleHorizontal(x, y); \r\n\t        }\r\n\t        \r\n\t    }else{\r\n\t        this.handleHorizontal(x, y);\r\n\t    }\t\r\n\t}  \r\n  handleVertical( x,  y){\r\n\t  this.line.floatingEndPoint.set(x,y);\r\n\t  this.line.floatingMidPoint.set(this.line.floatingStartPoint.x,this.line.floatingEndPoint.y); \r\n  }\r\n  handleHorizontal( x,  y){        \r\n      this.line.floatingEndPoint.set(x,y);\r\n      this.line.floatingMidPoint.set(this.line.floatingEndPoint.x,this.line.floatingStartPoint.y); \r\n                        \r\n  }\t\r\n  isHorizontalInterval(p1,p2){\r\n\t\tif(d2.utils.EQ(p1.x,p2.x)){\r\n\t\t\treturn false;\r\n\t\t}\t\t\r\n\t\treturn true;\t\r\n\t}  \r\n}\r\n\r\nclass VerticalToHorizontalProcessor extends HorizontalToVerticalProcessor{\r\nconstructor () {\r\n\t\t\tsuper();\r\n\t  }\r\naddLinePoint( point) {\r\n\t\t\tsuper.addLinePoint(point);\r\n\t\t}\r\nmoveLinePoint(x,y){\r\n    if(this.line.getLinePoints().length>1){\r\n        //line is resumed if line end is not slope then go on from previous segment\r\n        let lastPoint,lastlastPoint;\r\n        if(this.line.resumeState==core.ResumeState.ADD_AT_FRONT){\t        \t\r\n            lastPoint=this.line.getLinePoints()[0];  \r\n            lastlastPoint=this.line.getLinePoints()[1];  \r\n        }else{\r\n\t    \tlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-1];  \r\n\t        lastlastPoint=this.line.getLinePoints()[this.line.getLinePoints().length-2]; \t        \t\t             \r\n        }  \r\n        if(this.isHorizontalInterval(lastPoint, lastlastPoint)){\r\n           this.handleVertical(x, y);\r\n        }else{\r\n           this.handleHorizontal(x, y); \r\n        }\r\n        \r\n    }else{\r\n        this.handleVertical(x, y);\r\n    }\t\t\r\n\t}\t  \r\n}\r\nmodule.exports ={\r\n\t\tSlopLineBendingProcessor,\r\n\t\tLineSlopBendingProcessor,\r\n\t\tDefaultLineBendingProcessor,\r\n\t\tHorizontalToVerticalProcessor,\r\n\t\tVerticalToHorizontalProcessor,\r\n}","\r\n\r\n/*\r\n * ToggleButton model on the UI\r\n */\r\nvar ToggleButtonModel=Backbone.Model.extend({\r\n\tdefaults: {\r\n\t  active:false,\r\n      id:'unkown',\r\n      group:''\r\n\t},\r\n    update:function(){\r\n       if(this.attributes.active){\t\r\n         j$('#'+this.id).addClass(\"active\");\r\n       }else{\r\n    \t j$('#'+this.id).removeClass(\"active\");  \r\n       }\r\n    },\t\r\n\tsetActive:function(active){\r\n\t\tthis.attributes.active=active;\r\n\t\tthis.update();\r\n\t},\r\n    isActive:function(){\r\n    \treturn this.attributes.active;\r\n    }\r\n});\r\n\r\n/*\r\n* Button Collection\r\n*/\r\nvar ToggleButtonCollection=Backbone.Collection.extend({\r\n\tmodel: ToggleButtonModel\r\n});\r\n\r\nmodule.exports ={\r\n\tToggleButtonCollection,\r\n\tToggleButtonModel\r\n}","var core=require('core/core');\r\nvar UnitMgr = require('core/unit').UnitMgr;\r\nvar d2=require('d2/d2');\r\nvar DefaultLineBendingProcessor=require('core/line/linebendingprocessor').DefaultLineBendingProcessor;\r\n\r\nclass ContextMenu{\r\nconstructor(component,placeholderid){\r\n\tthis.menu=j$('#popup-menu');\r\n\tthis.menu.addClass('visible'); \r\n\tthis.component=component;\t\r\n\tthis.content=\"\";\r\n\tthis.context;\r\n\tthis.x=this.y=0;\r\n\tthis.opened = false;\r\n\tthis.component.canvas.contextmenu(j$.proxy(this.conontextMenuHandler,this));\r\n}\r\nconontextMenuHandler(e){\r\n   e.preventDefault();\r\n   e.stopPropagation();\r\n   this.opened = true;\t\r\n  // get mouse position relative to the canvas\r\n   var x=parseInt(e.originalEvent.offsetX);\r\n   var y=parseInt(e.originalEvent.offsetY);\r\n  \r\n   this.menu.empty();\r\n   this.menu.show();    \r\n   this.menu.css({left:x,top:y});\r\n   this.menu.html(this.content);\r\n   let that=this;\r\n   j$('#menu-items tr').click(function(){            \r\n\t\tthat.menu.hide();      \r\n\t\tthat.actionPerformed(j$(this)[0].id,that.context);\t  \r\n   });\r\n   return false;\t\t\r\n}\r\nregisterShapePopup(target,event){\r\n\tvar items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t  items+=\"<tr id='rotateleftid' ><td style='padding: 0.4em;'>Rotate Left</td></tr>\";\r\n\t  items+=\"<tr id='rotaterightid'><td style='padding: 0.4em;'>Rotate Right</td></tr>\";\t  \r\n\t  items+=\"<tr id='cloneid'><td style='padding: 0.4em;'>Clone</td></tr>\";\r\n\t  items+=\"<tr id='topbottomid'><td style='padding: 0.4em'>Mirror Top-Bottom</td></tr>\";\r\n\t  items+=\"<tr id='leftrightid'><td style='padding: 0.4em'>Mirror Left-Right</td></tr>\";\r\n\t  items+=\"<tr id='sendbackid'><td style='padding: 0.4em'>Send To Back</td></tr>\";\r\n\t  items+=\"<tr id='bringfrontid'><td style='padding: 0.4em'>Bring To Front</td></tr>\";\t  \r\n\t  items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t  items+=\"</table></div>\";\r\n\t  this.setContent(event,items,{target:target});\t\r\n\t  //this.open(event);\t\r\n\t}\r\nregisterLineSelectPopup(target,event){\r\n\t  let bending=target.isBendingPointClicked(event.x,event.y);\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='cloneid' ><td style='padding: 0.4em;'>Clone</td></tr>\";\r\n\t    if(bending!=null){\r\n\t      if(target.isEndPoint(event.x,event.y)){\t\r\n\t        items+=\"<tr id='resumeid'><td style='padding: 0.4em;'>Resume</td></tr>\";\r\n\t      }\r\n\t    }else{\r\n\t    \titems+=\"<tr id='addbendingpointid'><td style='padding: 0.4em;'>Add Bending point</td></tr>\";\t\r\n\t    }\r\n\t    \r\n\t    if(bending!=null){\r\n\t      items+=\"<tr id='deletebendingpointid'><td style='padding: 0.4em'>Delete Bending point</td></tr>\";\r\n\t    }\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\r\n\t    //this.open(event);\t\r\n}\r\n//open(event){ \t\r\n\t//this.x=event.x;\r\n\t//this.y=event.y;\r\n    //this.placeholder.style.left=event.data.originalEvent.offsetX+\"px\";\r\n    //this.placeholder.style.top=event.data.originalEvent.offsetY+\"px\";\r\n    //this.show();\t\t\t\t  \r\n//}\r\n//show(){\r\n    //if (!this.opened) {\r\n\t//   this.placeholder.className = \"visible\";\r\n\t//}    \r\n\t//this.opened = true;\t\t\t  \t\t \r\n//}\r\n\r\nclose() {\t\r\n\tthis.menu.hide();\r\n\tthis.content=\"\";\r\n    this.opened = false;  \r\n}\r\n\r\nisOpen(){\r\n\treturn this.opened;\r\n}\r\nsetContent(event,content,context) {\r\n\tthis.x=event.x;\r\n\tthis.y=event.y;\r\n\tthis.context=context;\r\n\tthis.content=\"<div class='content'>\" + content + \"</div>\";\r\n    //this.placeholder.innerHTML =\"<div class='content'>\" + content + \"</div>\";\r\n    //attach event listeners\r\n    //this.attachEventListeners(context);\r\n}\t\r\n/*\r\nattachEventListeners(context){\r\n\t  var placeholder=document.getElementById('menu-items');\t\t  \r\n\t  var rows=placeholder.getElementsByTagName(\"table\")[0].rows;\r\n\t  var self=this;\r\n\t  for (var i = 0; i < rows.length; i++) {\r\n\t      //closure\t\t   \r\n\t      (function(row) {\r\n\t          row.addEventListener(\"click\", function() {\t    \t\t          \t    \t  \t\t        \t \r\n\t        \t  self.close();\t        \t  \r\n\t        \t  self.actionPerformed(row.id,context);\r\n\t          });\r\n\t      })(rows[i]);\r\n\t  }\r\n}\r\n*/\r\nactionPerformed(id,context){\r\n\tif(id==='sendbackid'){\r\n\t\tlet unitMgr = UnitMgr.getInstance();\r\n\t\tunitMgr.sendToBack(this.component.getModel().getUnit().shapes,context.target);\t\t\r\n\t\tthis.component.repaint();\r\n\t}\r\n\tif(id==='bringfrontid'){\r\n\t\tlet unitMgr = UnitMgr.getInstance();\t\t\r\n\t\tunitMgr.bringToFront(this.component.getModel().getUnit().shapes,context.target);\t\t\r\n\t\tthis.component.repaint();\r\n\t}\r\n\tif(id=='defaultbendid'){\r\n\t\tlet line =this.component.lineBendingProcessor.line;\r\n\t\tthis.component.lineBendingProcessor=new DefaultLineBendingProcessor();\r\n\t\tthis.component.lineBendingProcessor.initialize(line);\r\n\t}\t\r\n\tif (id==\"resumeid\") {\r\n\t        this.component.getView().setButtonGroup(core.ModeEnum.LINE_MODE);\r\n\t        this.component.setMode(core.ModeEnum.LINE_MODE);         \r\n\t        this.component.resumeLine(context.target,\"line\", {x:this.x, y:this.y,which:3});\r\n\t } \r\n\t if(id=='cancelid') {\r\n\t\t   this.component.getEventMgr().resetEventHandle();\r\n\t\t   context.target.setSelected(false);\r\n\t\t   this.component.getView().setButtonGroup(core.ModeEnum.COMPONENT_MODE);\r\n\t       this.component.setMode(core.ModeEnum.COMPONENT_MODE); \r\n\t       this.component.repaint();\r\n\t }\r\n     if (id==\"addbendingpointid\") {\r\n    \t let line=context.target;\r\n         line.insertPoint(this.x, this.y);\r\n         \r\n         this.component.repaint();\r\n         return;\r\n    }\t \r\n     if(id=='deletelastpointid') {\r\n        let line=context.target;\r\n        line.deleteLastPoint();\r\n\r\n        if (line.polyline.points.length == 1) {\r\n            //getUnitComponent().getModel().getUnit().registerMemento(getTarget().getState(MementoType.DELETE_MEMENTO));\r\n            this.component.getEventMgr().resetEventHandle();\r\n            this.component.getModel().getUnit().remove(line.uuid);\r\n        }\r\n\r\n         this.component.repaint();\r\n         return;\r\n     }\r\n     if(id=='deletebendingpointid'){\r\n    \t let line=context.target;\r\n    \t line.removePoint(this.x,this.y);\r\n         //***delete wire if one point remains only\r\n         if (line.getLinePoints().length == 1) {\r\n        \t this.component.getEventMgr().resetEventHandle();\r\n        \t this.component.getModel().getUnit().remove(line.uuid);\r\n         }\r\n         this.component.repaint();\r\n         return;\r\n     }\r\n     if (id==\"deletelineid\") {\r\n    \t let line=context.target;\r\n         //this.component.getModel().getUnit().registerMemento(getTarget().getState(MementoType.DELETE_MEMENTO));\r\n         this.component.getEventMgr().resetEventHandle();\r\n         this.component.getModel().getUnit().remove(line.uuid);\r\n         this.component.repaint();                    \r\n   } \r\n\t if(id=='topbottomid'||id=='leftrightid'){\r\n         let shapes= this.component.getModel().getUnit().getSelectedShapes(false);         \r\n         if(shapes.length==0){\r\n             return; \r\n         }\r\n         \r\n         let r=this.component.getModel().getUnit().getShapesRect(shapes);       \r\n         let unitMgr = UnitMgr.getInstance();\r\n         let p=this.component.getModel().getUnit().grid.positionOnGrid(r.center.x,r.center.y); \r\n         if(id=='topbottomid'){\r\n             unitMgr.mirrorBlock(shapes,new d2.Line(new d2.Point(p.x-10,p.y),new d2.Point(p.x+10,p.y)));\r\n         }else{\r\n             unitMgr.mirrorBlock(shapes,new d2.Line(new d2.Point(p.x,p.y-10),new d2.Point(p.x,p.y+10)));\r\n         }         \r\n         unitMgr.alignBlock(this.component.getModel().getUnit().grid,shapes);\r\n         this.component.repaint();\t\t \r\n\t }\t\r\n\t if(id=='rotaterightid'||id=='rotateleftid'){\r\n         let shapes= this.component.getModel().getUnit().getSelectedShapes(false);         \r\n         if(shapes.length==0){\r\n             return; \r\n         }         \r\n         let r=this.component.getModel().getUnit().getShapesRect(shapes);       \r\n         let unitMgr = UnitMgr.getInstance();\r\n         \r\n         unitMgr.rotateBlock(shapes,{origin:r.center,angle:(id==(\"rotateleftid\")?1:-1)*(90.0)});         \r\n         unitMgr.alignBlock(this.component.getModel().getUnit().grid,shapes);\r\n         this.component.repaint();\t\t \r\n\t }\r\n\t if(id=='positiontocenterid'){\r\n\t     let unit=this.component.getModel().getUnit();           \r\n\t     let rect =unit.getBoundingRect();\r\n\t    \r\n\t     let x=rect.center.x;\r\n\t     let y=rect.center.y;\r\n\t     \r\n\t     let unitMgr = UnitMgr.getInstance();\r\n\t     \r\n\t     unitMgr.moveBlock(unit.shapes, (unit.width/2)-x, (unit.height/2)-y);\r\n\t     unitMgr.alignBlock(unit.grid,unit.shapes);\r\n\t      \r\n\t     //scroll to center\r\n\t     this.component.setScrollPosition((unit.width/2), (unit.height/2));\r\n\t     this.component.repaint();\r\n\t }\r\n\t if(id=='deleteunit'){\r\n         this.component.getModel().delete(this.component.getModel().getUnit().getUUID());\r\n         if (this.component.getModel().unitsmap.size> 0) {\r\n        \t this.component.getModel().setActiveUnit(0);\r\n        \t this.component.getModel().fireUnitEvent({target:this.component.getModel().getUnit(),type:Event.SELECT_UNIT});\r\n         }else{\r\n        \t this.component.clear();\r\n        \t this.component.fireContainerEvent({target:null, type:Event.DELETE_CONTAINER});\r\n         }\r\n         this.component.repaint();  \r\n\t }\r\n     if (id=='deleteid') {\r\n    \t let unit=this.component.getModel().getUnit(); \r\n    \t let unitMgr = UnitMgr.getInstance();        \r\n         unitMgr.deleteBlock(unit,unit.getSelectedShapes(false));\r\n         this.component.repaint();                     \r\n     } \r\n\t if(id=='cloneid'){\r\n\t\t let unit=this.component.getModel().getUnit();  \r\n\t\t let unitMgr = UnitMgr.getInstance();\r\n         unitMgr.cloneBlock(unit,unit.getSelectedShapes(true));\r\n         let shapes= unit.getSelectedShapes(false); \r\n         let r=unit.getShapesRect(shapes);\r\n         unitMgr.moveBlock(shapes,\r\n                              r.width,r.height);\r\n         unitMgr.alignBlock(unit.grid,shapes);\r\n         \r\n         this.component.repaint();\r\n         //***emit property event change\r\n         if (shapes.length == 1) {            \r\n\t       unit.fireShapeEvent({target:shapes[0],type:Event.SELECT_SHAPE});\r\n         }             \r\n         return; \t\t \r\n\t }\r\n\t if(id=='selectallid'){ \r\n\t     this.component.getModel().getUnit().setSelected(true);\r\n\t     this.component.repaint();  \r\n\t }\t\r\n}\r\n}\r\n\r\nmodule.exports ={\r\n\t\t   ContextMenu\r\n}","var core=require('core/core');\r\nvar utilities =require('core/utilities');\r\nvar d2=require('d2/d2');\r\nvar font = require('core/text/d2font');\r\n\r\n\r\nconst ResumeState = Object.freeze({\r\n\tADD_AT_FRONT:0,\r\n\tADD_AT_END:1\r\n})\r\nclass Shape{\r\n\tconstructor(x, y, width, height, thickness,\r\n\t\t\tlayermaskId) {\r\n\t\tthis.owningUnit=null;\r\n\t\tthis.uuid = core.UUID();\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.thickness = thickness;\r\n\t\tthis.selection = false;\r\n\t\tthis.displayName = \"noname\";\r\n\t\tthis.fill = Fill.EMPTY;\r\n\t\tthis.fillColor;\t\t \r\n\t\tthis.isControlPointVisible=true;\r\n\t\tthis.copper = core.Layer.Copper.resolve(layermaskId);\r\n\t\tthis.rotation=0;\r\n\t}\r\ngetCenter(){\r\n\treturn new d2.Point(this.x,this.y);\r\n}\t\r\nsetDisplayName(displayName) {\r\n\t\tthis.displayName = displayName;\r\n\t}\r\nclear() {\r\n    this.owningUnit=null;\r\n\t}\r\nclone() {\r\n\tcopy=new Shape(this.x,this.y,this.width,this.height,this.layermask);\r\n\tcopy.fill=this.fill;\t\r\n\treturn copy;\r\n\t}\r\nalignToGrid(isRequired) {\r\n        let point=this.owningUnit.getGrid().positionOnGrid(this.getX(), this.getY());\r\n        this.setX(point.x);\r\n        this.setY(point.y);      \r\n        return null;\r\n}\r\nsetX(x) {\r\n\t\tthis.x = x;\r\n\t}\r\ngetX() {\r\n\t\treturn this.x;\r\n\t}\r\nsetY(y) {\r\n\t\tthis.y = y;\r\n\t}\r\ngetY() {\r\n\t\treturn this.y;\r\n\t}\r\nsetWidth(width) {\r\n\t\tthis.width = width;\r\n\t}\r\ngetWidth() {\r\n\t\treturn this.width;\r\n\t}\r\nsetHeight (height) {\r\n\t\tthis.height = height;\r\n\t}\r\ngetHeight() {\r\n\t\treturn this.height;\r\n\t}\r\ngetDrawingLayerPriority() {\r\n    return 100;\r\n}\r\ngetClickableOrder() {\r\n\t\treturn 100;\r\n}\r\ngetUUID() {\r\n\t\treturn this.uuid;\r\n\t}\r\ncalculateShape() {\r\n\r\n\t}\r\nisVisibleOnLayers(layermasks){\r\n    if((this.copper.getLayerMaskID()&layermasks)!=0){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\nisInRect(r){\r\n\tlet rect=this.getBoundingShape();\r\n        if(r.contains(rect.center))\r\n            return true;\r\n           else\r\n            return false; \t\t\r\n\t}\r\nisClicked(x,y) {\r\n        let r=this.getBoundingShape();\r\n        if(r.contains(x,y))\r\n         return true;\r\n        else\r\n         return false;           \r\n}\r\nisClickedOnLayers(x, y, layermasks) {        \r\n  return this.isClicked(x, y);\r\n}\r\ngetBoundingShape() {\r\n\treturn this.calculateShape();\r\n\t}\r\nsetState(memento) {\r\n   memento.loadStateTo(this);\r\n} \r\nsetSelected (selection) {\r\n\t\tthis.selection = selection;\r\n\t}\r\nisSelected() {\r\n\t\treturn this.selection;\r\n\t}\r\n\r\nmove(xoffset,yoffset) {\r\n      this.setX(this.getX() + xoffset);\r\n      this.setY(this.getY() + yoffset);    \r\n}\r\n\r\nmirror(line) {\r\n\r\n}\r\nsetSide(side, line, angle) {\r\n    this.copper=(core.Layer.Side.change(this.copper.getLayerMaskID()));\r\n    this.mirror(line);\r\n    this.rotation=angle;\r\n}     \r\n\r\nrotate(rotation) {\r\n//\t\tlet point = new Point(this.getX(), this.getY());\r\n//\t\tpoint = utilities.rotate(point, rotation.originx,rotation.originy, rotation.angle);\r\n//\t\r\n//        this.x=(point.x);\r\n//        this.y=(point.y);\r\n}\t\r\nfromXML(data) {\r\n\r\n\t}\r\n\r\n} \r\n\r\n/**********************Ruler**********************************/\r\nclass Ruler extends Shape{\r\nconstructor () {\r\n\tsuper(0, 0, 0, 0, 0, 0);\r\n    this.text=new font.FontTexture('label','',0,0,core.MM_TO_COORD(1),0);\r\n    this.text.constSize=true;\r\n    this.text.fillColor='white';        \r\n\tthis.resizingPoint=null;\r\n}\r\nResize( xOffset, yOffset) {\r\n    this.resizingPoint.set(this.resizingPoint.x+xOffset,this.resizingPoint.y+yOffset);\r\n    this.text.shape.anchorPoint.set(this.resizingPoint.x, this.resizingPoint.y);\r\n}\t\r\npaint( g2,  viewportWindow,  scale) {        \r\n\t\tif(this.resizingPoint==null){\r\n            return;\r\n        }\r\n        this.text.setText(parseFloat(core.COORD_TO_MM(this.resizingPoint.distanceTo(new d2.Point(this.x,this.y)))).toFixed(4)+' MM');\r\n                \r\n        this.text.paint(g2, viewportWindow, scale);\r\n        let line=new d2.Segment(this.x,this.y,this.resizingPoint.x,this.resizingPoint.y);\r\n\r\n        g2.strokeStyle  = 'white';\r\n\t\tg2.lineWidth=1; \r\n        \r\n        line.scale(scale.getScale());\r\n        line.move(-viewportWindow.x,-viewportWindow.y);\r\n        line.paint(g2);\r\n\t\t\r\n    }\t\r\n}\r\n/**********************Coordinate System**********************************/\r\nclass CoordinateSystem extends Shape {\r\n\tconstructor (owningUnit) {\r\n\t\tsuper(0, 0, 0, 0, 0, 0);\r\n\t\tthis.owningUnit=owningUnit;\r\n        this.selectionRectWidth=3000;\t\t\r\n\t}\r\nalignToGrid(isRequired) {\r\n    if(isRequired){\r\n           return super.alignToGrid(isRequired);\r\n    }else{\r\n          return null;\r\n    }\r\n}\r\ncalculateShape() {\r\n    return d2.Box.fromRect(this.x-this.selectionRectWidth/2,this.y-this.selectionRectWidth/2,this.selectionRectWidth,this.selectionRectWidth);\r\n}\r\nreset(x, y) {\r\n\t\tif (x < 0) {\r\n\t\t\tx = 0;\r\n\t\t} else if (x > this.owningUnit.getWidth()) {\r\n\t\t\tx = this.owningUnit.getWidth();\r\n\t\t}\r\n\t\tif (y < 0) {\r\n\t\t\ty = 0;\r\n\t\t} else if (y > this.owningUnit.getWidth()) {\r\n\t\t\ty = this.owningUnit.getWidth();\r\n\t\t}\r\n\t\tthis.x=x;\r\n\t\tthis.y=y;\r\n}\r\n\r\npaint(g2, viewportWindow, scale) {\r\n\t\tvar line = new d2.Segment(0,0,0,0);\t\t\r\n\r\n\t\tg2.strokeStyle  = 'blue';\r\n\t\tg2.lineWidth=1; \r\n\t\r\n\r\n\t\tline.set(0, this.y, this.owningUnit.getWidth(),\r\n\t\t\t\tthis.y);\r\n\t\tline.scale(scale.getScale());\r\n\t\tline.move(-viewportWindow.x,- viewportWindow.y);\r\n\t    line.paint(g2);\r\n\t    \r\n\t\r\n\t\tline.set(this.x, 0, this.x, this.owningUnit.getHeight());\r\n\t\tline.scale(scale.getScale());\r\n\t\tline.move(-viewportWindow.x,- viewportWindow.y);\t\t\r\n\t\tline.paint(g2);\r\n\t}\r\n}\r\nclass AbstractLine extends Shape{\r\n\tconstructor(thickness,layermaskId) {\r\n\t\tsuper(0, 0, 0, 0, thickness,layermaskId);\r\n\t\tthis.selectionRectWidth = 3000;\r\n\t\tthis.setDisplayName(\"Line\");\t\t\t\r\n\t\tthis.polyline=new d2.Polyline();\r\n\t\tthis.floatingStartPoint = new d2.Point(); // ***the\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// wire\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// point\r\n\t\tthis.floatingMidPoint = new d2.Point(); // ***mid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 90\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// degree\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// forming\r\n\t\tthis.floatingEndPoint = new d2.Point();\r\n\t\t//this.rotation=0;\r\n\t    this.resumeState=core.ResumeState.ADD_AT_END;\r\n\t\t\r\n}\r\nget vertices(){\r\n\t  return this.polyline.points;\t\r\n\t}\t\r\ngetLinePoints(){\r\n\t\treturn this.polyline.points;\r\n\t}\r\nclear(){\r\n\t\tthis.polyline.points=null;\t\t\r\n\t}\r\nalignResizingPointToGrid(targetPoint) {\r\n    this.owningUnit.grid.snapToGrid(targetPoint);         \r\n}\r\ngetClickableOrder(){\r\n\treturn 2;\r\n}\r\nisSegmentClicked(pt){\t\t\t\t      \r\n\t  if(this.isControlRectClicked(pt.x,pt.y))\r\n          return false;\r\n      if(this.polyline.isPointOnSegment(pt,this.selectionRectWidth/2)){\r\n\t    return true;\r\n      }\r\n\t  return false\r\n\t}\r\ngetSegmentClicked(pt){\r\n\t\t      let segment=new d2.Segment(0,0,0,0);\t   \r\n\t          let prevPoint = this.polyline.points[0];        \r\n\t          for(let point of this.polyline.points){    \t        \t  \r\n\t              if(prevPoint.equals(point)){    \t            \t  \r\n\t            \t  prevPoint = point;\r\n\t                  continue;\r\n\t              }    \t              \t              \r\n                  segment.ps=prevPoint;\r\n                  segment.pe=point;\r\n\t              if(segment.isPointOn(pt,this.selectionRectWidth)){\r\n\t                  return segment\r\n\t              }\r\n\t              prevPoint = point;\r\n\t          }\t\t\t       \t          \r\n\t       return null;\r\n}\r\n/*\r\ngetSegments(){\r\n    let list=[];\r\n    let prevPoint = this.polyline.points[0];        \r\n    for(let point of this.polyline.points){                          \r\n        if(prevPoint.equals(point)){                        \r\n            prevPoint = point;\r\n            continue;\r\n        }                       \r\n        list.push(new d2.Segment(prevPoint.x,prevPoint.y,point.x,point.y));\r\n        \r\n        prevPoint = point;\r\n    }\r\n    return list;         \r\n}\r\n*/\r\nisSingleSegment(){\r\n   return this.polyline.points.length==2;\t\r\n}\r\nisClicked(x, y) {\r\n\t return this.polyline.isPointOn({\"x\":x,\"y\":y},this.thickness<4?4:this.thickness);\r\n}\r\nadd(x,y){\r\n    if(this.resumeState==ResumeState.ADD_AT_FRONT)\r\n        this.polyline.points.unshift(new d2.Point(x,y));        \r\n    else\r\n        this.polyline.add(x,y);  \t\r\n}\r\naddPoint(point) {\r\n    this.add(point.x,point.y);\t\r\n}\r\n\r\nreset(...args) {\r\n   if(args.length==0){\r\n\tthis.floatingStartPoint.set(this.floatingStartPoint);\r\n\tthis.floatingMidPoint.set(this.floatingStartPoint);\r\n\tthis.floatingEndPoint.set(this.floatingStartPoint);\t  \r\n   }else{\t\r\n\tthis.floatingStartPoint.set(args[0]);\r\n\tthis.floatingMidPoint.set(args[0]);\r\n\tthis.floatingEndPoint.set(args[0]);\r\n   }\r\n}\r\n\r\nResize(xoffset, yoffset, clickedPoint) {\t\r\n\tclickedPoint.set(clickedPoint.x + xoffset,\r\n\t\t\t\t\t\t\t\tclickedPoint.y + yoffset);\r\n}\r\nresumeLine( x,  y) {        \r\n    //the end or beginning\r\n    if (this.polyline.points.length ==0) {\r\n      this.resumeState=core.ResumeState.ADD_AT_END;\r\n      return;\r\n    }\r\n    \r\n    let point=this.isBendingPointClicked(x, y);\r\n    if(point==null){\r\n        this.resumeState=code.ResumeState.ADD_AT_END;\r\n    }\r\n    //***head point\r\n    if (this.polyline.points[0].x==point.x&&this.polyline.points[0].y==point.y) {\r\n        this.resumeState=core.ResumeState.ADD_AT_FRONT;\r\n    }\r\n    //***tail point\r\n    if (this.polyline.points[this.polyline.points.length - 1].x==point.x&& this.polyline.points[this.polyline.points.length - 1].y==point.y) {\r\n        this.resumeState=core.ResumeState.ADD_AT_END;\r\n    }        \r\n    \r\n    if(this.resumeState==ResumeState.ADD_AT_FRONT)\r\n       this.reset(this.polyline.points[0]);\r\n    else\r\n       this.reset(this.polyline.points[this.polyline.points.length-1]);\r\n}\r\nshiftFloatingPoints(){\r\n    if(this.resumeState==ResumeState.ADD_AT_FRONT){\r\n        this.floatingStartPoint.set(this.polyline.points[0].x,this.polyline.points[0].y);\r\n        this.floatingMidPoint.set(this.floatingEndPoint.x, this.floatingEndPoint.y);                  \r\n    }else{\r\n    \tthis.floatingStartPoint.set(this.polyline.points[this.polyline.points.length-1].x, this.polyline.points[this.polyline.points.length-1].y);\r\n        this.floatingMidPoint.set(this.floatingEndPoint.x, this.floatingEndPoint.y); \t    \r\n    }\r\n\t    \r\n}\r\ninsertPoint( x, y) {\r\n       let rect = d2.Box.fromRect(x - (this.thickness / 2), y- (this.thickness / 2), this.thickness,this.thickness);             \r\n       let count=-1,index=-1;\r\n        \r\n        \r\n        //***make lines and iterate one by one\r\n        let prevPoint =this.polyline.points[0];        \r\n        for(let point of this.polyline.points) {\r\n            count++;                     \r\n            if (utilities.intersectLineRectangle(prevPoint,point, rect.min, rect.max)) {\t\t            \r\n                index=count;\r\n                break;\r\n            }    \r\n            prevPoint = point;\r\n        }        \r\n        if(index!=-1){\r\n           this.polyline.points.splice(index,0, new d2.Point(x,y)); \r\n        }\r\n\t\r\n/*    \r\n    let flag = false;\r\n    let point = this.owningUnit.grid.positionOnGrid(x, y);\r\n\r\n    var rect = new core.Rectangle(x - this.owningUnit.grid.getGridPointToPoint(),\r\n                      y - this.owningUnit.grid.getGridPointToPoint() ,\r\n                      2*this.owningUnit.grid.getGridPointToPoint(),\r\n                      2*this.owningUnit.grid.getGridPointToPoint());\r\n\r\n    let line = new core.Line();\r\n\r\n\r\n    let tmp = new core.Point(point.x, point.y);\r\n    let midium = new core.Point();\r\n\r\n    //***add point to the end;\r\n    this.points.push(point);\r\n\r\n    let prev = this.points[0];\r\n    this.points.forEach(function(next){\r\n        if(prev!=next){\r\n    \t if (!flag) {\r\n            //***find where the point is - 2 points between the new one\r\n            line.setLine(prev.x,prev.y, next.x,next.y);\r\n            if (line.intersectRect(rect))\r\n                flag = true;\r\n         } else {\r\n            midium.setLocationPoint(tmp); //midium.setPin(tmp.getPin());\r\n            tmp.setLocationPoint(prev); //tmp.setPin(prev.getPin());\r\n            prev.setLocationPoint(midium); //prev.setPin(midium.getPin());\r\n         }\r\n        }\r\n        prev = next;\r\n    });\r\n    if (flag)\r\n        prev.setLocationPoint(tmp); //prev.setPin(tmp.getPin());\r\n*/\r\n}\r\nremovePoint(x, y) {\r\n    let point = this.isBendingPointClicked(x, y);\r\n    if (point != null) {\r\n    \t\r\n    \tvar tempArr = this.polyline.points.filter(function(item) { \r\n    \t    return item !== point;\r\n    \t});\r\n        \r\n    \tthis.polyline.points=tempArr;\r\n    }\r\n}\r\ndeleteLastPoint() {\r\n\tif (this.polyline.points.length == 0)\r\n\t\treturn;\r\n\r\n    if(this.resumeState==ResumeState.ADD_AT_FRONT){\r\n        this.polyline.points.shift();\r\n    }else{   \r\n        this.polyline.points.pop();\r\n    }\t\r\n\t// ***reset floating start point\r\n\tif (this.polyline.points.length > 0)\r\n\t\t\t\t\tthis.floatingStartPoint\r\n\t\t\t\t\t\t\t\t\t.set(this.polyline.points[this.polyline.points.length - 1]);    \r\n}\r\nisEndPoint(x,y){\r\n    if (this.polyline.points.length< 2) {\r\n        return false;\r\n    }\r\n\r\n    let point = this.isBendingPointClicked(x, y);\r\n    if (point == null) {\r\n        return false;\r\n    }\r\n    //***head point\r\n    if (this.polyline.points[0].x == point.x && this.polyline.points[0].y == point.y) {\r\n        return true;\r\n    }\r\n    //***tail point\r\n    if ((this.polyline.points[this.polyline.points.length - 1].x == point.x )&& (this.polyline.points[this.polyline.points.length - 1].y == point.y)) {\r\n        return true;\r\n    }\r\n    return false;\t\r\n}\r\ngetEndPoint(x,y){\r\n    if (this.polyline.points.length< 2) {\r\n        return null;\r\n    }\r\n\r\n    let point = this.isBendingPointClicked(x, y);\r\n    if (point == null) {\r\n        return null;\r\n    }\r\n    //***head point\r\n    if (this.polyline.points[0].x == point.x && this.polyline.points[0].y == point.y) {\r\n    \treturn this.polyline.points.get(0);\r\n    }\r\n    //***tail point\r\n    if ((this.polyline.points[this.polyline.points.length - 1].x == point.x )&& (this.polyline.points[this.polyline.points.length - 1].y == point.y)) {\r\n    \treturn (this.polyline.points.get(this.polyline.points.size() - 1));\r\n    }\r\n    return false;\t\t\r\n}\r\nisInRect(r) {\r\n\tvar result = true;\r\n\tthis.polyline.points.some(function(wirePoint) {\r\n\t\t\tif (!r.contains(wirePoint)) {\r\n\t\t\t\tresult = false;\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t  return false;\r\n\t\t\t}\r\n\t});\r\n\treturn result;\r\n}\r\nsetSelected(selection) {\r\n     super.setSelected(selection);\r\n     if (!selection) {\r\n        this.resizingPoint = null;\r\n     }\r\n}\r\nisBendingPointClicked( x,  y) {\r\n\tvar rect = d2.Box.fromRect(x\r\n\t\t\t- this.selectionRectWidth / 2, y - this.selectionRectWidth\r\n\t\t\t/ 2, this.selectionRectWidth, this.selectionRectWidth);\r\n\r\n    let point = null;\r\n\r\n\tthis.polyline.points.some(function(wirePoint) {\r\n\t\tif (rect.contains(wirePoint.x, wirePoint.y)) {\r\n\t\t\t\t\tpoint = wirePoint;\r\n\t\t  return true;\r\n\t\t}else{\r\n\t\t  return false;\r\n\t\t}\r\n\t});\r\n\r\n\treturn point;\r\n}\r\nisControlRectClicked(x, y) {\r\n\treturn this.isBendingPointClicked(x,y);\r\n\t/*\r\n\tvar rect = d2.Box.fromRect(x-this.selectionRectWidth / 2, y - this.selectionRectWidth/ 2, this.selectionRectWidth, this.selectionRectWidth);\r\n\tlet point = null;\r\n\r\n\tthis.polyline.points.some(function(wirePoint) {\r\n\t\tif (rect.contains(wirePoint)) {\r\n\t\t\t\t\tpoint = wirePoint;\r\n\t\t  return true;\r\n\t\t}else{\r\n\t\t  return false;\r\n\t\t}\r\n\t});\r\n\r\n\treturn point;\r\n\t*/\r\n}\r\n\r\nmove(xoffset, yoffset) {\r\n\tthis.polyline.move(xoffset,yoffset);\r\n}\r\nmirror(line) {\r\n    this.polyline.mirror(line);\r\n}\r\nsetRotation(rotate,center){\r\n\tlet alpha=rotate-this.rotation;\r\n\tlet box=this.polyline.box;\r\n\tif(center==undefined){\r\n\t\tthis.polyline.rotate(alpha,box.center);\r\n\t}else{\r\n\t\tthis.polyline.rotate(alpha,center);\t \t\r\n\t}\r\n\tthis.rotation=rotate;\r\n}\r\nrotate(rotation) {\r\n\t//fix angle\r\n\tlet alpha=this.rotation+rotation.angle;\r\n\tif(alpha>=360){\r\n\t  alpha-=360\r\n\t}\r\n\tif(alpha<0){\r\n\t alpha+=360; \r\n\t}\t\r\n\tthis.rotation=alpha;\t\r\n\tthis.polyline.rotate(rotation.angle,rotation.origin);\r\n}\r\ncalculateShape() {\r\n\treturn this.polyline.box;\r\n}\r\n\r\n\r\ndrawControlShape(g2, viewportWindow, scale) {\r\n\tutilities.drawCrosshair(g2,viewportWindow,scale,this.resizingPoint,(this.selectionRectWidth),this.polyline.points);\t\r\n}\r\n\r\nisFloating() {\r\n\treturn (!(this.floatingStartPoint\r\n\t\t\t\t\t\t\t\t.equals(this.floatingEndPoint) && this.floatingStartPoint\r\n\t\t\t\t\t\t\t\t.equals(this.floatingMidPoint)));\r\n}\r\ngetResizingPoint() {\r\n\treturn this.resizingPoint;\r\n}\r\n\r\nsetResizingPoint(point) {\r\n\tthis.resizingPoint = point;\r\n}\r\n\r\n\r\n\r\n}\r\nmodule.exports ={\r\n\t\tShape,\r\n\t\tCoordinateSystem,\r\n\t\tRuler,\r\n\t\tAbstractLine,\r\n\t\tResumeState\r\n}","var d2=require('d2/d2');\r\n//class TextureCache{\r\n//\tconstructor(shape) {\r\n//\t\tthis.shape=shape;\r\n//\t\tthis.rotation=0;\r\n//\t\tthis.fontSize=0;\r\n//\t\tthis.text=0;\r\n//\t}\r\n//\treset(shape,fontSize,text,rotation){\r\n//\t\tthis.shape=shape;\r\n//\t\tthis.rotation=rotation;\r\n//\t\tthis.fontSize=fontSize;\r\n//\t\tthis.text=text;\r\n//\t\r\n//\t}\r\n//}\r\nclass FontTexture{\r\n constructor(text,tag,x,y,fontSize,rotation) {\r\n    this.tag=tag;\r\n\tthis.shape=new d2.FontText(x,y,text,fontSize,rotation);    \r\n\tthis.selection=false;\r\n\tthis.selectionRectWidth=3000;\r\n\tthis.constSize=false;\r\n\tthis.fillColor='#ffffff'; \r\n    this.shape.style='plain';\r\n    this.isTextLayoutVisible=false;\r\n\t//this.cache=new TextureCache(this);\r\n }\r\nclone(){\r\n     var copy=new FontTexture(this.shape.text,this.tag,this.shape.anchorPoint.x,this.shape.anchorPoint.y,this.shape.fontSize,this.shape.rotation);     \r\n     copy.fillColor=this.fillColor;\r\n     copy.shape.style=this.shape.style;\r\n     copy.isTextLayoutVisible=this.isTextLayoutVisible;\r\n     return copy;\t \r\n } \r\nisEmpty() {\r\n     return this.shape.text==null||this.shape.text.length==0;\r\n }\r\nisClicked(x,y){\r\n    if (this.shape.text == null || this.shape.text.length == 0){\r\n        return false;\r\n    } \r\n    return this.shape.contains(new d2.Point(x,y));\r\n    \r\n}\r\ngetBoundingRect(){\r\n    if (this.shape.text == null || this.shape.text.length == 0){\r\n        return null;\r\n    } \r\n    let box=this.shape.box;\r\n    let rect= new d2.Rectangle(box.x,box.y,box.width,box.height);\r\n    rect.rotate(this.shape.rotation,this.shape.anchorPoint);\r\n    return rect;\r\n}\r\ngetBoundingShape() {\r\n    if (this.shape.text == null || this.shape.text.length == 0) {\r\n          return null;\r\n    }\r\n     return this.shape.box;\r\n}\r\nsetLocation(x,y){\r\n\tthis.shape.setLocation(x,y);\r\n}\r\nsetText(text){\r\n\tthis.shape.setText(text);\r\n}\r\nsetSize(size){\r\n\tthis.shape.setSize(size);\r\n}\r\nsetRotation(rotate,pt){\t\r\n  this.shape.rotate(rotate,pt);\r\n}\r\nmove(xoffset, yoffset){\r\n   this.shape.move(xoffset, yoffset);  \r\n}\r\nsetSide(side,  line,  angle) { \r\n    this.shape.mirror(line); \r\n    this.shape.rotation=angle;\r\n}\r\nsetSelected(selection){\r\n\tthis.selection=selection;\r\n}\r\npaint(g2,viewportWindow,scale){\r\n\t if(this.isEmpty()){\r\n\t   return;\t \r\n\t }\r\n\t if(this.constSize){\r\n\t   g2.font = \"\"+parseInt(this.shape.fontSize)+\"px Monospace\";\r\n\t }else{\t \r\n\t\t if(this.shape.fontSize*scale.getScale()<8){\r\n\t\t\t return;\r\n\t\t }\r\n\t\t g2.font = \"\"+parseInt(this.shape.fontSize*scale.getScale())+\"px Monospace\";\r\n\t }\r\n\t g2.fillStyle = this.fillColor;\r\n\t \r\n\t \r\n//     let t=this.shape.clone();\r\n//     t.scale(scale.getScale());\r\n//     t.move(-viewportWindow.x,- viewportWindow.y);     \r\n//     t.paint(g2);\r\n  \r\n\t this.shape.scalePaint(g2,viewportWindow,scale.getScale());\r\n\t if(this.isTextLayoutVisible){\r\n\t\tlet box=this.getBoundingRect();\r\n\t  \tbox.scale(scale.getScale());\r\n\t  \tbox.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tg2.lineWidth =1;\r\n \t\tg2.strokeStyle = 'blue';\r\n\t  \tbox.paint(g2);\r\n\t }\r\n     if(this.selection){\r\n \t\t g2.lineWidth =1;\r\n \t\t g2.strokeStyle = 'blue';\r\n \t\t let p=this.shape.anchorPoint.clone();\r\n         p.scale(scale.getScale());\r\n         p.move(-viewportWindow.x,- viewportWindow.y);\r\n         p.paint(g2);    \t \r\n     }\r\n\t\r\n}\r\ntoXML(){\r\n    return (this.text==\"\" ? \"\" :\r\n        this.shape.text + \",\" + utilities.roundFloat(this.shape.anchorPoint.x,3) + \",\" + utilities.roundFloat(this.shape.anchorPoint.y,3) +\r\n        \",,PLAIN,\"+this.shape.fontSize+\",\" +this.shape.rotation);\t \r\n}\r\nfromXML(node){\r\n    if (node == null || node.length==0) {\r\n        this.text = \"\";\r\n        return;\r\n    }\r\n    var tokens=node.split(',');\r\n    this.shape.anchorPoint.set(parseInt(tokens[1]),\r\n            parseInt(tokens[2]));     \r\n    \r\n    this.shape.setText(tokens[0]);\r\n    this.shape.setSize(parseInt(tokens[5]));\r\n    this.shape.rotate(parseFloat(tokens[6])||0);\r\n    \r\n}\r\n}\r\nTextAlignment={\r\n\t\t  RIGHT:0,\r\n\t\t  TOP:1,\r\n\t\t  LEFT:2,\r\n\t\t  BOTTOM:3,\r\n\t\t  parse:function(align){\r\n\t\t\t  switch(align){\r\n\t\t\t  case 'LEFT':\r\n\t\t\t\t     return this.LEFT;\r\n\t\t\t  case 'RIGHT':\r\n\t\t\t\t\t return this.RIGHT; \r\n\t\t\t  case 'TOP':\r\n\t\t\t\t\t return this.TOP;\r\n\t\t\t  case 'BOTTOM':\r\n\t\t\t\t\t return this.BOTTOM;\t\t\t \r\n\t\t\t  default:\r\n\t\t\t\t  throw new TypeError('Unrecognized align type:'+align+' to parse');  \r\n\t\t\t  } \t  \r\n\t\t  },\r\n\t\t  mirror:function(align,isHorizontal){\t          \t               \t                 \r\n\t               if(isHorizontal){\r\n\t                   if(align==this.LEFT)\r\n\t                     return this.RIGHT;\r\n\t                   else if(align==this.RIGHT)\r\n\t                     return this.LEFT;\r\n\t                   else\r\n\t                     return align;\r\n\t                  }else{\r\n\t                   if(align==this.BOTTOM)\r\n\t                     return this.TOP;\r\n\t                   else if(align==this.TOP)\r\n\t                     return this.BOTTOM;\r\n\t                   else\r\n\t                     return align;  \r\n\t                  }  \r\n\t\t  },\r\n\t      rotate:function(align,isClockwise){       \r\n\t           if(align==this.LEFT){\r\n\t              if(isClockwise)\r\n\t                return this.TOP;\r\n\t              else\r\n\t                return this.BOTTOM;\r\n\t           }else if(align==this.RIGHT){\r\n\t                if(isClockwise)\r\n\t                  return this.BOTTOM;\r\n\t                else\r\n\t                  return this.TOP;           \r\n\t            }else if(align==this.TOP){\r\n\t               if(isClockwise) \r\n\t                   return this.RIGHT;\r\n\t               else\r\n\t                   return this.LEFT;           \r\n\t               }               \r\n\t               else if(align==this.BOTTOM){\r\n\t                if(isClockwise)\r\n\t                    return this.LEFT;\r\n\t                else\r\n\t                   return this.RIGHT;\r\n\t               }\r\n\t                      \r\n\t      },\t\t  \r\n\t      getOrientation:function(align){\r\n\t    \t  if(align==0||align==2){\r\n\t    \t\treturn  TextOrientation.HORIZONTAL; \r\n\t    \t  }else{\r\n\t    \t\treturn  TextOrientation.VERTICAL;  \r\n\t    \t  }\r\n\t           \r\n\t      },\r\n\t\t  from:function(align){\r\n\t\t\t switch(align){\r\n\t\t\t case 0:return 'RIGHT';\r\n\t\t\t case 1:return 'TOP';\r\n\t\t\t case 2:return 'LEFT';\r\n\t\t\t case 3:return 'BOTTOM';\r\n\t\t\t } \r\n\t\t  }\r\n}\r\nTextOrientation={\r\n        HORIZONTAL:0,\r\n        VERTICAL:1,        \r\n}\r\n\r\n\r\nclass SymbolFontTexture{\r\n\tconstructor(text,tag,x,y,alignment,fontSize) {\r\n\t    this.tag=tag;\r\n\t\tthis.shape=new d2.BaseFontText(x,y,text,alignment,fontSize);    \r\n\t\tthis.selection=false;\r\n\t\tthis.selectionRectWidth=3000;\r\n\t\tthis.constSize=false;\t\t    \r\n\t\tthis.selectionRectWidth=4;\r\n\t\tthis.fillColor='#000000';\r\n\t    this.isTextLayoutVisible=false;\r\n\t}\r\n\tclone(){\r\n\t    var copy=new SymbolFontTexture(this.shape.text,this.tag,this.shape.anchorPoint.x,this.shape.anchorPoint.y,this.shape.alignment,this.shape.fontSize);     \r\n\t    copy.fillColor=this.fillColor;\r\n\t    copy.shape.style=this.shape.style;\r\n\t    return copy;\t \r\n\t} \r\n\tcopy( _copy){    \r\n\t    this.shape.anchorPoint.set(_copy.shape.anchorPoint.x,_copy.shape.anchorPoint.y); \r\n\t    this.shape.alignment = _copy.shape.alignment;\r\n\t    this.shape.text=_copy.shape.text;\r\n\t    this.shape.style=_copy.shape.style;\r\n\t    this.shape.rotation=_copy.shape.rotation;\r\n\t    this.fillColor=_copy.fillColor;\r\n\t    this.shape.setSize(_copy.shape.fontSize);                \r\n\t}\t\r\n\tisEmpty() {\r\n\t     return this.shape.text==null||this.shape.text.length==0;\r\n\t}\t\r\n\tisClicked(x,y){\r\n\t    if (this.shape.text == null || this.shape.text.length == 0){\r\n\t        return false;\r\n\t    } \r\n\t    return this.shape.box.contains(x,y);\r\n\t    \r\n\t}\t\r\n\tgetBoundingShape() {\r\n\t    if (this.shape.text == null || this.shape.text.length == 0) {\r\n\t          return null;\r\n\t    }\r\n\t    return this.shape.box;\r\n\t}\t\r\n\tsetText(text){\r\n\t\tthis.shape.setText(text);\r\n\t}\r\n\tsetSize(size){\r\n\t\tthis.shape.setSize(size);\r\n\t}\t\r\n\tsetSelected(selection){\r\n\t\tthis.selection=selection;\r\n\t}\t\r\n\tsetAlignment(align){\r\n\t\tthis.shape.alignment=align;\r\n\t}\r\n\tgetAlignment(){\r\n      return this.shape.alignment;\r\n\t}\t\r\n\trotate(rotation){\t\t   \r\n\t   this.shape.anchorPoint.rotate(rotation.angle,rotation.origin);\r\n\t   if(rotation.angle<0){  //clockwise\r\n\t\t   this.shape.alignment=TextAlignment.rotate(this.shape.alignment,true);\r\n\t   }else{\r\n\t\t   this.shape.alignment=TextAlignment.rotate(this.shape.alignment,false); \r\n\t   }\t\t\t \t\r\n\t\t\r\n\t}\r\n\t/*\r\n\t * Take into account text offset from anchro point when rotating\r\n\t */\r\n\tsetRotation(rotation){\r\n\t   let oldorientation=TextAlignment.getOrientation(this.shape.alignment);\t\r\n\t   this.rotate(rotation);\r\n\t   if(rotation.angle<0){  //clockwise\t\t   \r\n\t\t   if(oldorientation == TextOrientation.HORIZONTAL){\r\n\t\t\t   this.shape.anchorPoint.set(this.shape.anchorPoint.x+(this.shape.metrics.ascent-this.shape.metrics.descent),this.shape.anchorPoint.y);            \r\n\t\t   }\r\n\t\t}else{\t\t    \r\n\t\t   if(oldorientation == TextOrientation.VERTICAL){\r\n\t\t\t   this.shape.anchorPoint.set(this.shape.anchorPoint.x,this.shape.anchorPoint.y+(this.shape.metrics.ascent-this.shape.metrics.descent));\t           \r\n\t\t   }\r\n\t\t}\t\t\r\n\t}\r\n\tmirror(line){\r\n        let oldalignment = this.shape.alignment;\r\n        this.shape.mirror(line);\r\n        if (line.isVertical) { //right-left mirroring\r\n        \tthis.shape.alignment = TextAlignment.mirror(oldalignment,true);\r\n        } else { //***top-botom mirroring\r\n        \tthis.shape.alignment = TextAlignment.mirror(oldalignment,false);            \r\n        }\r\n\t}\r\n\tsetMirror(line){\r\n\t\tlet alignment = this.shape.alignment;       \r\n        this.mirror(line);      \r\n        if (line.isVertical) { //right-left mirroring\r\n            if (this.shape.alignment == alignment) { //same alignment\r\n                this.shape.anchorPoint.set(this.shape.anchorPoint.x +\r\n                                        (this.shape.metrics.ascent - this.shape.metrics.descent),this.shape.anchorPoint.y);\r\n            }\r\n        } else { //***top-botom mirroring          \r\n            if (this.shape.alignment == alignment) {\r\n                this.shape.anchorPoint.set(this.shape.anchorPoint.x,this.shape.anchorPoint.y +(this.shape.metrics.ascent - this.shape.metrics.descent));\r\n            }\r\n        } \t\t\r\n\t}\r\n\tmove(xoffset, yoffset){\r\n\t\tthis.shape.move(xoffset, yoffset);  \r\n\t}\r\n\tpaint(g2,viewportWindow,scale){\r\n\t\t if(this.isEmpty()){\r\n\t\t\t   return;\t \r\n\t\t\t }\r\n\t\t\t if(this.constSize){\r\n\t\t\t   g2.font = \"\"+parseInt(this.shape.fontSize)+\"px Monospace\";\r\n\t\t\t }else{\t \r\n\t\t\t\t if(this.shape.fontSize*scale.getScale()<8){\r\n\t\t\t\t\t return;\r\n\t\t\t\t }\r\n\t\t\t\t g2.font = \"\"+parseInt(this.shape.fontSize*scale.getScale())+\"px Monospace\";\r\n\t\t\t }\r\n\t\t\t \r\n\t\t\t g2.fillStyle =this.fillColor;\t\t\t \t\t\t \r\n\t\t\t this.shape.scalePaint(g2,viewportWindow,scale.getScale());\r\n\t\t\tif(this.isTextLayoutVisible){\r\n\t\t\t\tlet box=this.shape.box;\r\n\t\t\t  \tbox.scale(scale.getScale());\r\n\t\t\t  \tbox.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\t\t\tg2.lineWidth =1;\r\n\t\t \t\tg2.strokeStyle = 'blue';\r\n\t\t\t  \tbox.paint(g2);\r\n\t\t\t}\r\n\r\n\t     if(this.selection){\r\n\t \t\t g2.lineWidth =1;\r\n\t \t\t g2.strokeStyle = 'blue';\r\n\t \t\t let p=this.shape.anchorPoint.clone();\r\n\t         p.scale(scale.getScale());\r\n\t         p.move(-viewportWindow.x,- viewportWindow.y);\r\n\t         p.paint(g2);    \t \r\n\t     }\r\n\t\t\r\n\t}\t\r\n\tfromXML(node){\r\n\t    if (node == null || node.length==0) {\r\n\t        this.text = \"\";\r\n\t        return;\r\n\t    }\r\n\t    var tokens=node.split(',');\r\n\t    this.shape.alignment=(TextAlignment.parse(tokens[3]));\r\n\t    this.shape.setText(tokens[0]);\r\n\t    this.shape.anchorPoint.set(parseInt(tokens[1]),\r\n\t            parseInt(tokens[2]));  \r\n\t    if(tokens[4]){\r\n\t    \tthis.shape.style=tokens[4].toLowerCase();\t\r\n\t    }\r\n\t    if(tokens[5]){    \r\n\t    \tthis.shape.setSize(parseInt(tokens[5]));\r\n\t    }\r\n\r\n\t}\r\n\ttoXML(){\r\n\t    return (this.shape.text===\"\" ? \"\" :\r\n\t        this.shape.text + \",\" + utilities.roundFloat(this.shape.anchorPoint.x,1) + \",\" + utilities.roundFloat(this.shape.anchorPoint.y,1) +\r\n\t        \",\"+ TextAlignment.from(this.shape.alignment)+\",\"+this.shape.style.toUpperCase()+\",\"+this.shape.fontSize);\t\r\n\t}\r\n\t}\r\n\r\nvar core=require('core/core');\r\nvar utilities=require('core/utilities');\r\n\r\n\r\nmodule.exports ={\r\n   TextAlignment,TextOrientation,\r\n   FontTexture,\r\n   SymbolFontTexture\r\n}","var d2=require('d2/d2');\r\n\r\nclass Glyph{\r\n\r\n\tconstructor(){\r\n\t    this.character=null;\r\n\t    //distance to next symbol\r\n\t    this.delta=8;\r\n\t    this.segments=[];\r\n\t    \r\n\t    this.minx=0;\r\n\t\tthis.miny=0;\r\n\t    this.maxx=0;\r\n\t\tthis.maxy=0;  \r\n\t}\r\n\tclone(){\t        \r\n\t        var copy=new Glyph();\r\n\t        copy.segments=[];\r\n\t        for(let i=0;i<this.segments.length;i++){\r\n\t           copy.segments.push(this.segments[i].clone());           \r\n\t        }\r\n\t\t\tcopy.character=this.character;\r\n\t        copy.delta=this.delta;\r\n\t\t\t\r\n\t        copy.minx=this.minx;\r\n\t\t    copy.miny=this.miny;\r\n\t        copy.maxx=this.maxx;\r\n\t\t    copy.maxy=this.maxy;          \r\n\t        return copy;\r\n\t}\r\n\r\n\t    /*\r\n\t     * Enlarge to real size\r\n\t     * 200 1 mm \r\n\t     */\r\n\r\n\t    /*Height comes in mm!!!!!!!!!!!!!!!!!!!!\r\n\t     * assume that the step is 0.1(20)\r\n\t     */\r\n\tscale(size){                        \r\n\t        let ratio=20*((size*10));\r\n\t        for(let i=0;i<this.segments.length;i++){\r\n                 this.segments[i].scale(ratio);\r\n\t        }             \r\n\t        this.delta*=ratio;\r\n\t        this.resize();\r\n\t    }\r\n\t    //protected void \r\n\tresize(){\r\n\t        this.minx=Number.MAX_VALUE;\r\n\t        this.miny=Number.MAX_VALUE;\r\n\t        this.maxx=Number.MIN_VALUE;\r\n\t        this.maxy=Number.MIN_VALUE;\r\n\t        \r\n\t        \r\n\t        for(let i=0;i<this.segments.length;i++){\r\n\t        \tlet box=this.segments[i].box;\t            \r\n\t        \t\r\n\t            if(this.minx>box.min.x){\r\n\t                this.minx=box.min.x;\r\n\t            }\r\n\t            if(this.miny>box.min.y){\r\n\t                this.miny=box.min.y;\r\n\t            }\r\n\t            if(this.maxx<box.max.x){\r\n\t              this.maxx=box.max.x;\r\n\t            }\r\n\t            if(this.maxy<box.max.y){\r\n\t              this.maxy=box.max.y;\r\n\t            }            \r\n\t        }\r\n\t}\r\n\tmove(xoffset,yoffset){\r\n\t\tthis.segments.forEach(function(segment){\r\n\t\t\tsegment.move(xoffset,yoffset);\r\n\t\t});\r\n\t\tthis.resize();\r\n\t}\r\n\tget width(){\r\n\t return this.maxx-this.minx; \r\n\t}\r\n\t    \r\n\tget height(){\r\n\t return this.maxy-this.miny;  \r\n\t}\r\n\r\n\tsetSize(size){\r\n\t  this.resetGlyph(size); \r\n\t}\r\n    get box(){\r\n    \treturn new d2.Box(this.minx,this.miny,this.maxx,this.maxy);\r\n    }\r\n\tresetGlyph(size){\r\n\t        let glyph = GlyphManager.getInstance().getGlyph(this.character);    \r\n\t        for(let i=0;i<this.segments.length;i++){\r\n\t          this.segments[i].ps.set(glyph.segments[i].ps);\r\n\t          this.segments[i].pe.set(glyph.segments[i].pe);\r\n\t        }\r\n\t        this.scale(size);\r\n\t}\r\n\trotate(angle,pt) {\r\n\t        for(let i=0;i<this.segments.length;i++){\r\n\t        \tthis.segments[i].rotate(angle,pt);\t\t\t\t\t\t\r\n\t        }\r\n\t        this.resize();\r\n\t}\r\n\tmirror(line){\r\n        for(let i=0;i<this.segments.length;i++){\r\n        \tthis.segments[i].mirror(line);\t\t\t\t\t\t\r\n        }\r\n        this.resize();\r\n\t}\r\n\tfromXML(node){\r\n\t\tthis.character=j$(node).attr(\"char\");\r\n\t\tthis.delta=parseInt(j$(node).attr(\"delta\"));\t\t\r\n\t\tlet that=this;\r\n\r\n\t\tj$(node).children().each(function(){\r\n\r\n\t\t   let line=this.textContent;\r\n\t\t   let array=line.split(',');\r\n\t\t   that.segments.push(new d2.Segment(array[0],array[1],array[2],array[3]));\r\n\t\t});\r\n\t\t\r\n\t}\r\n}\r\n\r\nclass GlyphTexture{\r\n\tconstructor(text,tag, x,y,size){\t    \r\n\t\tthis.tag=tag;\r\n\t    this.id=1;\r\n\t\tthis.anchorPoint = new d2.Point(x, y);\r\n\t    this.glyphs = [];\r\n\t    this.thickness = core.MM_TO_COORD(0.2);\t    \r\n\t\t\r\n\t    this.selectionRectWidth=3000;        \r\n\t    this.text = text;\r\n\t\tthis.height=0;\r\n\t\tthis.width=0;\r\n\t    this.setSize(size);\r\n\t\tthis.fillColor='gray';\r\n\t    this.layermaskId=core.Layer.SILKSCREEN_LAYER_FRONT;\t\r\n\t    this.selection=false;\t\r\n\t    this.rotation=0;\r\n\t    this.mirrored=false;\r\n}\r\nclone(){\r\n\t       var copy = new GlyphTexture(this.text,this.tag,this.x,this.y,this.size);\r\n\t       copy.anchorPoint = new d2.Point(this.anchorPoint.x,this.anchorPoint.y);       \r\n\t\t   copy.glyphs = [];\r\n\t       copy.width=this.width;\r\n\t\t   copy.height=this.height;    \r\n\t\t   this.glyphs.forEach(function(glyph) {\r\n\t            copy.glyphs.push(glyph.clone());\r\n\t       });\r\n\t\t   copy.mirrored=this.mirrored;\r\n\t\t   copy.rotation=this.rotation;\r\n\t       copy.thickness = this.thickness;\r\n\t\t   copy.fillColor=this.fillColor;\r\n\t       copy.layermaskId=this.layermaskId;\t\t\r\n\t\t\t\r\n\t       return copy;\r\n}\r\ncopy( _copy){    \r\n    this.anchorPoint.set(_copy.anchorPoint.x,_copy.anchorPoint.y); \r\n    this.text = _copy.text;\r\n    this.tag = _copy.tag;\r\n    this.rotation=_copy.rotation;\r\n    this.mirrored=_copy.mirrored;\r\n    this.fillColor=_copy.fillColor;    \r\n    this.thickness=_copy.thickness;\r\n    this.setSize(_copy.size);                \r\n}\r\nclear() {\r\n    this.glyphs=[];\r\n    this.width=0;\r\n    this.height=0;\r\n}\r\nsetSelected(selection){\r\n\tthis.selection=selection;\r\n}\r\nisEmpty() {\r\n\t   return this.text == null || this.text.length == 0;\r\n}\r\nresetGlyphText(text) {\r\n        this.clear();\r\n        if (text == null) {\r\n            return null;\r\n        }\r\n        let result = \"\";\r\n\r\n        for (let i=0;i<text.length;i++) {\r\n            let glyph = GlyphManager.getInstance().getGlyph(text.charAt(i));\r\n            if (glyph != null) {\r\n                this.glyphs.push(glyph);\r\n                result+=text.charAt(i);\r\n            } else {\r\n                this.glyphs.push(GlyphManager.getInstance().getGlyph('!'));\r\n                result+='!';\r\n            }             \r\n        }\r\n        return result;\r\n}\r\nresetGlyphsLine(){\r\n\tlet xoffset = 0,yoffset=0;\r\n    this.glyphs.forEach(function(glyph) {\r\n        if(glyph.character==' '){\r\n            xoffset += glyph.delta;\r\n            this.width += glyph.delta;\r\n            return;\r\n        }\r\n        //calculate its width\r\n        glyph.resize();\r\n        yoffset=glyph.height;\r\n        for (let i = 0; i < glyph.segments.length ; i++) {        \t\r\n        \tglyph.segments[i].move(this.anchorPoint.x + xoffset,this.anchorPoint.y); \t\t\t  \t\t  \r\n        }        \r\n        xoffset += glyph.width + glyph.delta;\r\n        this.height = Math.max(glyph.height+ glyph.miny, this.height);\r\n        this.width += glyph.width + glyph.delta;\r\n    }.bind(this));\r\n    \r\n    this.glyphs.forEach(function(glyph) {\r\n        for (let i = 0; i < glyph.segments.length ; i++) {        \t\r\n        \tglyph.segments[i].move(0,-this.height); \t\t\t  \t\t  \r\n        }        \r\n    }.bind(this));\r\n    \r\n}\r\nreset(){\r\n    if (this.text == null) {\r\n        return;\r\n    }\r\n    //reset original text\r\n    this.text = this.resetGlyphText(this.text);\r\n    //reset size\r\n    this.glyphs.forEach(function(glyph){\r\n        glyph.setSize(core.COORD_TO_MM(this.size));\r\n    }.bind(this));        \r\n    \r\n    //arrange it according to anchor point\r\n    this.resetGlyphsLine();\r\n    //rotate\r\n\tthis.glyphs.forEach(function(glyph){\t\t  \r\n\t\tglyph.rotate(this.rotation,this.anchorPoint);\t\t     \r\n    }.bind(this));\r\n}\r\nsetSize(size) {\r\n\r\n    this.size=size;\r\n    if(this.mirrored){\r\n       let line=new d2.Line(this.anchorPoint,new d2.Point(this.anchorPoint.x,this.anchorPoint.y+100));\r\n       this.mirror(true,line);\r\n    }else{\r\n       this.reset();\r\n    }\r\n}\r\nsetText(text) {\r\n    //read original text\r\n    this.text = text;\r\n    if(this.mirrored){\r\n      let line=new d2.Line(this.anchorPoint,new d2.Point(this.anchorPoint.x,this.anchorPoint.y+100));\r\n      this.mirror(true,line);\r\n    }else{\r\n      this.reset();\r\n    }\r\n}\r\ngetBoundingShape() {\r\n    if (this.text == null || this.text.length == 0) {\r\n          return null;\r\n    }\r\n     return this.getBoundingRect().box;\r\n}\r\n//@private\r\ngetBoundingRect(){\r\n    if(this.mirrored){\r\n        let rect= new d2.Rectangle(this.anchorPoint.x-this.width,this.anchorPoint.y-this.height,this.width,this.height);\r\n        rect.rotate(this.rotation,this.anchorPoint);\r\n        return rect;\r\n     }else{    \t\r\n        let rect= new d2.Rectangle(this.anchorPoint.x,this.anchorPoint.y-this.height,this.width,this.height);\r\n        rect.rotate(this.rotation,this.anchorPoint);\r\n        return rect;\r\n     }\t\r\n}\r\nisClicked(x,y){\r\n    if (this.text == null || this.text.length == 0){\r\n        return false;\r\n    } \r\n    return this.getBoundingRect().contains(x,y);   \r\n}\r\nmirror(mirrored,line){\r\n\tthis.mirrored=mirrored;\r\n\t\r\n    //reset original text\r\n    this.text = this.resetGlyphText(this.text);\r\n    //reset size\r\n    this.glyphs.forEach(function(glyph){\r\n        glyph.setSize(core.COORD_TO_MM(this.size));\r\n    }.bind(this));        \r\n    \r\n    //arrange it according to anchor point\r\n    this.resetGlyphsLine();\r\n    \r\n    this.anchorPoint.mirror(line);\r\n    this.glyphs.forEach(function(glyph){\r\n       if(this.mirrored){\r\n    \tglyph.mirror(line);    \t        \r\n       } \r\n       glyph.rotate(this.rotation,this.anchorPoint);\r\n        \r\n    }.bind(this));\r\n        \r\n}\r\nsetSide(side,  line, angle) {\r\n    this.mirrored=(side==core.Layer.Side.BOTTOM);\r\n    //reset original text\r\n    this.text = this.resetGlyphText(this.text);\r\n    //reset size\r\n    this.glyphs.forEach(function(glyph){\r\n        glyph.setSize(core.COORD_TO_MM(this.size));\r\n    }.bind(this));         \r\n    this.anchorPoint.mirror(line);\r\n    //arrange it according to anchor point\r\n    this.resetGlyphsLine();\r\n\r\n     //mirror text around anchor point\r\n    let ln=new d2.Line(new d2.Point(this.anchorPoint.x,this.anchorPoint.y-20),new d2.Point(this.anchorPoint.x,this.anchorPoint.y+20));\r\n    this.glyphs.forEach(glyph=>{\r\n       if(this.mirrored){\r\n           glyph.mirror(ln);                        \r\n       }\r\n       glyph.rotate(angle,this.anchorPoint);                   \r\n    });\r\n    \r\n    let copper=core.Layer.Side.change(this.layermaskId);\r\n    this.fillColor=copper.getColor();\r\n    this.layermaskId=copper.getLayerMaskID();\r\n    this.rotation=angle;\r\n}\r\n\r\nmove(xoffset,yoffset) {\r\n    this.anchorPoint.move(xoffset,yoffset);\r\n    this.glyphs.forEach(function(glyph){\r\n        glyph.move(xoffset,yoffset);\r\n    }.bind(this));      \r\n}\r\nsetLocation(x,y){\r\n\tlet xx=x-this.anchorPoint.x;\r\n\tlet yy=y-this.anchorPoint.y;\r\n\tthis.move(xx,yy);\r\n}\r\nsetRotation(rotate,pt){\r\n\tlet alpha=rotate-this.rotation;\r\n\tthis.anchorPoint.rotate(alpha,pt);\r\n\tthis.glyphs.forEach(function(glyph){\r\n\t\tglyph.rotate(alpha,pt);   \r\n\t}.bind(this));\t\r\n\tthis.rotation=rotate;   \t\r\n}\r\nrotate(rotate,pt){\r\n\t//fix angle\r\n\tlet alpha=this.rotation+rotate;\r\n\tif(alpha>=360){\r\n\t\talpha-=360\r\n\t}\r\n\tif(alpha<0){\r\n\t alpha+=360; \r\n\t}\t\r\n\tthis.rotation=alpha;\r\n\t//rotate anchor point\r\n\tthis.anchorPoint.rotate(rotate,pt);\r\n\t//rotate glyphs\r\n\tthis.glyphs.forEach(function(glyph){\r\n\t   glyph.rotate(rotate,pt);   \r\n\t}.bind(this));\t\r\n\t\t\r\n}\r\npaint(g2,viewportWindow,scale,layermaskId){\r\n   if (this.isEmpty()) {\r\n        return;\r\n   }\r\n\r\n   if (this.selection)\r\n       g2.strokeStyle='gray';\r\n   else\r\n       g2.strokeStyle=this.fillColor;\r\n\r\n   g2.lineWidth = this.thickness * scale.getScale();\r\n   g2.lineCap = 'round';\r\n   g2.lineJoin = 'round';\r\n   \r\n   this.glyphs.forEach(function(glyph){\r\n\t   for(let i=0;i<glyph.segments.length;i++){\t\r\n\t\t   if(glyph.character==' '){\r\n\t\t\t   continue;\r\n\t\t   }\r\n\t\t   let copy=glyph.segments[i].clone();\r\n\t\t     copy.scale(scale.getScale());\r\n\t\t\t copy.move(-viewportWindow.x,- viewportWindow.y);\r\n\t         copy.paint(g2); \r\n\t   }\r\n   });\r\n   \r\n   //let box=this.getBoundingRect();\r\n   //box.scale(scale.getScale());\r\n   //box.move(-viewportWindow.x,- viewportWindow.y);\r\n   //box.paint(g2);\r\n   \r\n   if (this.selection){\r\n       this.drawControlShape(g2,viewportWindow,scale);\r\n   }   \r\n}\r\ndrawControlShape(g2, viewportWindow,scale){\r\n    utilities.drawCrosshair(g2, viewportWindow, scale, null, this.selectionRectWidth, [this.anchorPoint]);\r\n}\r\ntoXML(){\r\n    return (this.isEmpty()? \"\" :\r\n        this.text + \",\" + utilities.roundFloat(this.anchorPoint.x,4) + \",\" + utilities.roundFloat(this.anchorPoint.y,4) +\r\n        \",,\"+utilities.roundFloat(this.thickness,2)+\",\"+utilities.roundFloat(this.size,2)+\",\"+utilities.roundFloat(this.rotation,2));\t\r\n}\r\nfromXML(node){\t\r\n\tif (node == null || j$(node).text().length==0) {\r\n         this.text = \"\";\r\n         return;\r\n     }\r\n\t var tokens=j$(node).text().split(',');\r\n     this.text=tokens[0];\r\n     \r\n\t //layer?\r\n     if(j$(node).attr(\"layer\")!=null){\r\n        this.layermaskId=core.Layer.Copper.valueOf(j$(node).attr(\"layer\")).getLayerMaskID();\r\n       }else{\r\n    \tthis.layermaskId=core.Layer.SILKSCREEN_LAYER_FRONT;\t\r\n     }\r\n     \r\n\t \r\n     this.anchorPoint.set(parseInt(tokens[1]),\r\n             parseInt(tokens[2]));  \r\n\r\n\t this.thickness=parseInt(tokens[4]); \r\n\t if(isNaN(this.thickness)){\r\n\t\t this.thickness=2000;\r\n\t } \r\n     let size=parseInt(tokens[5]);\r\n     if(isNaN(size)){\r\n    \t size=20000;\r\n     }\r\n     this.size=size;\r\n\r\n\t let rotate=parseFloat(tokens[6]);\r\n     if(isNaN(rotate)){\r\n    \t rotate=0;\r\n     }\r\n\t this.rotation=rotate;\r\n\t \r\n\t //mirror?\r\n     let side=core.Layer.Side.resolve(this.layermaskId);\r\n\t if(side==core.Layer.Side.BOTTOM){\r\n\t\tthis.mirrored=true;\t\t \r\n\t }\r\n\r\n\t //invalidate\r\n\t this.setText(this.text);\r\n}\r\n}\r\nvar GlyphManager = (function () {\r\n\r\n\tvar instance=null;\r\n\t \r\n\r\n\tclass manager{\r\n\tconstructor(){\r\n\t   this.glyphs=new Map();\t\r\n\t   this.initialize();\r\n\t}\r\n\r\n\tinitialize(){\r\n\t  \t    j$.ajax({\r\n\t\t        type: 'GET',\r\n\t\t        contentType: 'application/xml',\r\n\t\t        url: 'fonts/defaultfont.xml',\r\n\t\t        dataType: \"xml\",\t        \r\n\t\t        success: j$.proxy(this.onLoadFont,this),\r\n\t\t        \r\n\t\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t\t        },\r\n\t\t    });\r\n\t}\r\n\r\n\tonLoadFont(data){\r\n\tlet that=this;\r\n\t\t \t   j$(data).find('symbol').each(function(){\r\n\t               var glyph=new Glyph();\r\n\t\t\t\t   glyph.fromXML(this);\r\n\t\t\t\t   that.glyphs.set(glyph.character,glyph);\r\n\t\t \t   });\r\n\r\n\t}\t\r\n\r\n\tgetGlyph(symbol){\r\n\t      let glyph= this.glyphs.get(symbol);    \r\n\t      if(glyph!=null){      \r\n\t        return glyph.clone();        \r\n\t      }\r\n\t      return null;\r\n\t    }\r\n\t}\r\n\t    return {\r\n\t        getInstance: function () {\r\n\t            if (!instance) {\r\n\t                instance = new manager();\r\n\t            }\r\n\t            return instance;\r\n\t        }\r\n\t    };\r\n\t})();\r\n\r\n\tvar core=require('core/core');\r\n\tvar utilities=require('core/utilities');\r\n\t\r\nmodule.exports ={\r\n\t\t\t   Glyph,\r\n\t\t\t   GlyphTexture,\r\n\t\t\t   GlyphManager\r\n\t\t\t}\t","var mywebpcb=require('core/core').mywebpcb;\r\nvar core = require('core/core');\r\nvar d2=require('d2/d2');\r\n\r\n\r\nconst QUEUE_DEPTH = 20;\r\nconst MementoType = Object.freeze({\r\n    CREATE_MEMENTO:0,\r\n    DELETE_MEMENTO:1,\r\n    MOVE_MEMENTO:2,    \r\n    MEMENTO:3\r\n})\r\n\r\nclass AbstractMemento{\r\n\r\n    constructor(mementoType){    \r\n       this.uuid=null;\r\n       this.parentUUID=null;\r\n       this.mementoType;\r\n       this.layermaskId;    \r\n       this.thickness;    \r\n       this.fill;    \r\n       this.rotation;    \r\n       this.mementoType = mementoType;\r\n    }\r\n    \r\n        \r\nclear(){\r\n       //this.uuid=null;\r\n       //this.parentUUID=null;\r\n    }\r\n\r\nloadStateTo(shape){\r\n        shape.uuid=(this.uuid);\r\n        shape.copper=core.Layer.Copper.resolve(this.layermaskId);\r\n        shape.thickness=(this.thickness);\r\n        shape.fill=this.fill;\r\n        shape.rotation=this.rotation;\r\n    }\r\n    \r\nsaveStateFrom(shape) {\r\n        //common fields\r\n        this.layermaskId=shape.copper.getLayerMaskID();\r\n        this.thickness=shape.thickness;\r\n        this.fill=shape.fill;\r\n        this.rotation=shape.rotation\r\n        this.uuid=shape.uuid          \r\n    }\r\n    \r\nequals(obj){\r\n        if(this==obj){\r\n          return true;  \r\n        }\r\n        if(!(obj instanceof AbstractMemento)){\r\n          return false;  \r\n        }         \r\n        let other=obj;\r\n        return (other.mementoType==this.mementoType&&\r\n                other.uuid==this.uuid&&\r\n                other.thickness==this.thickness&&\r\n                other.fill==this.fill&&\r\n                d2.utils.EQ(other.rotation,this.rotation)&&\r\n                other.layermaskId==this.layermaskId\r\n               );\r\n        \r\n      \r\n    }    \r\n    isSameState(unit) {\r\n        let other=unit.getShape(this.uuid);              \r\n        return (other.thickness==this.thickness&&other.fill==this.fill&&other.copper.getLayerMaskID()==this.layermaskId&& Utils.EQ(other.rotation,this.rotation));                                \r\n    }\r\n}\r\nclass SymbolFontTextureMemento extends AbstractMemento{\r\n    constructor(mementoType){\r\n\t \tsuper(mementoType);\t\r\n\t    this.text;      \r\n        this.alignment\r\n        this.fontSize\r\n        this.fontStyle;                         \r\n        this.x=0;\r\n        this.y=0;\r\n        this.tag;\r\n\t}\r\n    loadStateTo(texture) {             \r\n             texture.shape.alignment=this.alignment;\r\n             texture.shape.fontSize=this.fontSize;\r\n             texture.shape.fontStyle=this.fontStyle;\r\n             texture.shape.anchorPoint.set(x, y);\r\n             texture.tag = this.tag;   \r\n             texture.setText(text);\r\n         }\t\r\n   saveStateFrom(texture) {             \r\n             //this.id=symbol.id;\r\n             x = texture.shape.anchorPoint.x;\r\n             y = texture.shape.anchorPoint.y;\r\n             this.tag = texture.tag;\r\n             this.text = texture.shape.text;\r\n             this.fontSize=texture.shape.fontSize;\r\n             this.fontStyle=texture.shape.fontStyle;\r\n             this.alignment=texture.shape.alignment;\r\n         }\t\r\n   equals(obj) {\r\n             if (this == obj) {\r\n                 return true;\r\n             }\r\n             if (!(obj instanceof SymbolFontTextureMemento)) {\r\n                 return false;\r\n             }            \r\n             return (                     \r\n                     other.tag.equals(this.tag) &&\r\n                     other.text.equals(this.text) &&\r\n                     Utils.EQ(other.x,this.x)  &&\r\n                     Utils.EQ(other.y,this.y) &&\r\n                     other.alignment==this.alignment &&\r\n                     other.fontSize==this.fontSize &&\r\n                     other.fontStyle==this.fontStyle);\r\n         }\r\n\r\n\t\t\r\n}\r\nclass CompositeMemento extends AbstractMemento{\r\n    constructor(mementoType){\r\n\t \tsuper(mementoType);\t\r\n\t}\r\n\r\n}\r\n//**********************Undo Provider***************************************\r\nclass UndoProvider{\r\n\tconstructor(){\r\n\t\tthis.queue=[];\r\n\t\tthis.currentIndex=0; \t\t\r\n\t}\r\nredo() {\r\n        if (this.currentIndex >=(this.queue.length-1)) {\r\n            return null;\r\n        }\r\n        return this.queue[++this.currentIndex];\r\n    }\r\n\r\nundo() {\r\n        if (this.currentIndex ==-1) {\r\n            return null;\r\n        }\r\n        if(this.queue.length==0){\r\n           return null;  \r\n        }\r\n        return this.queue[this.currentIndex--];\r\n    }\t\r\nclear() {\r\n        for (let memento in this.queue) {\r\n            memento.clear();\r\n        }\r\n        this.queue=[];\r\n        this.currentIndex = 0;\r\n    }\r\nregisterMemento(memento) {\t    \r\n        //***1.Skip add if same memento as last one on the stack\r\n        for(let i=this.queue.length-1;i>0;i--){\r\n            let prevMemento=this.queue[i];\r\n                if(prevMemento.equals(memento)){ \r\n                  memento.clear();\r\n                  return;  \r\n                }              \r\n            break;\r\n        }   \r\n     \r\n        \r\n        if (this.currentIndex >= QUEUE_DEPTH) {\r\n            let _memento = this.queue.shift();\r\n            _memento.clear();\r\n            this.currentIndex = this.queue.length-1; \r\n        }        \r\n        \r\n        if (this.queue.length == 0 || this.currentIndex == this.queue.length - 1) {\r\n        } else {\r\n             for (let j = this.currentIndex + 1; this.currentIndex < this.queue.length - 1; ) {\r\n\t            let _memento=this.queue[j];           \r\n\t\t\t\t_memento.clear();                \r\n\t\t\t\tthis.queue.splice(j,1);\r\n                \r\n             }\r\n        }\r\n\r\n        this.queue.push(memento);  \r\n        this.currentIndex = this.queue.length-1; \r\nconsole.log(this.queue.length);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports ={\r\n\t\tUndoProvider,\t\r\n\t\tMementoType,\r\n\t\tAbstractMemento,\r\n\t\tCompositeMemento,\r\n\t\tSymbolFontTextureMemento,\t\r\n}","var mywebpcb=require('core/core').mywebpcb;\r\nvar core = require('core/core');\r\nvar shape = require('core/shapes');\r\nvar events=require('core/events');\r\nvar GlyphManager=require('core/text/d2glyph').GlyphManager;\r\nvar ViewportWindow=require('core/core').ViewportWindow;\r\nvar d2=require('d2/d2');\r\nvar UndoProvider=require('core/undo').UndoProvider\r\nvar MementoType=require('core/undo').MementoType\r\nvar CompositeMemento=require('core/undo').CompositeMemento\r\n//**********************UnitMgr***************************************\r\nvar UnitMgr=(function(){\r\n\tvar instance=null;\r\n\t//private\r\n    function getPinsRect(shapes){\r\n        var x1=Number.MAX_VALUE,y1=Number.MAX_VALUE,x2=Number.MIN_VALUE,y2=Number.MIN_VALUE;\r\n        var isPinnable=false;        \r\n\r\n        shapes.forEach(function(shape) {            \r\n            if(typeof shape.getPinPoint === 'function'){\r\n                let point=shape.getPinPoint();                \r\n                x1 = Math.min(x1, point.x);\r\n                y1 = Math.min(y1, point.y);\r\n                x2 = Math.max(x2, point.x);\r\n                y2 = Math.max(y2, point.y);                \r\n                isPinnable=true;\t\r\n            }\r\n            if(typeof shape.getPinsRect==='function'){\r\n            \tlet box=shape.getPinsRect();\r\n                x1 = Math.min(x1, box.min.x);\r\n                y1 = Math.min(y1, box.min.y);\r\n                x2 = Math.max(x2, box.max.x);\r\n                y2 = Math.max(y2, box.max.y);                            \t\r\n            \tisPinnable=true;\r\n            }\r\n           });\r\n        \r\n        if(isPinnable)\r\n            return  d2.Box.fromRect(x1,y1,x2-x1,y2-y1);          \r\n        else\r\n            return null;  \r\n        };\r\n\r\nclass manager{\r\n        alignBlock(grid,shapes) {\r\n            let r = getPinsRect(shapes);\r\n            if (r == null) {\r\n                return;\r\n            }\r\n            let point =grid.positionOnGrid(r.x, r.y); \r\n            \r\n      \t   shapes.forEach(function(shape) {\r\n      \t\t shape.move((point.x - r.x),(point.y - r.y));\r\n           });\r\n        }\r\n        moveBlock(shapes, xoffset,yoffset){\r\n        \t   shapes.forEach(function(shape) {\r\n         \t\tshape.move(xoffset,yoffset);\r\n               });\r\n         }    \r\n        mirrorBlock(shapes,line){\t\r\n     \t   shapes.forEach(function(shape) {\r\n        \t\tshape.mirror(line);\r\n           });\r\n        }\r\n        rotateBlock(shapes, rotation){\r\n       \t   shapes.forEach(function(shape) {\r\n        \t\tshape.rotate(rotation);\r\n                });\r\n        }\r\n        deleteBlock(unit,shapes){\r\n        \tshapes.forEach(function(shape) {               \r\n               unit.remove(shape.uuid);\r\n            });\t\r\n        }\r\n        cloneBlock(unit,shapes){\r\n            //***disselect old block\r\n            unit.setSelected(false);\r\n            shapes.forEach(function(shape) {\r\n            \tlet copy = shape.clone();\r\n            \tcopy.setSelected(true);\r\n            \tunit.add(copy);\r\n            });\r\n        }\r\n        isBlockSelected(shapes){\r\n            var count = 0;\r\n    \t    shapes.forEach(function(shape) {\r\n                   if (shape.isSelected()) {\r\n    \t\t\t\t\tcount++;\r\n                    }  \r\n               });\r\n            return count > 1;\r\n        }     \r\n        sendToBack(shapes,target){\r\n        \tlet box=target.getBoundingShape();\r\n        \tlet min=Number.MAX_VALUE;\r\n        \tlet sind=-1;\r\n        \tfor(let i=0;i<shapes.length;i++){\r\n        \t\tif(shapes[i].uuid===target.uuid){\r\n        \t\t\tsind=i;\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(box.intersects(shapes[i].getBoundingShape())){\r\n        \t\t\tmin = Math.min(min,i);\r\n        \t\t}\r\n        \t\t\r\n        \t}\r\n            if(min<Number.MAX_VALUE){\r\n            \tlet tmp=shapes[min];\r\n            \tshapes[min]=shapes[sind];\r\n            \tshapes[sind]=tmp;\r\n            }\r\n        \t\r\n        }\r\n        bringToFront(shapes,target){\r\n        \tlet box=target.getBoundingShape();\r\n        \tlet max=Number.MIN_VALUE;\r\n        \tlet sind=-1;\r\n        \tfor(let i=0;i<shapes.length;i++){\r\n        \t\tif(shapes[i].uuid===target.uuid){\r\n        \t\t\tsind=i;\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(box.intersects(shapes[i].getBoundingShape())){\r\n        \t\t\tmax = Math.max(max,i);\r\n        \t\t}\r\n        \t\t\r\n        \t}        \t\r\n            if(max>Number.MIN_VALUE){\r\n            \tlet tmp=shapes[max];\r\n            \tshapes[max]=shapes[sind];\r\n            \tshapes[sind]=tmp;\r\n            }\r\n        \t\r\n        }\r\n        getLabelByTag(unit,tag){\r\n           let result=null;\r\n       \t   unit.shapes.some(function(shape) {\r\n       \t\tif(undefined !=shape['getTexture']){\r\n       \t\t\tlet text=shape.getTexture();\r\n       \t\t    if (text.tag==tag){        \t\t\t\r\n        \t\t\t\tresult=shape;\r\n        \t\t\t    return true;\r\n        \t\t\t}\r\n        \t\t\t\t\r\n            }\r\n       \t\treturn false;\r\n           });\r\n            return result;\r\n        }\r\n    \r\n    }\r\n\treturn {getInstance:function(){\r\n\t\t    if (!instance) {\r\n              instance = new manager();\r\n            }\r\n            return instance;\r\n\t      }\r\n\t};\r\n\t\t\r\n\t\r\n})();\r\n//**********************Unit*******************************************\r\nclass Unit{\r\n    constructor(width,height) {\r\n        //this.silent=false; \t \r\n    \tthis.scalableTransformation=new core.ScalableTransformation(8,4,13);\r\n    \tthis.uuid=core.UUID();\r\n    \tthis.shapes=[];\r\n    \tthis.width=width;\r\n    \tthis.height=height;\r\n    \tthis.unitName=\"Unknown\";\r\n    \tthis.grid=new core.Grid(0.8,core.Units.MM);\r\n        this.viewportPositionX = 0;\r\n        this.viewportPositionY = 0;\r\n        this.frame=new core.UnitFrame(this.width,this.height);\r\n        this.coordinateSystem;//=new core.CoordinateSystem(this);\r\n\t\tthis.ruler=new shape.Ruler();\r\n\t\tthis.shapeFactory=null;\r\n\t\tthis.undoProvider = new UndoProvider();\r\n        \r\n    }\r\nsetViewportPositionValue(viewportPositionX,viewportPositionY) {\r\n        this.viewportPositionX = viewportPositionX;\r\n        this.viewportPositionY = viewportPositionY;\r\n       }\r\nfireShapeEvent(event){\r\n\t\tif(!core.isEventEnabled)\r\n\t\t\treturn;\r\n\r\n\t\tswitch(event.type){\r\n\t\t  case events.Event.SELECT_SHAPE:\r\n\t\t\t  core.mywebpcb.trigger('shape:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.DELETE_SHAPE:\r\n\t\t\t  core.mywebpcb.trigger('shape:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.RENAME_SHAPE:\r\n\t\t\t  core.mywebpcb.trigger('shape:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.ADD_SHAPE:\t \r\n\t\t\t  core.mywebpcb.trigger('shape:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.PROPERTY_CHANGE:\r\n\t\t\t  core.mywebpcb.trigger('shape:inspector',event);\r\n\t\t\t  break;\r\n\t\t}       \t\r\n}\r\n\t\r\ngetCoordinateSystem(){\r\n        return this.coordinateSystem;\r\n    }\r\ngetSelectedShapes() {\r\n       var v=[];\r\n       var len=this.shapes.length;\r\n \t   for(var i=0;i<len;i++){\r\n            if (this.shapes[i].isSelected()) {\r\n\t\t\t\tv.push(this.shapes[i]);\r\n            } \r\n \t    }\r\n       return v;\r\n    }\t\r\nrelease(){\r\n\t\tthis.clear();\r\n\t\t\r\n\t}\r\nclear(){\r\n        //***go through all lists and delete them\r\n \t   this.shapes.forEach(function(shape) {\r\n \t\t  shape.owningUnit=null;\r\n \t\t  shape.clear();\r\n \t\t  shape=null;\r\n       },this);\r\n        this.shapes=[];\t\r\n\t}\r\nadd(shape){\r\n\t if(shape==undefined){\r\n\t\treturn;\t\r\n\t }\r\n\t shape.owningUnit=this;\r\n\t this.shapes.push(shape);\r\n\t this.fireShapeEvent({target:shape,type:events.Event.ADD_SHAPE});\r\n}\r\ngetBoundingRect() {\r\n        return this.getShapesRect(this.shapes);\r\n    }\r\ngetShapesRect(shapes) {\r\n        var r = new d2.Box(0,0,0,0);\r\n        var x1 = Number.MAX_VALUE; \r\n        var y1 = Number.MAX_VALUE;\r\n        var x2 = Number.MIN_VALUE;\r\n        var y2 = Number.MIN_VALUE;\r\n\r\n        //***empty schematic,element,package\r\n        if (shapes.length == 0) {\r\n            return r;\r\n        }\r\n        var len=shapes.length;\r\n  \t    for(var i=0;i<len;i++){\r\n  \t    \tvar tmp = shapes[i].getBoundingShape();\r\n            if (tmp != null) {\r\n                x1 = Math.min(x1, tmp.x);\r\n                y1 = Math.min(y1, tmp.y);\r\n                x2 = Math.max(x2, tmp.x+tmp.width);\r\n                y2 = Math.max(y2, tmp.y+tmp.height);\r\n            }\r\n            \r\n        }\r\n        r.setRect(x1, y1, x2 - x1, y2 - y1);\r\n        return r;\r\n    }\t\r\nremove(uuid) {\r\n \t   this.shapes = this.shapes.filter(function(item) { \r\n               if(item.getUUID()==uuid){\r\n\t\t\t      this.fireShapeEvent({target:item,type:events.Event.DELETE_SHAPE});\r\n         \t      item.clear();\r\n         \t      item=null;\r\n\t\t\t\t  return false;\r\n\t\t\t   }\r\n\t\t\t   return true;\r\n        }.bind(this));\r\n}  \r\ngetGrid(){\r\n \t  return this.grid;\r\n \t}\r\ngetUUID(){\r\n \t  return this.uuid;  \r\n \t}\r\ngetWidth(){\r\n \t\treturn this.width;\r\n \t}\r\ngetHeight(){\r\n \treturn this.height;\r\n \t}\r\nbuildClickedShapesList(x,  y,  isTextIncluded){\r\n   var orderElements = [];\r\n   let len=this.shapes.length;\r\n   for(i=0;i<len;i++){   \r\n       if(isTextIncluded){\r\n    \tif((undefined !=this.shapes[i]['getTextureByTag'])&&this.shapes[i].getClickedTexture(x, y)){                               \r\n             orderElements.splice(0, 0, this.shapes[i]);\r\n             continue;\r\n        }\r\n       }     \r\n       if(this.isShapeVisibleOnLayers(this.shapes[i])&&this.shapes[i].isClicked(x, y)){\r\n          orderElements.push(this.shapes[i]);       \r\n       }  \r\n   }\r\n   return orderElements;\r\n}\r\ngetClickedShape( x,  y,  isTextIncluded){\r\n    let clickedShapes = this.buildClickedShapesList(x,y,isTextIncluded);\r\n    if(clickedShapes.length==0){\r\n        return null;\r\n    }\r\n    clickedShapes.sort(function(o1, o2){\r\n       \r\n            //both on same side\r\n    \t if(o1.owningUnit.compositeLayer!=undefined){    \r\n    \t   let s1=core.Layer.Side.resolve(o1.copper.getLayerMaskID());\r\n           let s2=core.Layer.Side.resolve(o2.copper.getLayerMaskID());\r\n           let active=o1.owningUnit.compositeLayer.activeSide;\r\n             //active layer has presedense\r\n           if(s1!=s2){\r\n               if(s1==active){\r\n                     return -1;\r\n                 }else{\r\n                     return 1;\r\n                 }\r\n           }\r\n    \t }\r\n\r\n       if ((o1.getClickableOrder() - o2.getClickableOrder()) == 0)\r\n           return 0;\r\n       if ((o1.getClickableOrder() - o2.getClickableOrder()) > 0)\r\n           return 1;\r\n       else\r\n           return -1;\r\n       \r\n   }.bind(this));\r\n    \r\n       \r\n    return clickedShapes[0]; \r\n}\r\nisShapeVisibleOnLayers(shape){\r\n   if (undefined !=this.compositeLayer) {\t\r\n    if(shape.isVisibleOnLayers(this.compositeLayer.getLayerMaskID())){\r\n      return true;\r\n    }else{\r\n      return false;  \r\n    }    \r\n   }else{\r\n\t   return true;\r\n   }\r\n}\r\n//buildClickableOrderItem(x,  y,  isTextIncluded){\r\n//     var orderElements = [];\r\n//     var index = 0;\r\n//     this.shapes.forEach(function(shape){\r\n//         if(isTextIncluded){\r\n//           \tif((undefined !=shape['getChipText'])&&shape.getChipText().isClicked(x, y)){\r\n//           \t    orderElements.push({index:index,orderWeight:0});\r\n//           \t}\r\n//         }\t\t \r\n//         \r\n//\t\tif(!shape.isClicked(x, y)){\r\n//               index++;\r\n//               return; \r\n//        }\r\n//         //***give selected a higher priority\r\n//        orderElements.push({index:index,\r\n//         \t                orderWeight:shape.isSelected() && shape.getOrderWeight() > 1 ? 2 : shape.getOrderWeight()});\r\n//\r\n//         index++;\r\n//     }.bind(this));\r\n//     return orderElements;\r\n// }\r\n//getClickedShape( x,  y,  isTextIncluded){\r\n// \t       var result=null;\r\n// \t       var orderElements=this.buildClickableOrderItem(x,y,isTextIncluded);\r\n//\r\n// \t       orderElements.sort(function(a,b) {\r\n// \t    \t   if (a.orderWeight < b.orderWeight){\r\n// \t\t    \t      return -1;\r\n// \t    \t   }\r\n// \t\t       if (a.orderWeight > b.orderWeight){\r\n// \t\t    \t     return 1;\r\n// \t\t       }\t     \r\n// \t\t       return 0;\r\n// \t\t    });\r\n// \t    \r\n// \t       orderElements.some(function(item) {\t\t\t   \r\n// \t    \t    var shape=this.shapes[item.index];\r\n//\t\t\t\t\r\n//                 if(isTextIncluded){\r\n//                 \tif((undefined !=shape['getChipText'])&&shape.getChipText().isClicked(x, y)){\r\n//                 \t    result=shape;\r\n//                 \t\treturn true;\r\n//                 \t}\r\n//                 }\r\n// \t \t\t   \r\n// \t \t\t    //if (shape.isClicked(x, y)) {\r\n//                 result=shape;\r\n// \t\t\t\t return true;\t\t\t\t \r\n//                //}  \r\n//\t\t\t\t \r\n//            }.bind(this));\r\n// \t\t   \r\n// \t\t   return result;\r\n// \t}\r\nisControlRectClicked( x,  y) {\r\n         /*\r\n          * if two symbols overlap and one is selected\r\n          * then the selected should be checked for control rect click first\r\n          */\r\n         \r\n         var shape = this.getShape(this.getSelected());\t\t \r\n         if ((shape != null)&&(shape['isControlRectClicked']!=undefined)&&(shape.isControlRectClicked(x, y) != null)){\r\n                return shape;\r\n         }\r\n         return null;\r\n     }\r\ngetShapes(...args) {\r\n\tif(args.length==1){  //clazz\r\n\t\tlet clazz=args[0];\r\n        var selectionList=[];\r\n  \t    this.shapes.forEach(function(shape) {\r\n            if (shape instanceof clazz) {\r\n         \t   selectionList.push(shape);\t\t\t\t\r\n            }\r\n         });           \r\n         return selectionList;\r\n\t}else{      //clazz,layerid\r\n\t\tlet clazz=args[0];\r\n\t\tlet layermaskId=args[1];\r\n\t\t\r\n        var selectionList=[];\r\n  \t    for(let shape of this.shapes) {\r\n            if ((shape instanceof clazz)&&(shape.isVisibleOnLayers(layermaskId))) {\r\n         \t   selectionList.push(shape);\t\t\t\t\r\n            }\r\n         };           \r\n         return selectionList;\t\t\r\n\t}\r\n }    \r\ngetShape(uuid){\r\n \t    if (uuid == null){\r\n             return null;\r\n         }    \r\n \t   var shape=null;\r\n \t   this.shapes.forEach(function(ashape) {\r\n             if (ashape.getUUID()==uuid) {\r\n                shape=ashape;\r\n \t\t\t\treturn;\r\n             }\r\n        }.bind(this));\r\n \t   \r\n         return shape;\r\n \t}\r\ngetSelected() {\r\n \t   var uuid=-1;\r\n \t   this.shapes.forEach(function(shape) {\r\n             if (shape.isSelected()) {\r\n                 uuid=shape.getUUID();\r\n \t\t\t\treturn;\r\n             }\r\n        }.bind(this));\r\n         return uuid;\r\n     }\r\nsetSelectedShape(uuid,flag){\r\n\t   this.shapes.some(function(shape) {\r\n\t\t   if(shape.uuid==uuid){\r\n\t\t\t   shape.setSelected(flag);\r\n\t\t\t   return true;\r\n\t\t   }else{\r\n\t\t\t   return false;\r\n\t\t   }\t\r\n\t\t   \r\n       });\t\r\n} \t\r\nsetSelected(flag) {\r\n \t   this.shapes.forEach(function(shape) {\r\n \t\t\tshape.setSelected(flag);\r\n        });\r\n     }\r\nsetSelectedInRect(r){\r\n \t   this.shapes.forEach(j$.proxy(function(shape) {\r\n \t        if (shape.isInRect(r)) {\r\n                 shape.setSelected(true);\r\n             }\r\n        },this));\t\r\n     }\t\r\ngetScalableTransformation(){\r\n \t  return this.scalableTransformation;\r\n \t}\r\nnotifyListeners(eventType) {\r\n  \t   this.shapes.forEach(j$.proxy(function(shape) {\r\n  \t\t  this.fireShapeEvent({target:shape,type:eventType}); \r\n       },this));\r\n }\t\r\n setSize(width,height){\r\n     this.width = width;\r\n     this.height = height;\r\n     this.frame.setSize(width, height);\t\r\n }\r\npaint(g2, viewportWindow){\t\r\n\t   let len=this.shapes.length;\r\n \t   for(let i=0;i<len;i++){\r\n \t\t   this.shapes[i].paint(g2,viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);  \r\n \t   }\r\n \t   this.shapes.forEach((shape)=>{\t \t    \t\r\n\t\t\tif ((typeof shape.drawControlShape === 'function')&&shape.isSelected()) {\t\t\t\t\t                \r\n\t\t\t\tshape.drawControlShape(g2, viewportWindow,this.scalableTransformation);\r\n        \t}\r\n \t   });\r\n \t   //grid\r\n       this.grid.paint(g2,viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n        //coordinate system\r\n       if(this.coordinateSystem!=null){\r\n         this.coordinateSystem.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n       }\t\r\n         //ruler\r\n\t   this.ruler.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n        //frame\r\n       if(this.frame!=null){\r\n\t     this.frame.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n       }\r\n}    \r\nredo(){\r\n\tconsole.log(22);\r\n        let memento=null;\r\n        //***skip duplicates\r\n        while(true){\r\n            memento = this.undoProvider.redo();\r\n            if (memento == null) {\r\n              return false;\r\n            }else{                \r\n              if((memento.mementoType==MementoType.CREATE_MEMENTO)||(memento.mementoType==MementoType.DELETE_MEMENTO)){\r\n                  break;\r\n              }\r\n              //***eigther composite or single memento\r\n              if(memento.isSameState(this)){\r\n                   continue; \r\n              }else{\r\n                   break;  \r\n              }                 \r\n            }            \r\n        }\r\n    switch (memento.mementoType) {\r\n\t   case MementoType.CREATE_MEMENTO:\r\n              let shape=this.shapeFactory.createShapeFromMemento(memento);\r\n              this.add(shape);                 \r\n\t\t\tbreak;\r\n\t\tcase MementoType.DELETE_MEMENTO:\r\n\t\t\r\n\t\tbreak;\r\n\r\n        default:\r\n            if(memento instanceof CompositeMemento){\r\n               //this.setState(memento); \r\n               // ((CompositeMemento)memento).loadStateTo(this);\r\n            }else{\r\n               let element = this.getShape(memento.uuid);\r\n               element.setState(memento);\r\n               //fireShapeEvent(new ShapeEvent(element, ShapeEvent.PROPERTY_CHANGE));\r\n            \r\n            }\r\n\t\t\t\r\n\t}\r\n    \r\n\t\r\n}    \r\nundo(undocallback){\r\n  let memento=null;\r\n          //***skip duplicates\r\n        while(true){\r\n          memento = this.undoProvider.undo();  \r\n        //***CHECK the validity of a memento   \r\n          if (memento == null) {\r\n            return false;\r\n          }else{\r\n              if((memento.mementoType==MementoType.CREATE_MEMENTO)||(memento.mementoType==MementoType.DELETE_MEMENTO)){\r\n                  break;\r\n              }\r\n              //***eigther composite or single memento\r\n              if(memento.isSameState(this)){                \r\n                 continue; \r\n              }else{\r\n                 break;  \r\n              }                  \r\n          }\r\n        } \r\n    switch (memento.mementoType) {\r\n\t   case MementoType.CREATE_MEMENTO:\r\n            this.remove(memento.uuid);\r\n\t\t\tbreak;\r\n\t\tcase MementoType.DELETE_MEMENTO:\r\n\t\t\r\n\t\tbreak;\r\n\r\n        default:\r\n            if(memento instanceof CompositeMemento){\r\n               //this.setState(memento); \r\n               // ((CompositeMemento)memento).loadStateTo(this);\r\n            }else{\r\n               let element = this.getShape(memento.uuid);\r\n               element.setState(memento);\r\n               //fireShapeEvent(new ShapeEvent(element, ShapeEvent.PROPERTY_CHANGE));\r\n            \r\n            }\r\n\t\t\t\r\n\t}\r\n\t\r\n}  \r\nregisterMemento(memento){           \r\n   this.undoProvider.registerMemento(memento);    \t\r\n}\r\n\r\n}\r\n\r\n//**********************UnitContainer*******************************************\r\nclass UnitContainer{\r\n\tconstructor(){\r\n\t      //this.silent= silent || false;;\t\r\n\t\t  this.unitsmap=new Map();\r\n\t\t  this.unit=null;\r\n\t\t  this.fileName=\"\";\r\n\t\t  this.libraryname=\"\";\r\n\t\t  this.categoryname=\"\";\t\r\n\t}\r\n    setFileName(fileName) {\r\n        this.fileName = fileName;\r\n        this.formatedFileName=this.fileName;\r\n    }\r\n\tadd(unit){\r\n\t  this.unitsmap.set(unit.getUUID(), unit);\r\n      if(this.unitsmap.size==1){\r\n          this.setActiveUnit(0);   \r\n      }\r\n      this.fireUnitEvent({target:unit,type:events.Event.ADD_UNIT});\r\n      \r\n\t}\r\n    delete( uuid) {\r\n        var _unit = this.unitsmap.get(uuid);\r\n        if(_unit==null){\r\n            return;\r\n        }\r\n        _unit.release();\r\n        this.fireUnitEvent({target:_unit,type:events.Event.DELETE_UNIT});\r\n        if (_unit == this.unit) {\r\n            this.unit = null;\r\n        }\r\n        _unit = null;\r\n        this.unitsmap.delete(uuid);\r\n    }\r\n    clear(){\r\n    \tfor(let item of this.unitsmap.keys()){\r\n    \t\t  this.delete(item);\r\n    \t\t  this.unitsmap.delete(item);\r\n        };\r\n\t\tthis.unitsmap.clear();\r\n    }\t\r\n\tgetUnits() {\r\n        return this.unitsmap.values();\r\n    }\r\n    setActiveUnitUUID(uuid){\r\n    \tthis.unit=this.unitsmap.get(Number(uuid));\r\n    }\r\n\tsetActiveUnit(index) {\t\r\n\tlet units=this.unitsmap.values();\r\n\t  for(let i=0;i<this.unitsmap.size;i++){\r\n        let aunit=units.next();\r\n\t\tif(index==i){\r\n\t\t  this.unit=aunit.value;\r\n\t\t  break;\r\n\t\t}\r\n\t  }\r\n    }\r\n\tgetUnit(){\r\n\t  return this.unit;\r\n\t}\r\n\r\n\tfireUnitEvent(event){\r\n\t\tif(!core.isEventEnabled)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tswitch(event.type){\r\n\t\t  case events.Event.ADD_UNIT:\r\n\t\t\t  core.mywebpcb.trigger('unit:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.DELETE_UNIT:\r\n\t\t\t  core.mywebpcb.trigger('unit:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.SELECT_UNIT:\r\n\t\t\t  core.mywebpcb.trigger('unit:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.RENAME_UNIT:\t \r\n\t\t\t  core.mywebpcb.trigger('unit:inspector',event);\r\n\t\t\t  break;\r\n\t\t  case events.Event.PROPERTY_CHANGE:\r\n\t\t\t  core.mywebpcb.trigger('unit:inspector',event);\r\n\t\t\t  break;\r\n\t\t}  \t\t\r\n\t}\t\r\n}\r\n\r\n//**********************UnitComponent*******************************************\r\nclass UnitComponent{\r\n\tconstructor(canvas,popup){\r\n\tGlyphManager.getInstance();    \r\n    \r\n\tif(canvas!=null){\t\r\n      this.canvas = j$('#'+canvas);\r\n  \t  this.ctx = this.canvas[0].getContext(\"2d\");\r\n  \t  \r\n  \t  //keypress\r\n  \t  j$('body').keydown(j$.proxy(this.keyPress,this));\r\n  \t  //right popup\r\n  \t  //j$('body').on('contextmenu', '#'+canvas, function(e){ return false; });\r\n  \t  //mouse wheel event\r\n  \t  j$('#'+canvas).bind('mousewheel',j$.proxy(this.mouseWheelMoved,this));\r\n  \t  //mouse click event \r\n  \t  j$('#'+canvas).on('mouseup',j$.proxy(this.mouseUp,this)); \r\n  \t  j$('#'+canvas).on('mousedown',j$.proxy(this.mouseDown,this));\r\n  \t  j$('#'+canvas).on('mousemove',j$.proxy(this.mouseMove,this));\r\n  \t  j$(window).resize(j$.proxy(this.screenResized,this));\r\n  \t  j$('#'+canvas).dblclick(j$.proxy(this.dblClick,this));\r\n  \t}\r\n\t\r\n    var container = j$(this.canvas).parent();\t  \r\n\tthis.width=j$(container).width();\r\n\tthis.height=j$(container).height();\r\n\r\n\t//set canvas width\r\n\tthis.canvas.attr('width',this.width);\r\n\tthis.canvas.attr('height',this.height); \r\n\t\r\n\tthis.viewportWindow=new ViewportWindow(0,0,this.width,this.height);\r\n\tthis.parameters=new Map();\r\n\tthis.parameters.set(\"snaptogrid\",false);\r\n\t\r\n\tthis.mode=core.ModeEnum.COMPONENT_MODE;\r\n\tthis.backgroundColor=\"black\";\r\n\tthis.view=null;\r\n\tthis.cursor=null;\r\n\t\r\n}\r\nresumeLine(line,handleKey,event) {\t\r\n\tconsole.log(this.lineBendingProcessor);\r\n\t  line.resumeLine(event.x,event.y);\r\n\t  this.eventMgr.setEventHandle(handleKey,line);\r\n} \r\ngetMode(){\r\n\treturn this.mode; \r\n} \r\ngetEventMgr(){\r\n\treturn this.eventMgr;\r\n\t}\t  \r\ngetModel(){\r\n\treturn this.model;\r\n    }\r\nsetView(_view){\r\n    this.view=_view; \r\n    }\r\ngetView(){\r\n\treturn this.view;  \r\n\t}\r\ngetParameter(key) {\r\n\t\treturn this.parameters.get(key); \r\n\t}\r\n\t \r\nsetParameter(key,value){\r\n\t    this.parameters.set(key,value); \r\n\t}\r\nsetViewportPosition(x,y) {\r\n    var xx=x*this.getModel().getUnit().getScalableTransformation().getScale();\r\n    var yy=y*this.getModel().getUnit().getScalableTransformation().getScale();\r\n    \r\n    xx=(xx-(this.width/2));\r\n    yy=(yy-(this.height/2));    \r\n\r\n\tthis.viewportWindow.x= parseInt(xx);\r\n    this.viewportWindow.y= parseInt(yy);\r\n}\r\nsetSize( width, height){\r\n     this.viewportWindow.setSize(width,height);      \r\n }\r\nclear(){\r\n\tthis.viewportWindow.setSize(1,1); \r\n    this.getEventMgr().resetEventHandle();\r\n    this.getModel().clear();\r\n  }\r\nfireContainerEvent(event){\r\n\t\r\n\t  if(!core.isEventEnabled)\r\n\t\treturn;\r\n\t\r\n\t  mywebpcb.trigger('container:inspector',event); \r\n}\r\ndefaultKeyPress(e){\r\n   if (event.ctrlKey && event.key === 'z') {\t\r\n         this.getModel().getUnit().undo(this.getEventMgr().targetEventHandle);         \r\n         this.repaint();         \r\n   }else if(event.ctrlKey && event.key === 'y') {\r\n         this.getModel().getUnit().redo(this.getEventMgr().targetEventHandle);         \r\n         this.repaint();         \t  \r\n   }\r\n\t\r\n}\r\nkeyPress(event){\r\n\t  if(event.target.tagName==\"INPUT\"){\r\n\t\t  return;\r\n\t  }\r\n\t  \r\n\t //if(event.target instanceof HTMLBodyElement||event.target instanceof HTMLCanvasElement){\r\n\t\t event.preventDefault();\r\n\t     if (this.getEventMgr().targetEventHandle == null || !this.getEventMgr().targetEventHandle.keyPressed(event)) {\r\n\t            this.defaultKeyPress(event)\r\n\t     }\r\n\t //}\t \r\n}\r\ngetScaledEvent(event){\r\n\t  var x,y;\r\n\t  if (event.pageX != undefined && event.pageY != undefined) {\r\n\t\t   x = event.pageX;\r\n\t\t   y = event.pageY;\r\n\t  }else {\r\n\t\t   x = event.clientX + document.body.scrollLeft +\r\n\t            document.documentElement.scrollLeft;\r\n\t\t   y = event.clientY + document.body.scrollTop +\r\n\t            document.documentElement.scrollTop;\r\n\t }\r\n\t       x -= parseInt(this.canvas.offset().left);\r\n\t       y -= parseInt(this.canvas.offset().top);\r\n\t  \r\n\t  return new events.MouseScaledEvent(x,y,this.getModel().getUnit().getScalableTransformation().getInversePoint(this.viewportWindow.x+x,this.viewportWindow.y+y),event);     \r\n}\r\ndblClick(event){\r\n\t  event.preventDefault();\r\n\t  if (this.getModel().getUnit() == null) { \r\n\t\t return; \r\n\t  }\r\n\t\t\r\n    var scaledEvent =this.getScaledEvent(event);\r\n\r\n\t  if (this.getEventMgr().getTargetEventHandle() != null) {\r\n\t            this.getEventMgr().getTargetEventHandle().dblClick(scaledEvent);\r\n\t  } \t  \r\n}\r\nmouseUp(event){\r\n    event.preventDefault();\r\n\tif (this.getModel().getUnit() == null) { \r\n\t\t\t return; \r\n    }\r\n\tthis.canvas.off('mousemove',j$.proxy(this.mouseDrag,this));\r\n\tthis.canvas.on('mousemove',j$.proxy(this.mouseMove,this));\r\n\t\r\n    var scaledEvent =this.getScaledEvent(event);\r\n\r\n\tif (this.getEventMgr().getTargetEventHandle() != null) {\r\n            this.getEventMgr().getTargetEventHandle().mouseReleased(scaledEvent);\r\n    }      \r\n\t   \t\r\n}\r\nmouseDrag(event){\r\n    event.preventDefault();\r\n\t  if (this.getModel().getUnit() == null) { \r\n\t\t\t return; \r\n\t  }\r\n       \r\n     var scaledEvent =this.getScaledEvent(event);  \r\n\t  \r\n\tif(event.button==0&&this.getEventMgr().getTargetEventHandle() != null) {\t\t\r\n            this.getEventMgr().getTargetEventHandle().mouseDragged(scaledEvent);\r\n      }\r\n\t   \r\n  }\r\nmouseMove(event){\r\n\t   event.preventDefault();\r\n\t   if (this.getModel().getUnit() == null) { \r\n\t\t\treturn; \r\n\t   }\r\n\t   \r\n\t   var scaledEvent =this.getScaledEvent(event);  \r\n\t     \r\n\t   if(this.getEventMgr().getTargetEventHandle() != null) {\t\t\r\n\t            this.getEventMgr().getTargetEventHandle().mouseMove(scaledEvent);\r\n\t   }\r\n\r\n}\r\nmouseWheelMoved(event){\r\n    event.preventDefault();    \r\n\t  if (this.getModel().getUnit() == null) { \r\n\t\treturn; \r\n\t  }\r\n\tvar e=this.getScaledEvent(event);\r\n\r\n\tif(event.originalEvent.wheelDelta /120 > 0) {\r\n\t\t   this.zoomOut(e.windowx,e.windowy);\r\n      }\r\n      else{\r\n\t\t   this.zoomIn(e.windowx,e.windowy);\r\n      }\r\n}\r\n\r\nzoomIn(x,y){\r\n    if(this.getModel().getUnit().getScalableTransformation().scaleIn()){\r\n        this.viewportWindow.scaleIn(x,y, this.getModel().getUnit().getScalableTransformation());\r\n        this.repaint();         \r\n    }else{\r\n        return false;\r\n    } \r\n\t//this.hbar.off(); \r\n\t//this.vbar.off(); \r\n\r\n\t//set new maximum \r\n\t//this.hbar.jqxScrollBar({ value:this.viewportWindow.x,width: this.width, height: 18, min: 0, max: parseInt(this.getModel().getUnit().getWidth()*this.getModel().getUnit().getScalableTransformation().getScale()-this.width)});\r\n\t//this.vbar.jqxScrollBar({ value:this.viewportWindow.y,width: 18, min: 0, max: parseInt(this.getModel().getUnit().getHeight()*this.getModel().getUnit().getScalableTransformation().getScale()-this.height)});\r\n\t\r\n\t//this.hbar.on('valueChanged', j$.proxy(this.hStateChanged,this));\r\n\t//this.vbar.on('valueChanged',j$.proxy(this.vStateChanged,this));\r\n\t\r\n\treturn true;\r\n}\r\nzoomOut(x,y){\r\n    if(this.getModel().getUnit().getScalableTransformation().scaleOut()){\r\n            this.viewportWindow.scaleOut(x,y, this.getModel().getUnit().getScalableTransformation());\r\n            this.repaint();                       \r\n    }else{\r\n            return false;\r\n    }\r\n\r\n\t//this.hbar.off(); \r\n\t//this.vbar.off(); \r\n              //set new maximum \r\n   \t//this.hbar.jqxScrollBar({value:this.viewportWindow.x, width: this.width, height: 18, min: 0, max: parseInt(this.getModel().getUnit().getWidth()*this.getModel().getUnit().getScalableTransformation().getScale()-this.width)});\r\n\t//this.vbar.jqxScrollBar({value:this.viewportWindow.y, width: 18, min: 0, max: parseInt(this.getModel().getUnit().getHeight()*this.getModel().getUnit().getScalableTransformation().getScale()-this.height)});\r\n\r\n\t//this.hbar.on('valueChanged', j$.proxy(this.hStateChanged,this));\r\n\t//this.vbar.on('valueChanged',j$.proxy(this.vStateChanged,this));\r\n\t\r\n\treturn true;\r\n}\r\n//vStateChanged(event){\r\n//    this.viewportWindow.y= parseInt(event.currentValue);\r\n//    this.repaint();\t\r\n//  }\r\n//hStateChanged(event){\r\n//    this.viewportWindow.x= parseInt(event.currentValue);\r\n//    this.repaint();\r\n//  }\r\nscreenResized(e){\t  \r\n\t  var container = j$(this.canvas).parent();\t  \t    \t  \r\n\t  var oldwidth=this.width;\r\n\t  this.width=j$(container).width();  //mind combo width\r\n\t  \r\n\t  if(oldwidth==this.width){\r\n\t\t  return;\r\n\t  }\r\n\t  //set canvas width\r\n\t  this.canvas.attr('width',this.width);\r\n\t  this.componentResized();\r\n\t  this.repaint();\r\n\t}\r\ncomponentResized(){\r\n    if(this.getModel().getUnit()==null){\r\n  \t  this.setSize(1,1);  \t  \r\n    }else{\r\n  \t  this.setSize(this.width,this.height);         \r\n    }  \r\n\t  \r\n}\r\nsetContainerCursor(_cursor) {\r\n    this.cursor = _cursor;\r\n}\r\ngetContainerCursor() {\r\n    return this.cursor;\r\n}\r\nrepaint(){\r\n\t  if(this.getModel().getUnit()!=null){\r\n      this.ctx.fillStyle = this.backgroundColor;\r\n      this.ctx.fillRect(0, 0, this.width, this.height); \r\n\t  this.getModel().getUnit().paint(this.ctx,this.viewportWindow);\r\n      if (this.cursor != null) {\r\n      \tthis.cursor.paint(this.ctx,this.viewportWindow, this.getModel().getUnit().getScalableTransformation(),core.Layer.Copper.All.getLayerMaskID());\r\n\r\n      }\r\n\t  }else{\r\n\t        this.ctx.clearRect(0, 0, this.width, this.height);  \r\n\t  }\r\n}\r\n}\r\nmodule.exports ={\r\n\t\tUnit,\r\n\t\tUnitContainer,\r\n\t\tUnitComponent,\r\n\t\tUnitMgr\r\n}\r\n","var core=require('core/core');\r\nvar d2=require('d2/d2');\r\n\r\n    /*\r\n     * Find out in which quadrant is a point B, in regard to a point origine A\r\n     *\r\n     *        2   |  1\r\n     *        ----------\r\n     *        3   |  4\r\n     */\r\nvar QUADRANT=(function(){\r\n\treturn{\r\n        FIRST:1,\r\n        SECOND:2,\r\n        THIRD:3,\r\n        FORTH:4\r\n\t}\r\n})();\r\n\r\nvar POSITION=(function(){\r\n\treturn{\r\n        TOP_LEFT:1,\r\n        BOTTOM_RIGHT:2,\r\n        findPositionToLine:function(x,y,l1,l2){\r\n        \tif(l1.y==l2.y){ //horizontal line\r\n        \t   if(y<l1.y){\r\n        \t\t   return POSITION.TOP_LEFT;\r\n        \t   }else{\r\n        \t\t   return POSITION.BOTTOM_RIGHT;\r\n        \t   }\t\r\n        \t}else{ \t//vertical line\r\n         \t   if(x<l1.x){\r\n        \t\t   return POSITION.TOP_LEFT;\r\n        \t   }else{\r\n        \t\t   return POSITION.BOTTOM_RIGHT;\r\n        \t   }\t        \t\t\r\n        \t}\r\n        }\r\n\t}\r\n})();\r\n\r\n\r\nvar POINT_TO_POINT=8;\r\n\r\nvar roundDouble=function(number){\r\n\treturn roundFloat(number,4);\r\n}\r\n\r\nvar round=function(angle){\r\n\treturn Math.round(angle*100.0)/100.0;\r\n}\r\n\r\nvar roundFloat=function(value, decimals) {\r\n\treturn Number(Math.round(value+'e'+decimals)+'e-'+decimals);\r\n}\r\nvar mirrorPoint=function(A,B,sourcePoint){\r\n        let x = sourcePoint.x, y = sourcePoint.y;\r\n        //***is this right-left mirroring\r\n        if (A.x == B.x) {\r\n            //***which place in regard to x origine\r\n            if ((x - A.x) < 0)\r\n                x = A.x + (A.x - x);\r\n            else\r\n                x = A.x - (x - A.x);\r\n        } else { //***top-botom mirroring\r\n            //***which place in regard to y origine\r\n            if ((y - A.y) < 0)\r\n                y = A.y + (A.y - y);\r\n            else\r\n                y = A.y - (y - A.y);\r\n        }\r\n\r\n        sourcePoint.setLocation(x, y);\r\n        return sourcePoint;\t\r\n}\r\nvar getQuadrantLocation=function(origin,point) {\r\n        if (point.x >= origin.x && point.y <= origin.y)\r\n            return QUADRANT.FIRST;\r\n        else if (point.x <= origin.x && point.y <= origin.y)\r\n            return QUADRANT.SECOND;\r\n        else if (point.x <= origin.x && point.y >= origin.y)\r\n            return QUADRANT.THIRD;\r\n        else\r\n            return QUADRANT.FORTH;\r\n}\r\nvar drawCrosshair=function(g2,viewportWindow,scale,resizingPoint,length,points){\r\n        let line = new d2.Segment(0,0,0,0);\r\n        \r\n\t\tg2.lineWidth = 1;\r\n\r\n        points.forEach(function(point){\r\n            if (resizingPoint != null && resizingPoint.equals(point))\r\n                g2.strokeStyle = 'yellow';\r\n            else\r\n                g2.strokeStyle='blue';\r\n\t\t\t\r\n            line.set(point.x - length, point.y, point.x + length, point.y);\r\n            line.scale(scale.getScale());\r\n            line.move(-viewportWindow.x,-viewportWindow.y);\r\n            line.paint(g2);\r\n\r\n            line.set(point.x, point.y - length, point.x, point.y + length);            \r\n            line.scale(scale.getScale());\r\n            line.move(-viewportWindow.x,-viewportWindow.y);\r\n            line.paint(g2);\r\n        });\t\r\n\r\n}\r\n\r\nvar radians = function(degrees) {\r\n\t  return degrees * Math.PI / 180;\r\n};\r\n\t \r\nvar degrees = function(radians) {\r\n\t  return radians * 180 / Math.PI;\r\n};\r\n\r\n//var rotate=function(point, originX, originY, angle){\r\n//\tangle = angle * Math.PI / 180.0;\r\n//\t\treturn {\r\n//\t\t\t\tx: Math.cos(angle) * (point.x-originX) - Math.sin(angle) * (point.y-originY) + originX,\r\n//\t\t\t\ty: Math.sin(angle) * (point.x-originX) + Math.cos(angle) * (point.y-originY) + originY\r\n//\t    };\r\n//};\r\n\r\n/**\r\na = line point 1; b = line point 2; c = point to check against.\r\nIf the formula is equal to 0, the points are colinear.\r\nIf the line is horizontal, then this returns true if the point is above the line.\r\n**/\r\nvar isLeftPlane=function(a, b, c){\r\n   return ((c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x)) > 0;\r\n}\t\r\n/*****\r\n*\r\n*   Intersect Line with Line\r\n*\r\n*****/\r\nvar intersectLineLine = function(a1, a2, b1, b2) {\r\n    var result=false;\r\n    \r\n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\r\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\r\n    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n\r\n    if ( u_b != 0 ) {\r\n        var ua = ua_t / u_b;\r\n        var ub = ub_t / u_b;\r\n\r\n        if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\r\n            result = true;\r\n        } else {\r\n            result = false;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n/*****\r\n*\r\n*   Intersect Line with Rectangle\r\n*\r\n*****/\r\nvar intersectLineRectangle = function(a1, a2, r1, r2) {\r\n    var min        = Min(r1,r2);\r\n    var max        = Max(r1,r2);\r\n    var topRight   = new d2.Point( max.x, min.y );\r\n    var bottomLeft = new d2.Point( min.x, max.y );\r\n    \r\n    var inter1 = intersectLineLine(min, topRight, a1, a2);\r\n    var inter2 = intersectLineLine(topRight, max, a1, a2);\r\n    var inter3 = intersectLineLine(max, bottomLeft, a1, a2);\r\n    var inter4 = intersectLineLine(bottomLeft, min, a1, a2);\r\n    \r\n    return inter1||inter2||inter3||inter4;\r\n};\r\nvar Min=function(p1,p2){\r\n\treturn new d2.Point(Math.min(p1.x,p2.x),Math.min(p1.y,p2.y));\t\r\n}\r\nvar Max=function(p1,p2){\r\n    return new d2.Point(Math.max(p1.x,p2.x),Math.max(p1.y,p2.y));\t\r\n}\r\n//*******DELETE*************\r\n//var roundrect=function (g2,x, y, w, h, r) {\r\n//\tif (w < 2 * r) r = w / 2;\r\n//\tif (h < 2 * r) r = h / 2;\r\n//\t\tg2.moveTo(x+r, y);\r\n//\t\tg2.arcTo(x+w, y,   x+w, y+h, r);\r\n//\t\tg2.arcTo(x+w, y+h, x,   y+h, r);\r\n//\t\tg2.arcTo(x,   y+h, x,   y,   r);\r\n//\t\tg2.arcTo(x,   y,   x+w, y,   r);\r\n//};\r\n\r\nvar hexToDec=function(hex) {\r\n\tvar result = 0, digitValue;\r\n\thex = hex.toLowerCase();\r\n\tfor (var i = 0; i < hex.length; i++) {\r\n\t\tdigitValue = '0123456789abcdefgh'.indexOf(hex[i]);\r\n\t\tresult = result * 16 + digitValue;\r\n\t}\r\n\treturn result;\r\n}\r\nvar arrayEquals=function(a, b) {\r\n    return Array.isArray(a) &&\r\n        Array.isArray(b) &&\r\n        a.length === b.length &&\r\n        a.every((val, index) => val === b[index]);\r\n}\r\n\r\nversion=(function(){\r\n\treturn {\r\n\t\tMYWEBPCB_VERSION:\"8.0\",\r\n\t    SYMBOL_VERSION:\"8.0\",\r\n        CIRCUIT_VERSION:\"8.0\",     \r\n        FOOTPRINT_VERSION:\"8.0\", \r\n        BOARD_VERSION:\"8.0\" \r\n\t};\r\n})();\r\n\r\nmodule.exports = {\r\n  version,\r\n  isLeftPlane,\r\n  round,\r\n  roundDouble,\r\n  roundFloat,\r\n  getQuadrantLocation,  \r\n  drawCrosshair,\r\n  intersectLineRectangle,\r\n  intersectLineLine,\r\n  degrees,\r\n  radians,\r\n  hexToDec,\r\n  QUADRANT,\r\n  POINT_TO_POINT,\r\n  POSITION,\r\n  mirrorPoint,\r\n  arrayEquals\r\n}\r\n","var core=require('core/core');\r\n\r\n//**********************BaseBuilder*******************************************\r\nvar BaseBuilder=Backbone.View.extend({\r\n\t  initialize:function(component){\r\n\t\tthis.component=component;  \r\n\t  }, \t\r\n\t  setTarget:function(target){\r\n\t\t  this.target=target;\r\n\t  },\r\n\t  fillComboBox:function(items){\r\n\t\t  var result=\"\";\r\n\t\t  var len = items.length;\r\n\t\t  for (var i=0; i<len; ++i) {\r\n\t\t\t  if(items[i].selected!=undefined&&items[i].selected==true){\r\n\t\t\t\t selected=\"selected\"; \r\n\t\t\t  }else{\r\n\t\t\t\t selected=\"\"; \r\n\t\t\t  }\r\n\t\t\t  result+=\"<option value='\"+items[i].id+\"' \"+selected+\">\"+ items[i].value+\"</option>\";\r\n\t\t  }\r\n\t\t  return result;\r\n\t  },\r\n\t  reloadComboBox:function(combo,items){\r\n\t\t\tj$('#'+combo).empty();  \r\n\t\t\t  var len = items.length;\r\n\t\t\t  for (var i=0; i<len; ++i) {\r\n\t\t\t\t  if(items[i].selected!=undefined&&items[i].selected==true){\r\n\t\t\t\t\t  j$('#'+combo).append('<option value=' + items[i].id + ' selected>' +  items[i].value + '</option>'); \r\n\t\t\t\t  }else{\r\n\t\t\t\t\t  j$('#'+combo).append('<option value=' + items[i].id + '>' +  items[i].value + '</option>');\r\n\t\t\t\t  }\r\n\t\t\t  }\t\t\t\r\n\t  },\r\n\t  validateAlignmentComboText:function(combo,texture){\r\n\t\tif(texture.alignment.getOrientation()==OrientEnum.HORIZONTAL){\r\n\t\t\tthis.reloadComboBox(combo,[{id:0,value:'LEFT',selected:true},{id:1,value:'RIGHT'}]);\r\n\t\t}else{\r\n\t\t\tthis.reloadComboBox(combo,[{id:2,value:'TOP',selected:true},{id:3,value:'BOTTOM'}]);\r\n\t\t}\r\n\t\tj$('#'+combo).val(texture.alignment.get());\r\n\t  },\r\n\t  \r\n\t  toUnitX:function(value){        \r\n\t      var coordinateSystem=this.component.getModel().getUnit().getCoordinateSystem();\r\n\t      if(coordinateSystem!=null)\r\n\t    \t  return this.component.getModel().getUnit().getGrid().COORD_TO_UNIT(value-coordinateSystem.x);  \r\n\t      else\r\n\t          return this.component.getModel().getUnit().getGrid().COORD_TO_UNIT(value);      \r\n\t  },\r\n\t  toUnitY:function(value){\r\n\t      var coordinateSystem =this.component.getModel().getUnit().getCoordinateSystem();\r\n\t      if(coordinateSystem!=null)\r\n\t        return this.component.getModel().getUnit().getGrid().COORD_TO_UNIT(value-coordinateSystem.y);\r\n\t      else\r\n\t    \treturn this.component.getModel().getUnit().getGrid().COORD_TO_UNIT(value);\t  \r\n\t  },  \r\n\t  fromUnitX:function(value){\r\n\t      var coordinateSystem =this.component.getModel().getUnit().getCoordinateSystem();\r\n\t      if(coordinateSystem!=null)\r\n\t        return this.component.getModel().getUnit().getGrid().UNIT_TO_COORD(parseFloat(value))+coordinateSystem.x;\r\n\t      else\r\n\t    \treturn this.component.getModel().getUnit().getGrid().UNIT_TO_COORD(parseFloat(value));\t  \r\n\t  },\r\n\t  fromUnitY:function(value){\r\n\t      var coordinateSystem =this.component.getModel().getUnit().getCoordinateSystem();\r\n\t      if(coordinateSystem!=null)\r\n\t        return this.component.getModel().getUnit().getGrid().UNIT_TO_COORD(parseFloat(value))+coordinateSystem.y;\r\n\t      else\r\n\t    \treturn this.component.getModel().getUnit().getGrid().UNIT_TO_COORD(parseFloat(value));  \r\n\t  }\r\n\t  \r\n});\r\n\r\nmodule.exports ={\r\n\t\tBaseBuilder\r\n}","\t\t\r\nvar d2 ={\r\n\t\t\r\n};\r\n\r\nrequire(\"./shapes/fonttext\")(d2);\r\nrequire(\"./shapes/point\")(d2);\r\nrequire(\"./shapes/box\")(d2);\r\nrequire(\"./shapes/line\")(d2);\r\nrequire(\"./shapes/segment\")(d2);\r\nrequire(\"./shapes/vector\")(d2);\r\nrequire(\"./shapes/polygon\")(d2);\r\nrequire(\"./shapes/rectangle\")(d2);\r\nrequire(\"./shapes/hexagon\")(d2);\r\nrequire(\"./shapes/arc\")(d2);\r\nrequire(\"./shapes/circle\")(d2);\r\nrequire(\"./shapes/roundrectangle\")(d2);\r\nrequire(\"./shapes/oval\")(d2);\r\nrequire(\"./shapes/obround\")(d2);\r\nrequire(\"./shapes/polyline\")(d2);\r\nrequire(\"./shapes/ellipse\")(d2);\r\nrequire(\"./shapes/arcellipse\")(d2);\r\nrequire(\"./shapes/utils\")(d2);\r\n\r\nmodule.exports = d2;","module.exports = function(d2) {\r\n\r\n  d2.Arc = class Arc {\r\n        /**\r\n         *\r\n         * @param {Point} pc - arc center\r\n         * @param {number} r - arc radius\r\n         * @param {number} startAngle - start angle in degrees from 0 to 360\r\n         * @param {number} endAngle - end angle in degrees from -360 to 360        \r\n         */\r\n        constructor(pc=new d2.Point(), r=1, startAngle=0, endAngle=360) {\r\n            this.pc = pc;\r\n            this.r = r;\r\n            this.startAngle = startAngle;\r\n            this.endAngle = endAngle;            \r\n        } \r\n        clone(){\r\n           return new d2.Arc(this.pc.clone(),this.r,this.startAngle,this.endAngle);  \t\r\n        }\r\n        get area(){\r\n           return  ( Math.PI * this.r*this.r ) * ( this.sweep / 360 )\t\r\n        }\r\n        get center(){\r\n        \treturn this.pc;\r\n        }\r\n        get start() {\r\n            let p0 = new d2.Point(this.pc.x + this.r, this.pc.y);\r\n            p0.rotate(this.startAngle, this.pc);\r\n            return p0;\r\n        }\r\n                \r\n        get middle() {\r\n            let angle = this.endAngle>0 ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\r\n            let p0 = new d2.Point(this.pc.x + this.r, this.pc.y);\r\n            p0.rotate(angle, this.pc);\r\n            return p0;\r\n        }\r\n        get length() {\r\n            return Math.abs(this.sweep * this.r);\r\n        }\r\n        get end() {\r\n            let p0 = new d2.Point(this.pc.x + this.r, this.pc.y);\r\n            p0.rotate((this.startAngle+this.endAngle), this.pc);\r\n            return p0;\r\n        }\r\n        \r\n        get sweep(){\r\n        \treturn Math.abs(this.endAngle);\r\n        }\r\n        get box(){\r\n        \tlet points = [];\r\n            let p1=this.pc.clone();p1.translate(this.r, 0);\r\n            if (p1.on(this)) {\r\n                points.push(p1);\r\n            }            \r\n            let p2=this.pc.clone();p2.translate(0,this.r);\r\n            if (p2.on(this)) {\r\n                points.push(p2);\r\n            }            \r\n            let p3=this.pc.clone();p3.translate(-this.r,0);\r\n            if (p3.on(this)) {\r\n                points.push(p3);\r\n            }\r\n            let p4=this.pc.clone();p4.translate(0,-this.r);\r\n            if (p4.on(this)) {\r\n                points.push(p4);\r\n            }\r\n        \t\r\n            points.push(this.start);\r\n            points.push(this.end);\r\n            return new d2.Box(points);\r\n        }\r\n      \r\n        get vertices() {\r\n            return this.box.vertices;\r\n        }\r\n        \r\n        isPointOn(pt,diviation){\r\n    \t\tlet isInside=false;\r\n        \tlet clickedAngle =new d2.Vector(this.pc,pt).slope;    \t\t            \t\t\r\n    \t\tlet angle = 360 - clickedAngle;\t\t\r\n    \t\t//test angle\t\t\r\n    \t    if(this.endAngle>0){ //counter clockwise    \t    \t\r\n    \t    \tif(angle-this.startAngle>0){\r\n    \t    \t  angle=(angle-this.startAngle);\r\n    \t    \t}else{\r\n    \t    \t  angle=((360-this.startAngle)+angle);\t\r\n    \t    \t}\r\n    \t    \tisInside=(angle<this.endAngle);\r\n    \t    }else{ //clockwise    \t    \t\r\n    \t    \tif((angle-this.startAngle)>0){\r\n    \t    \t  angle=((angle-360)-this.startAngle);\t\r\n    \t    \t}else{\r\n    \t    \t  angle=angle-this.startAngle;\r\n    \t    \t}\r\n    \t    \tisInside=(Math.abs(angle)<Math.abs(this.endAngle));\r\n    \t    }    \t\t\r\n    \t\tif(!isInside){\r\n    \t\t\treturn false;\r\n    \t\t}\r\n    \t\t//test distance\r\n    \t\tlet dist=this.pc.distanceTo(pt);\r\n\r\n    \t\treturn ((this.r-diviation)<dist&&(this.r+diviation)>dist);\r\n    \t\t\t    \t\t\r\n        }\r\n        contains(pt){\r\n        \t//is on circle\r\n            if (!d2.utils.EQ(this.pc.distanceTo(pt), this.r)){\r\n            \t//is outside of the circle\r\n            \tif (d2.utils.GE(this.pc.distanceTo(pt), this.r)){\r\n                    return false;\r\n            \t}                \r\n            }\r\n        \t\r\n            let l=new d2.Line(this.pc,this.middle);\r\n        \tlet projectionPoint=l.projectionPoint(pt);\r\n        \t\r\n        \tlet mid=new d2.Point((this.start.x+this.end.x)/2,(this.start.y+this.end.y)/2);  \r\n        \t\r\n        \tlet dist1=this.middle.distanceTo(mid);\r\n        \tlet dist2=this.middle.distanceTo(projectionPoint);\r\n        \t\r\n        \treturn d2.utils.GE(dist1,dist2);\r\n\r\n        }\r\n        move(offsetX,offsetY){\r\n          this.pc.move(offsetX,offsetY);\t\r\n        }\r\n        rotate(angle,center = {x:0, y:0}){\r\n        \t this.pc.rotate(angle,center);\r\n        \t this.startAngle+=angle;\r\n        \t if(this.startAngle>=360){\r\n        \t\t this.startAngle-=360;\r\n        \t }\r\n        \t if(this.startAngle<0){\r\n        \t\t this.startAngle+=360; \r\n        \t }\r\n        }\r\n        mirror(line){\r\n        \tthis.pc.mirror(line);\r\n        \tthis.endAngle=-1*this.endAngle;\r\n        \tif(line.isVertical){\r\n        \t\tif(this.startAngle>=0&&this.startAngle<=180){\r\n        \t\t  this.startAngle=180-this.startAngle;  \r\n        \t\t}else{\r\n        \t\t  this.startAngle=180+(360-this.startAngle);\t\t\r\n        \t\t}\r\n        \t}else{\r\n        \t\tthis.startAngle=360-this.startAngle; \r\n        \t}\t\r\n        \t\r\n        }\r\n        scale(alpha){\r\n           this.pc.scale(alpha);\r\n           this.r*=alpha;\r\n        }\r\n        convert(start,extend){\r\n    \t\t\r\n    \t\tlet s = 360 - start;\r\n    \t\tlet e=0;\r\n    \t\tif(extend>0){\r\n    \t\t e = 360 - (start+extend); \r\n    \t\t}else{\r\n    \t\t if(start>Math.abs(extend)){  \t\r\n    \t\t   e = s+Math.abs(extend); \r\n    \t\t }else{\r\n               e = Math.abs(extend+start);   \t\t \r\n    \t\t }\t\t \r\n    \t\t}\r\n    \t\treturn  [s,e];\r\n        }\r\n        paint(g2){\r\n        \tg2.beginPath();\r\n        \t//convert to HTML Canvas API\r\n    \t\tlet angles=this.convert(this.startAngle,this.endAngle);\r\n        \tg2.arc(this.pc.x,this.pc.y,this.r, d2.utils.radians(angles[0]), d2.utils.radians(angles[1]),this.endAngle>0);        \t\r\n        \t\r\n        \tif(g2._fill!=undefined&&g2._fill){\r\n          \t  g2.fill();\t\r\n          \t}else{\r\n          \t  g2.stroke();\r\n          \t}            \r\n        \t\r\n            //let ps=this.start;\r\n            //let pe=this.end;\r\n            //let pm=this.middle;\r\n            //d2.utils.drawCrosshair(g2,5,[p1,p2,p3,p4]);\r\n            \r\n        }\r\n        \r\n\r\n    }\r\n}","module.exports = function(d2) {\r\n    /**\r\n    *\r\n    * @param {Point} pc - arc center\r\n    * @param {number} w - horizontal radius\r\n    * @param {number} w - vertical radius\r\n    * @param {number} startAngle - start angle in degrees from 0 to 360\r\n    * @param {number} endAngle - end angle in degrees from -360 to 360        \r\n    */\r\n    d2.Arcellipse = class Arcellipse extends d2.Ellipse {\r\n        constructor(pc,w,h) {\r\n      \t    super(pc,w,h);    \t\r\n            this.startAngle = 20;\r\n            //this.rotation=0;\r\n            this.endAngle = 190;           \r\n        }\r\n        clone(){\r\n        \tlet copy=new d2.Arcellipse(this.pc.clone(),this.w,this.h);\r\n            copy.startAngle = this.startAngle;\r\n            copy.endAngle = this.endAngle;\r\n        \tcopy.rotation=this.rotation;\r\n        \treturn copy;\r\n        }\r\n        get center(){\r\n        \treturn this.pc;\r\n        }\r\n        get start() {\r\n        \tlet angles=this._convert(this.startAngle,this.endAngle);\r\n            let x=this.pc.x+(this.w*Math.cos(d2.utils.radians(angles[0])));\r\n            let y=this.pc.y+(this.h*Math.sin(d2.utils.radians(angles[0])));\r\n            \r\n            let p=new d2.Point(x,y);\r\n            p.rotate(this.rotation,this.pc);\r\n            return  p;\r\n        }\r\n        get sweep(){        \r\n        \treturn Math.abs(this.endAngle);\r\n\t\t}\r\n        get middle() {\r\n            let angle = this.endAngle>0 ? this.startAngle + this.sweep/2 : this.startAngle - this.sweep/2;\r\n        \r\n\t\t\tlet x=this.pc.x+(this.w*Math.cos(-1*d2.utils.radians(angle)));\r\n\t\t\tlet y=this.pc.y+(this.h*Math.sin(-1*d2.utils.radians(angle)));\r\n        \r\n\t\t\tlet p=new d2.Point(x,y);\r\n\t\t\tp.rotate(this.rotation,this.pc);\r\n\t\t\treturn  p;       \r\n\t\t}\t\t\r\n        get end() {\r\n        \tlet angles=this._convert(this.startAngle,this.endAngle);\r\n            let x=this.pc.x+(this.w*Math.cos(d2.utils.radians(angles[1])));\r\n            let y=this.pc.y+(this.h*Math.sin(d2.utils.radians(angles[1])));\r\n            \r\n            let p=new d2.Point(x,y);\r\n            p.rotate(this.rotation,this.pc);\r\n            return  p; \r\n        }\r\n        get vertices(){        \t\r\n            this.vert[0].set(this.pc.x-this.w,this.pc.y);\r\n            this.vert[1].set(this.pc.x,this.pc.y-this.h);\r\n            this.vert[2].set(this.pc.x+this.w,this.pc.y);\r\n            this.vert[3].set(this.pc.x,this.pc.y+this.h);       \t        \t\r\n            let s=this.start;\r\n            let e=this.end;\r\n            this.vert[4].set(s.x,s.y);\r\n            this.vert[5].set(e.x,e.y);   \r\n            return this.vert;\r\n        }\r\n        contains( x,  y) {    \r\n    \t\tvar c=super.contains(x, y);\r\n    \t\tif(!c) {\r\n    \t\t\treturn c;\r\n    \t\t}\r\n    \t\r\n        \tlet l=new d2.Line(this.start,this.end);\r\n        \tlet result=l.isLeftOrTop(this.middle);\r\n        \t//are they on the same line side?\r\n        \treturn (l.isLeftOrTop(new d2.Point(x,y))==result);    \t    \t\r\n        }\r\n        \r\n        isPointOn(pt,diviation){\r\n    \t//same as ellipse\r\n        let alpha=-1*d2.utils.radians(this.rotation);\r\n        let cos = Math.cos(alpha),\r\n        sin = Math.sin(alpha);\r\n        let dx  = (pt.x - this.pc.x),\r\n        dy  = (pt.y - this.pc.y);\r\n        let tdx = cos * dx + sin * dy,\r\n        tdy = sin * dx - cos * dy;\r\n\r\n       \r\n        let pos= (tdx * tdx) / (this.w * this.w) + (tdy * tdy) / (this.h * this.h);\r\n        \r\n        \r\n        let v=new d2.Vector(this.pc,pt);\r\n\t    let norm=v.normalize();\t\t\t  \r\n\t\t//1.in\r\n\t    if(pos<1){\r\n\t\t    let xx=pt.x +diviation*norm.x;\r\n\t\t\tlet yy=pt.y +diviation*norm.y;\r\n\t\t\t//check if new point is out\r\n\t\t\tif(super.contains(xx,yy)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t    }else{  //2.out\r\n\t\t    let xx=pt.x - diviation*norm.x;\r\n\t\t\tlet yy=pt.y - diviation*norm.y;\r\n\t\t\t//check if new point is in\r\n\t\t\tif(!this.contains(xx,yy)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t    \t\r\n\t    }    \t\r\n        //narrow down to start and end point/angle\r\n        \tlet start=new d2.Vector(this.pc,this.start).slope;\r\n        \tlet end=new d2.Vector(this.pc,this.end).slope;        \t        \t        \t        \t\r\n        \tlet clickedAngle =new d2.Vector(this.pc,pt).slope;\r\n        \t\r\n        \tif(this.endAngle>0){\r\n        \t  if(start>end){\r\n        \t\t  return (start>=clickedAngle)&&(clickedAngle>=end);\t\r\n        \t  }else{\r\n        \t\t  return !((start<=clickedAngle)&&(clickedAngle<=end));        \t\t  \r\n        \t  }\r\n        \t}else{\r\n        \t if(start>end){\r\n    \t\t\treturn !((start>=clickedAngle)&&(clickedAngle>=end));\r\n    \t\t }else{        \t\t\t\r\n    \t\t\treturn (start<=clickedAngle)&&(clickedAngle<=end);\r\n    \t\t }        \t\t\r\n        \t}       \t        \t        \t        \t\r\n        }\r\n        _convert(start,extend){\r\n    \t\t\r\n    \t\tlet s = 360 - start;\r\n    \t\tlet e=0;\r\n    \t\tif(extend>0){\r\n    \t\t e = 360 - (start+extend); \r\n    \t\t}else{\r\n    \t\t if(start>Math.abs(extend)){  \t\r\n    \t\t   e = s+Math.abs(extend); \r\n    \t\t }else{\r\n               e = Math.abs(extend+start);   \t\t \r\n    \t\t }\t\t \r\n    \t\t}\r\n    \t\treturn  [s,e];\r\n        } \r\n        mirror(line){\r\n        \tthis.pc.mirror(line);\r\n        \tthis.endAngle=-1*this.endAngle;\r\n        \tif(line.isVertical){\r\n        \t\tif(this.startAngle>=0&&this.startAngle<=180){\r\n        \t\t  this.startAngle=180-this.startAngle;  \r\n        \t\t}else{\r\n        \t\t  this.startAngle=180+(360-this.startAngle);\t\t\r\n        \t\t}\r\n        \t}else{\r\n        \t\tthis.startAngle=360-this.startAngle; \r\n        \t}\t\r\n        \t\r\n        }        \r\n        paint(g2){\r\n        \tg2.beginPath();  \r\n           \t\r\n        \t//d2.utils.drawCrosshair(g2,5,[this.start,this.end]);\r\n        \t\r\n           \tlet alpha=this.convert(this.rotation);           \t\r\n           \tlet angles=this._convert(this.startAngle,this.endAngle);\r\n           \r\n           \t\r\n           \tg2.beginPath();\r\n           \tg2.ellipse(this.pc.x,this.pc.y,this.w, this.h,alpha,d2.utils.radians(angles[0]), d2.utils.radians(angles[1]),this.endAngle>0);\r\n        \t  if(g2._fill!=undefined&&g2._fill){\r\n            \t  g2.fill();\t\r\n              }else{\r\n            \t  g2.stroke();\r\n              }\r\n        }         \r\n        \r\n    }\r\n}","module.exports = function(d2) {\r\n\r\n  d2.Box = class Box {\r\n\t  constructor(...args) {\r\n          if (typeof(args[0]) == \"number\") {   // 4 numbers for min and max points\r\n              this.min = new d2.Point(args[0],args[1]);\r\n              this.max = new d2.Point(args[2],args[3]);\r\n              return;\r\n          }\r\n          \r\n          if(arguments.length==1){              //array of points\r\n        \t  let x=Number.MAX_VALUE,y=Number.MAX_VALUE;\r\n        \t  for(var i = 0; i < arguments[0].length; ++ i){\r\n        \t     x=Math.min(x,arguments[0][i].x);\r\n        \t     y=Math.min(y,arguments[0][i].y);\r\n        \t  }  \r\n        \t  this.min=new d2.Point(x,y);\r\n\r\n        \t  x=Number.MIN_VALUE,y=Number.MIN_VALUE;\r\n        \t  for(var i = 0; i < arguments[0].length; ++ i){\r\n         \t     x=Math.max(x,arguments[0][i].x);\r\n         \t     y=Math.max(y,arguments[0][i].y);\r\n         \t  }  \r\n        \t  this.max=new d2.Point(x,y);\r\n        \t  return;\r\n          }\r\n\t  }\r\n\t  static fromRect(x,y,width,height){\r\n\t\t\tvar box=new d2.Box(0,0,0,0);\r\n\t\t\tbox.setRect(x,y,width,height);\r\n\t\t\treturn box;\r\n\t  }\r\n\t  clone(){\r\n\t\t  return new d2.Box([this.min,this.max]);\r\n\t  }\r\n\t  get area(){\r\n\t\t return (this.max.x-this.min.x)*(this.max.y-this.min.y);  \r\n\t  }\r\n\t  setRect(x,y,width,height){\r\n\t\t  this.min.set(x,y);\r\n\t\t  this.max.set(x+width,y+height);\r\n\t  }\r\n      get center() {\r\n          return new d2.Point( (this.min.x + this.max.x)/2, (this.min.y + this.max.y)/2 );\r\n      }\r\n      get x(){\r\n    \t return this.min.x; \r\n      }\r\n      get y(){\r\n    \t  return this.min.y; \r\n      }\r\n      get width(){\r\n    \t  return this.max.x-this.min.x;\r\n      }\r\n      \r\n      get height(){\r\n    \t  return this.max.y-this.min.y;\r\n      }\r\n      scale(alpha){\r\n    \tthis.min.scale(alpha);\r\n    \tthis.max.scale(alpha);\r\n      }\r\n      /**\r\n       * Returns new box merged with other box\r\n       * @param {Box} other_box - Other box to merge with\r\n       * @returns {Box}\r\n       */\r\n      merge(other_box) {\r\n          return new d2.Box(\r\n              this.min === undefined ? other_box.min.x : Math.min(this.min.x, other_box.min.x),\r\n              this.min === undefined ? other_box.min.y : Math.min(this.min.y, other_box.min.y),\r\n              this.max === undefined ? other_box.max.x : Math.max(this.max.x, other_box.max.x),\r\n              this.max === undefined ? other_box.max.y : Math.max(this.max.y, other_box.max.y)\r\n          );\r\n      }\r\n      \r\n      contains(...args){\r\n    \tif(args.length==1){  //point  \r\n    \t  if(this.min.x<=args[0].x&&args[0].x<=this.max.x){\r\n    \t    if(this.min.y<=args[0].y&&args[0].y<=this.max.y)\r\n    \t\t  return true;\r\n    \t  }\r\n    \t  return false;\r\n    \t}else{       //coordinates\r\n      \t  if(this.min.x<=args[0]&&args[0]<=this.max.x){\r\n      \t    if(this.min.y<=args[1]&&args[1]<=this.max.y)\r\n      \t\t  return true;\r\n      \t  }\r\n      \t  return false;    \t\t\r\n    \t}  \r\n      }\r\n      not_intersects(other) {\r\n          return (\r\n              this.max.x < other.min.x ||\r\n              this.min.x > other.max.x ||\r\n              this.max.y < other.min.y ||\r\n              this.min.y > other.max.y\r\n          );\r\n      }\r\n\t  grow(offset){\r\n        this.min.x-=offset;\r\n        this.min.y-=offset;\r\n        \r\n        this.max.x+=offset;\r\n        this.max.y+=offset;\r\n      }\r\n      move(offsetX,offsetY){\r\n    \t  this.min.move(offsetX,offsetY);\r\n    \t  this.max.move(offsetX,offsetY);\r\n      }\r\n      intersects(other) {\r\n    \t  if (other instanceof d2.Box) {\r\n    \t\t  return !this.not_intersects(other);  \r\n    \t  }else{\r\n    \t\t  //window rect\r\n    \t\t  let o=new d2.Box(other.x,other.y,other.x+other.width,other.y+other.height);\r\n    \t\t  return !this.not_intersects(o);\r\n    \t  }\r\n          \r\n      }\r\n      \r\n\t  get vertices() {\r\n\t\t return [this.min,new d2.Point(this.max.x,this.min.y),this.max,new d2.Point(this.min.x,this.max.y)];\t\r\n\t  }\r\n      paint(g2){\r\n    \t    g2.beginPath();\r\n    \t    g2.rect(this.min.x,this.min.y,this.width,this.height);                   \r\n        \t  if(g2._fill!=undefined&&g2._fill){\r\n            \t  g2.fill();\t\r\n              }else{\r\n            \t  g2.stroke();\r\n              }\r\n      }\r\n  }\r\n}","module.exports = function(d2) {\r\n\r\n    d2.Circle = class Circle {\r\n        /**\r\n        *\r\n        * @param {Point} pc - circle center point\r\n        * @param {number} r - circle radius\r\n        */\r\n       constructor(pc, r) {\r\n           this.pc = pc;\r\n           this.r = r;\r\n       }\r\n       clone() {\r\n           return new d2.Circle(this.pc.clone(), this.r);\r\n       } \r\n       assign(drawing) {\r\n    \tthis.pc.set(drawing.pc);\r\n    \tthis.r=drawing.r;\r\n       }\r\n       get area(){\r\n           return  ( Math.PI * this.r*this.r );\t\r\n       }\r\n       get center() {\r\n           return this.pc;\r\n       }\r\n       get radius(){\r\n    \t   return this.r;\r\n       }\r\n       get box() {\r\n           return new d2.Box(\r\n               this.pc.x - this.r,\r\n               this.pc.y - this.r,\r\n               this.pc.x + this.r,\r\n               this.pc.y + this.r\r\n           );\r\n       }       \r\n\t   get vertices() {\r\n\t\t   return [new d2.Point(this.pc.x-this.r,this.pc.y),new d2.Point(this.pc.x,this.pc.y-this.r),new d2.Point(this.pc.x+this.r,this.pc.y),new d2.Point(this.pc.x,this.pc.y+this.r)];\r\n\t   }\r\n       contains(pt){\r\n    \t   return d2.utils.LE(pt.distanceTo(this), this.r);    \t   \r\n       }\r\n       isPointOn(pt,diviation){\r\n\t\t  //test distance\r\n\t\t  let dist=this.pc.distanceTo(pt);\r\n\t\t  return ((this.r-diviation)<dist&&(this.r+diviation)>dist);\r\n\t   }\r\n       rotate(angle,center = {x:this.pc.x, y:this.pc.y}){\r\n    \t  this.pc.rotate(angle,center);    \t  \r\n       }\r\n       move(offX,offY){\r\n    \t  this.pc.move(offX,offY); \r\n       }\r\n       mirror(line){\r\n    \t   this.pc.mirror(line);\r\n       }\r\n       scale(alpha){\r\n    \t   this.pc.scale(alpha);\r\n    \t   this.r*=alpha;\r\n       }\r\n       grow(offset){\r\n     \t  this.r+=offset; \r\n       }\r\n       paint(g2){\r\n       \tg2.beginPath();       \t\r\n       \tg2.arc(this.pc.x,this.pc.y,this.r,0,2*Math.PI,true);\r\n    \t  if(g2._fill!=undefined&&g2._fill){\r\n        \t  g2.fill();\t\r\n          }else{\r\n        \t  g2.stroke();\r\n          }\r\n       }       \r\n       \r\n    }\r\n}    ","module.exports = function(d2) {\r\n\r\n    d2.Ellipse = class Ellipse {\r\n        constructor(pc,w,h) {\r\n            this.pc = pc;\r\n            this.w = w;\r\n            this.h=h;\r\n        \tthis.vert=[new d2.Point(0,0),new d2.Point(0,0),new d2.Point(0,0),new d2.Point(0,0),new d2.Point(0,0),new d2.Point(0,0)];        \t        \t\r\n            this.rotation=0;\r\n        }\r\n        clone(){\r\n        \tlet copy=new d2.Ellipse(this.pc.clone(),this.w,this.h);\r\n        \tcopy.rotation=this.rotation;\r\n        \treturn copy;\r\n        }\r\n        get box(){\r\n        \tlet topleft=this.pc.clone();\r\n        \ttopleft.move(-this.w,-this.h);\r\n        \tlet rect=new d2.Rectangle(topleft,2*this.w,2*this.h);\r\n        \trect.rotate(this.rotation,this.pc);\r\n        \treturn rect.box;\r\n        }\r\n\t\trotate(angle,center = {x:this.box.center.x, y:this.box.center.y}){\r\n\t\t\tthis.pc.rotate(angle,center);\r\n\t\t\tthis.rotation=angle;\r\n\t\t}\r\n        scale(alpha){\r\n     \t   this.pc.scale(alpha);\r\n     \t   this.w*=alpha;\r\n     \t   this.h*=alpha;\r\n        }\r\n        isPointOn(pt,diviation){\r\n        \t//find where the point is    \r\n        \tlet x=pt.x;\r\n        \tlet y=pt.y;\r\n        \tlet alpha=this.convert(this.rotation);\r\n            var cos = Math.cos(alpha),\r\n                sin = Math.sin(alpha);\r\n            var dx  = (x - this.pc.x),\r\n                dy  = (y - this.pc.y);\r\n            var tdx = cos * dx + sin * dy,\r\n                tdy = sin * dx - cos * dy;\r\n\r\n            let pos=(tdx * tdx) / (this.w * this.w) + (tdy * tdy) / (this.h * this.h);\r\n            //is pt on shape\r\n            if(d2.utils.EQ(pos,1)){\r\n            \treturn true;\r\n            }\r\n            let v=new d2.Vector(this.pc,pt);\r\n\t\t    let norm=v.normalize();\t\t\t  \r\n\t\t\t//1.in\r\n\t\t    if(pos<1){\r\n\t\t\t    let xx=pt.x +diviation*norm.x;\r\n\t\t\t\tlet yy=pt.y +diviation*norm.y;\r\n\t\t\t\t//check if new point is out\r\n\t\t\t\tif(!this.contains(new d2.Point(xx,yy))){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t    }else{  //2.out\r\n\t\t\t    let xx=pt.x - diviation*norm.x;\r\n\t\t\t\tlet yy=pt.y - diviation*norm.y;\r\n\t\t\t\t//check if new point is in\r\n\t\t\t\tif(this.contains(new d2.Point(xx,yy))){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\t\t    \t\r\n\t\t    }\r\n\r\n          \treturn false;\r\n        }        \r\n        contains(...args) {\r\n\t       let x,y;\r\n\t       if(args.length==1){\r\n        \t  x=args[0].x;\r\n        \t  y=args[0].y;\t\t\r\n\t       }else{\r\n        \t  x=args[0];\r\n        \t  y=args[1];\t\t\t\t\r\n\t\t   }\r\n        \tlet alpha=this.convert(this.rotation);\r\n            var cos = Math.cos(alpha),\r\n                sin = Math.sin(alpha);\r\n            var dx  = (x - this.pc.x),\r\n                dy  = (y - this.pc.y);\r\n            var tdx = cos * dx + sin * dy,\r\n                tdy = sin * dx - cos * dy;\r\n\r\n            return (tdx * tdx) / (this.w * this.w) + (tdy * tdy) / (this.h * this.h) <= 1;\r\n        }\r\n\r\n\t\tresize(offX,offY,pt){\r\n\t\t  if(pt.equals(this.vert[0])){\r\n\t\t\t\tlet point=this.vert[0];\r\n\t\t\t\tpoint.move(offX,offY);\r\n\r\n\t\t\t\tlet v1=new d2.Vector(pt,point);\r\n\t\t\t\tlet v2=new d2.Vector(this.pc,pt);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tlet x=pt.x +v.x;\r\n\t\t\t\t//let y=pt.y + v.y;\r\n\t\t\t\tif(this.pc.x>x){\r\n\t\t\t\t  this.w=this.pc.x-x;\r\n\t\t\t\t}\r\n\t\t  }else if(pt.equals(this.vert[1])){\r\n\t\t\t\tlet point=this.vert[1];\r\n\t\t\t\tpoint.move(offX,offY);\r\n\r\n\t\t\t\tlet v1=new d2.Vector(pt,point);\r\n\t\t\t\tlet v2=new d2.Vector(this.pc,pt);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\t//let x=pt.x +v.x;\r\n\t\t\t\tlet y=pt.y + v.y;\r\n\t\t\t\tif(this.pc.y>y){\r\n\t\t\t\t  this.h=this.pc.y-y;\r\n\t\t\t\t}\r\n\t\t  }else if(pt.equals(this.vert[2])){\r\n\t\t\t\tlet point=this.vert[2];\r\n\t\t\t\tpoint.move(offX,offY);\r\n\r\n\t\t\t\tlet v1=new d2.Vector(pt,point);\r\n\t\t\t\tlet v2=new d2.Vector(this.pc,pt);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tlet x=pt.x +v.x;\r\n\t\t\t\t//let y=pt.y + v.y;\r\n\t\t\t\tif(x>this.pc.x){\r\n\t\t\t\t   this.w=x-this.pc.x;\r\n\t\t\t\t}\r\n\t\t  }else{\r\n\t\t\t\tlet point=this.vert[3];\r\n\t\t\t\tpoint.move(offX,offY);\r\n\r\n\t\t\t\tlet v1=new d2.Vector(pt,point);\r\n\t\t\t\tlet v2=new d2.Vector(this.pc,pt);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\t//let x=pt.x +v.x;\r\n\t\t\t\tlet y=pt.y + v.y;\r\n\t\t\t\tif(y>this.pc.y){\r\n\t\t\t\t   this.h=y-this.pc.y;\r\n\t\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n        get vertices(){        \t\r\n          this.vert[0].set(this.pc.x-this.w,this.pc.y);\r\n          this.vert[1].set(this.pc.x,this.pc.y-this.h);\r\n          this.vert[2].set(this.pc.x+this.w,this.pc.y);\r\n          this.vert[3].set(this.pc.x,this.pc.y+this.h);        \t        \t\r\n          return this.vert;\r\n        }\r\n        move(offsetX,offsetY){\r\n            this.pc.move(offsetX,offsetY);       \t\r\n        }\r\n        mirror(line){\r\n        \tthis.pc.mirror(line);\t\r\n        }\r\n        convert(a){\r\n          return -1*d2.utils.radians(a);\t\r\n        }\r\n        paint(g2){\r\n        \tg2.beginPath();  \r\n           \t\r\n           \tlet alpha=this.convert(this.rotation);\r\n           \t\r\n           \tg2.ellipse(this.pc.x,this.pc.y,this.w, this.h,alpha, 0, 2 * Math.PI);\r\n        \t  if(g2._fill!=undefined&&g2._fill){\r\n            \t  g2.fill();\t\r\n              }else{\r\n            \t  g2.stroke();\r\n              }\r\n        }         \r\n        \r\n    }\r\n}","var fontmetrics=require('d2/text/fontmetrics');\r\n\r\n/*Text Rectangle\r\n*\r\n*                  |-ascent----------------|\r\n*                  |                       |\r\n*       anchorPoint|-----------------------|\r\n*                  |_descent_______________|\r\n*\r\n*\r\n*\r\n*\r\n*\r\n*/\r\nclass TextMetrics{\r\n\t constructor() {\r\n\t\t    this.BUG_FONT_SIZE=100;\r\n\t\t    this.updated = false;\r\n\t        this.fontSize=-1;\r\n\t        this.width=this.height=0;\r\n\t        this.descent=0;\r\n\t        this.ascent=0;\r\n\t        this.xHeight=0;\r\n\t\t }\t\r\n\t\r\nupdateMetrics() {\r\n       this.updated=false;\r\n       this.fontSize=-1;\r\n}\r\n/*\r\ncalculateMetrics(fontSize,text) {\r\n\t    if(this.fontSize!=fontSize){\r\n\t        this.fontSize=fontSize;\r\n\t        this.updated = false;\r\n\t    }else{\r\n\t       return;\t\r\n\t    }     \r\n\t    \r\n\t    var ctx=fontmetrics.getCanvasContext();\t    \t    \r\n\t    \t    \r\n        \tlet metrics = fontmetrics.FontMetrics({\r\n\t\t    \t  fontFamily: 'Monospace',\r\n\t\t    \t  fontWeight: 'normal',\r\n\t\t    \t  fontSize: 10,\r\n\t\t    \t  origin: 'baseline'\r\n   \t        });\r\n        \t\r\n        \tctx.font=\"\"+this.fontSize+\"px Monospace\";\t\t\r\n            this.width=ctx.measureText(text).width;\r\n            this.xHeight=metrics.xHeight;\r\n    \t    this.ascent=Math.abs(metrics.ascent*this.fontSize);\r\n\t        this.descent=Math.abs(metrics.descent*this.fontSize);\r\n\t        this.height=this.fontSize;\t     \r\n\t    \r\n\t        this.updated=true; \r\n\t    \t    \r\n\t       \t \r\n}\r\n*/\r\ncalculateMetrics(fontSize,text) {\r\n    this.fontSize=fontSize;    \r\n    var ctx=fontmetrics.getCanvasContext();\t    \t    \r\n    \t    \r\n    \tlet metrics = fontmetrics.FontMetrics({\r\n\t    \t  fontFamily: 'Monospace',\r\n\t    \t  fontWeight: 'normal',\r\n\t    \t  fontSize: 10,\r\n\t    \t  origin: 'baseline'\r\n\t        });\r\n    \t\r\n    \tctx.font=\"\"+this.fontSize+\"px Monospace\";\t\t\r\n        this.width=ctx.measureText(text).width;\r\n        this.xHeight=metrics.xHeight;\r\n\t    this.ascent=Math.abs(metrics.ascent*this.fontSize);\r\n        this.descent=Math.abs(metrics.descent*this.fontSize);\r\n        this.height=this.fontSize;\t     \r\n    \r\n        this.updated=true; \t\r\n}\r\n}\r\n/*\r\nTextAlignment={\r\n\t\t  RIGHT:0,\r\n\t\t  TOP:1,\r\n\t\t  LEFT:2,\r\n\t\t  BOTTOM:3;\r\n}\r\n*/\r\nmodule.exports = function(d2) {\r\n\td2.BaseFontText = class BaseFontText{\r\n\t\tconstructor(x,y,text,alignment,fontSize){\r\n\t\t\tthis.anchorPoint=new d2.Point(x,y);\r\n\t\t\tthis.text=text;\r\n\t\t\tthis.fontSize=fontSize;\r\n\t\t    this.alignment=alignment;\t\r\n\t\t    this.style='plain';\r\n\t\t    this.metrics=new TextMetrics();  \r\n\t\t    this.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t}\r\nclone(){\r\n\t\t\tlet copy=new BaseFontText(this.anchorPoint.x,this.anchorPoint.y,this.text,this.alignment,this.fontSize);\t\t\r\n\t\t\tcopy.style=this.style;\r\n\t\t\treturn copy;\r\n\t\t}\r\nmirror(line){\r\n\t this.anchorPoint.mirror(line); \t\r\n}\r\nsetText(text){\r\n\t\t\tthis.text=text;\r\n\t\t\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t}\t\r\nsetSize(size){\r\n\tthis.fontSize=size;\r\n\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n}\r\nscale(alpha){\r\n  \tthis.anchorPoint.scale(alpha);\r\n\tthis.fontSize=parseInt(this.fontSize*alpha);\r\n\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\r\n}\r\nsetLocation(x,y){\r\n\tthis.anchorPoint.set(x,y);\t\t\t\r\n}\r\nmove(offsetX,offsetY){\r\n\tthis.anchorPoint.move(offsetX,offsetY);\r\n}\r\nget box(){\r\n    if (this.text == null || this.text.length == 0){\r\n        return null;\r\n    }   \r\n    //recalculate or buffer\r\n    //this.metrics.calculateMetrics(this.fontSize, this.text);\r\n    var b=null;\r\n\t switch(this.alignment){\r\n\t   case 2:\r\n\t\t  b= d2.Box.fromRect(this.anchorPoint.x,this.anchorPoint.y-this.metrics.ascent,this.metrics.width,this.metrics.height);\t    \r\n\t    break;\r\n\t   case 0:\r\n\t\t  b= d2.Box.fromRect(this.anchorPoint.x-this.metrics.width,this.anchorPoint.y-this.metrics.ascent,this.metrics.width,this.metrics.height);\r\n\t   break;\r\n\t   case 1:\r\n\t\t    b=d2.Box.fromRect(this.anchorPoint.x - this.metrics.ascent,\r\n\t                          this.anchorPoint.y, this.metrics.height,this.metrics.width);\r\n\t   break;\t   \r\n\t   case 3:\r\n\t\t   \t b= d2.Box.fromRect(this.anchorPoint.x - this.metrics.ascent,\r\n\t                          this.anchorPoint.y - this.metrics.width,\r\n\t                          this.metrics.height, this.metrics.width);\r\n\t   break;\t   \t \r\n\t }\r\n\t \r\n\t return b;\r\n\t \r\n}\t\t\r\nscalePaint(g2,viewportWindow,alpha){\r\n\tlet scaledAnchorPoint=this.anchorPoint.clone();\t\t\t\r\n  \tscaledAnchorPoint.scale(alpha);\r\n  \tscaledAnchorPoint.move(-viewportWindow.x,- viewportWindow.y);\r\n  \t\r\n\tlet scaledFontSize=parseInt(this.fontSize*alpha);\r\n\t\r\n\t\r\n\tg2.font =(this.style==='plain'?'':this.style)+\" \"+(scaledFontSize)+\"px Monospace\";\r\n\tg2.textBaseline='alphabetic'; \r\n    switch(this.alignment){\r\n\t   case 2:\r\n\t   \t \tg2.textAlign = 'left';\t\t\t\t   \t \r\n\t   \t \tg2.fillText(this.text, scaledAnchorPoint.x, scaledAnchorPoint.y); \r\n\t   break;\r\n\t   case 0:\r\n\t   \t \tg2.textAlign = 'right';\r\n\t   \t \tg2.fillText(this.text, scaledAnchorPoint.x, scaledAnchorPoint.y);\r\n\t   break;\r\n\t   case 3:\r\n\t\t   \tg2.save();\r\n\t\t   \tg2.textAlign = 'left';\r\n\t\t   \tg2.translate(scaledAnchorPoint.x, scaledAnchorPoint.y);\r\n\t\t   \tg2.rotate(-0.5*Math.PI);\r\n\t\t   \tg2.fillText(this.text , 0, 0);\r\n\t\t   \tg2.restore();\r\n\t   break;\r\n\t   case 1:\r\n\t\t   g2.save();\r\n\t\t   g2.textAlign = 'right';\r\n\t\t   g2.translate(scaledAnchorPoint.x, scaledAnchorPoint.y);\r\n\t\t   g2.rotate(-0.5*Math.PI);\r\n\t\t   g2.fillText(this.text , 0, 0);\r\n\t\t   g2.restore();\t   \t   \r\n\t}\t\r\n}\t\r\npaint(g2){\t\t\t\t \r\n\t\t\r\n\t\tg2.font =(this.style==='plain'?'':this.style)+\" \"+(this.fontSize)+\"px Monospace\";\r\n\t\t\t\t let r=this.box;\r\n\t\t\t\t g2.lineWidth=1;\r\n\t\t\t\t r.paint(g2);\r\n\t\t\t\t \r\n\t    g2.textBaseline='alphabetic'; \r\n\t    switch(this.alignment){\r\n\t\t\t\t   case 2:\r\n\t\t\t\t   \t g2.textAlign = 'left';\t\t\t\t   \t \r\n\t\t\t\t\t g2.fillText(this.text, this.anchorPoint.x, this.anchorPoint.y); \r\n\t\t\t\t   break;\r\n\t\t\t\t   case 0:\r\n\t\t\t\t   \t g2.textAlign = 'right';\r\n\t\t\t\t\t g2.fillText(this.text, this.anchorPoint.x, this.anchorPoint.y);\r\n\t\t\t\t   break;\r\n\t\t\t\t   case 1:\r\n\t\t\t\t   g2.save();\r\n\t\t\t\t   g2.textAlign = 'left';\r\n\t\t\t\t   g2.translate(this.anchorPoint.x, this.anchorPoint.y);\r\n\t\t\t       g2.rotate(-0.5*Math.PI);\r\n\t\t\t       g2.fillText(this.text , 0, 0);\r\n\t\t\t       g2.restore();\r\n\t\t\t\t   break;\r\n\t\t\t\t   case 3:\r\n\t\t\t\t   g2.save();\r\n\t\t\t\t   g2.textAlign = 'right';\r\n\t\t\t\t   g2.translate(this.anchorPoint.x, this.anchorPoint.y);\r\n\t\t\t       g2.rotate(-0.5*Math.PI);\r\n\t\t\t       g2.fillText(this.text , 0, 0);\r\n\t\t\t       g2.restore();\t   \t   \r\n\t\t\t\t }\r\n\t\t\t\t \r\n\t     d2.utils.drawCrosshair(g2,6,[this.anchorPoint]);\r\n\t     \r\n\t}\t\t\r\n\t\t\r\n};\t\t\r\n/*******************************************************************************************/\t\r\n\td2.FontText = class FontText{\r\n\t\tconstructor(x,y,text,fontSize,rotation){\r\n\t\t\tthis.anchorPoint=new d2.Point(x,y);\r\n\t\t\tthis.text=text;\r\n\t\t\tthis.fontSize=fontSize;\r\n\t\t    this.rotation=rotation;\t\r\n\t\t    this.style='plain';\r\n\t\t    this.metrics=new TextMetrics();  \r\n\t\t    this.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t}\r\n\t\tclone(){\r\n\t\t\tlet copy=new FontText(this.anchorPoint.x,this.anchorPoint.y,this.text,this.fontSize,this.rotation);\t\t\r\n\t\t\tcopy.style=this.style;\r\n\t\t\treturn copy;\r\n\t\t}\r\n\t\tsetText(text){\r\n\t\t\tthis.text=text;\r\n\t\t\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t}\r\n\t\tsetSize(size){\r\n\t\t\tthis.fontSize=size;\r\n\t\t\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t}\r\n\t\tscale(alpha){\r\n\t      \tthis.anchorPoint.scale(alpha);\r\n\t\t\tthis.fontSize=parseInt(this.fontSize*alpha);\r\n\t\t\tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n\t\t\t\r\n\t\t}\r\n\t\tsetLocation(x,y){\r\n\t\t\tthis.anchorPoint.set(x,y);\t\t\t\r\n\t\t}\r\n\t\tmove(offsetX,offsetY){\r\n\t\t\tthis.anchorPoint.move(offsetX,offsetY);\r\n\t\t}\r\n\t\trotate(angle, center = {x:this.anchorPoint.x, y:this.anchorPoint.y}) {        \t\r\n        \tthis.anchorPoint.rotate((angle-this.rotation),center);\r\n        \tthis.rotation=angle;\r\n        \tthis.metrics.calculateMetrics(this.fontSize,this.text);\r\n        }\r\n\t\tmirror(line){\r\n\t\t\t this.anchorPoint.mirror(line); \t\r\n\t\t}\r\n\t\t//anchor point is text center\r\n\t\tget box(){\r\n\t\t\tlet ps=this.anchorPoint.clone();\r\n\t\t\tps.move(-(this.metrics.width/2),-(this.metrics.height/2));\r\n\t\t\t\r\n\t\t\tlet pe=this.anchorPoint.clone();\r\n\t\t\tpe.move(this.metrics.width/2,this.metrics.height/2);\t\t\t\r\n\t\t\treturn new d2.Box([ps,pe]);\t\r\n\t\t}\r\n\t\t/**\r\n\t\tif (x-x1)/(x2-x1) = (y-y1)/(y2-y1) = alpha (a constant), then the point C(x,y) will lie on the line between pts 1 & 2.\r\n\t\tIf alpha < 0.0, then C is exterior to point 1.\r\n\t\tIf alpha > 1.0, then C is exterior to point 2.\r\n\t\tFinally if alpha = [0,1.0], then C is interior to 1 & 2.\r\n\t\t*/\r\n\t\tcontains(pt){\t\t\t   \r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Based on the assumption that anchorPoint is middle normal aligned\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tlet ps=this.anchorPoint.clone();\r\n\t\t\tps.move(-(this.metrics.width/2),0);\r\n\t\t\t\r\n\t\t\tlet pe=this.anchorPoint.clone();\r\n\t\t\tpe.move(this.metrics.width/2,0);\r\n\t\t\t\r\n\t\t\tlet l=new d2.Line(ps,pe);\r\n\t\t\tl.rotate(this.rotation,this.anchorPoint);\r\n\r\n        \tlet projectionPoint=l.projectionPoint(pt);\r\n        \t\r\n\t\t    let a=(projectionPoint.x-ps.x)/((pe.x-ps.x)==0?1:pe.x-ps.x);\r\n\t\t    let b=(projectionPoint.y-ps.y)/((pe.y-ps.y)==0?1:pe.y-ps.y);\r\n\r\n\t\t    let dist=projectionPoint.distanceTo(pt);\r\n\t\t    \r\n\t\t    if(0<=a&&a<=1&&0<=b&&b<=1){  //is projection between start and end point\r\n\t\t        if(dist<=(Math.abs(this.metrics.xHeight * (this.fontSize)))){\r\n\t\t        \treturn true;\r\n\t\t        }    \r\n\t\t    \t\r\n\t\t    }\r\n\t\t\treturn false;        \t\r\n\t\t}\r\n\t\t/*\r\n\t\t * Avoid recalculating text metrics!!!!!!!!!\r\n\t\t */\r\n\t\tscalePaint(g2,viewportWindow,alpha){\r\n\t\t\tlet scaledAnchorPoint=this.anchorPoint.clone();\t\t\t\r\n\t      \tscaledAnchorPoint.scale(alpha);\r\n\t      \tscaledAnchorPoint.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\t\tlet scaledFontSize=parseInt(this.fontSize*alpha);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tg2.font =(this.style==='plain'?'':this.style)+\" \"+(scaledFontSize)+\"px Monospace\";\r\n\t\t\tg2.textBaseline='middle';\r\n\t\t\tg2.textAlign='center';\r\n\t\t\tg2.save();\r\n\t\t\tg2.translate(scaledAnchorPoint.x,scaledAnchorPoint.y);\r\n\t\t\t\r\n\t\t\tg2.rotate(d2.utils.radians(360-this.rotation));\r\n\t\t\t\r\n//\t\t\tif(0<=this.rotation&&this.rotation<90){\r\n//\t\t\t  g2.rotate(d2.utils.radians(360-this.rotation));\r\n//\t\t\t}else if(90<=this.rotation&&this.rotation<=180){\r\n//\t\t\t  g2.rotate(d2.utils.radians(180-this.rotation));\t\r\n//\t\t\t}else{\r\n//\t\t\t  g2.rotate(d2.utils.radians(360-(this.rotation-180)));\t\r\n//\t\t\t}\r\n            //let box=this.box;\r\n            //box.move(-this.anchorPoint.x,-this.anchorPoint.y);\r\n            //box.paint(g2);\r\n            \r\n\t\t\tg2.fillText(this.text,0,0);\t\t\t\t\r\n\t\t\tg2.restore();\r\n\t\t\t\r\n\t\t}\t\t\r\n\t\tpaint(g2){\t\t\t\t\t\r\n\t\t\tg2.font =(this.style==='plain'?'':this.style)+\" \"+(this.fontSize)+\"px Monospace\";\r\n\t\t\tg2.textBaseline='middle';\r\n\t\t\tg2.textAlign='center';\r\n\t\t\tg2.save();\r\n\t\t\tg2.translate(this.anchorPoint.x,this.anchorPoint.y);\r\n\t\t\tg2.rotate(d2.utils.radians(360-this.rotation));\r\n//\t\t\tif(0<=this.rotation&&this.rotation<90){\r\n//\t\t\t  g2.rotate(d2.utils.radians(360-this.rotation));\r\n//\t\t\t}else if(90<=this.rotation&&this.rotation<=180){\r\n//\t\t\t  g2.rotate(d2.utils.radians(180-this.rotation));\t\r\n//\t\t\t}else{\r\n//\t\t\t  g2.rotate(d2.utils.radians(360-(this.rotation-180)));\t\r\n//\t\t\t}\r\n            //let box=this.box;\r\n            //box.move(-this.anchorPoint.x,-this.anchorPoint.y);\r\n            //box.paint(g2);\r\n            \r\n\t\t\tg2.fillText(this.text,0,0);\t\t\t\t\r\n\t\t\tg2.restore();\r\n\r\n\t\t}\r\n\t}\r\n\r\n}","module.exports = function(d2) {\r\n\r\n    d2.Hexagon = class Hexagon extends d2.Polygon {\r\n    \tconstructor(center,width) {\r\n    \t\tsuper();\r\n    \t\tthis.center=center;\r\n    \t\tthis.width=width;    \t\t\r\n    \t\tthis.reset();\r\n    \t}\r\n    \tclone(){\r\n    \t\tlet copy=new Hexagon(this.center.clone(),this.width);    \t    \r\n    \t\tcopy.points=[];\r\n    \t    this.points.forEach(function(point){\r\n    \t    \tcopy.points.push(point.clone());\r\n    \t    });  \r\n    \t\treturn copy;\r\n    \t}\r\n        assign(drawing) {\r\n        this.center.set(drawing.center);                        \r\n        this.width=drawing.width;\r\n        \tfor(let i=0;i<this.points.length;i++) {\r\n        \t\tthis.points[i].set(drawing.points[i]);\r\n    \t    }\r\n\t    }     \r\n    \tscale(alpha){\r\n        \tthis.center.scale(alpha);\r\n        \tthis.width*=alpha;  \r\n        \tsuper.scale(alpha);        \t              \t  \r\n        }    \t\r\n\t\tsetWidth(width){\r\n\t\t\t  this.width=width;\r\n\t\t\t  this.reset();\t\t\t    \r\n\t\t}\r\n\t\tgrow(offset) {\r\n\t\t       this.width += 2 * offset;\r\n\t\t       let a =(2*offset)/Math.sqrt(3);\r\n\t\t            \r\n\r\n\t\t       let v=new d2.Vector(0,0);\r\n\t\t        \r\n\t\t            for(i=0;i<this.points.length;i++){\r\n\t\t                v.set(this.center, this.points[i]);\r\n\t\t                let norm = v.normalize();\r\n\t\t                let x = this.points[i].x + a * norm.x;\r\n\t\t                let y = this.points[i].y + a * norm.y;\r\n\t\t        \r\n\t\t                this.points[i].set(x, y);\r\n\t\t            }\r\n\t\t            \r\n\t\t            \r\n\t\t}\t\t\r\n        move(offsetX,offsetY){\r\n        \tthis.center.move(offsetX,offsetY);\r\n            this.points.forEach(point=>{\r\n            \tpoint.move(offsetX,offsetY);\r\n            });\t\r\n        }        \r\n        mirror(line) {        \r\n          super.mirror(line);\r\n          this.center.mirror(line);\r\n        }\r\n\t\trotate(angle,center = {x:this.center.x, y:this.center.y}){\r\n\t\t\tthis.center.rotate(angle,center);\r\n\t\t\tsuper.rotate(angle,center);\r\n\t\t}        \r\n    \treset(){\r\n    \t\tthis.points=[];\r\n    \t\t\r\n            let da = (2 * Math.PI) / 6;\r\n            let lim = (2 * Math.PI) - (da / 2);\r\n\r\n            let r=this.width/2;\r\n            var point=new d2.Point(r * Math.cos(0), r * Math.sin(0));\r\n            point.move(this.center.x,this.center.y);            \r\n            this.add(point);\r\n\t\t\tfor (let a = da; a < lim; a += da) {\r\n                point=new d2.Point(r * Math.cos(a),r * Math.sin(a));\r\n                point.move(this.center.x,this.center.y);\r\n                this.add(point);\r\n\t\t\t}      \t\t\r\n    \t}\r\n   \t\r\n    \t\r\n    \t\r\n    }\r\n}","module.exports = function(d2) {\r\n\t\r\n\td2.Line = class Line{\r\n\t\tconstructor(p1,p2) {\r\n\t\t\tthis.p1=p1;\r\n\t\t\tthis.p2=p2;\r\n\t\t}\r\n    /*\r\n     * Find position of point in regard to line\r\n     */\r\n        isLeftOrTop(pt){\r\n          return ((this.p2.x - this.p1.x)*(pt.y - this.p1.y) - (this.p2.y - this.p1.y)*(pt.x - this.p1.x)) > 0;\r\n        }\t\t\r\n\t    /*\r\n\t     * Find point belonging to line, which the pt projects on.\r\n\t     */\r\n\t\tprojectionPoint(pt){\r\n\t\t\tlet v1=new d2.Vector(this.p1,pt);\r\n\t\t\tlet v2=new d2.Vector(this.p1,this.p2); \t\r\n\t\t    \r\n\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\tlet x=this.p1.x +v.x;\r\n\t\t\tlet y=this.p1.y +v.y;\r\n\t\t    return new d2.Point(x,y);\r\n\t\t}\r\n\t\tget isHorizontal(){\r\n\t\t\tlet v=new d2.Vector(this.p1,this.p2);\r\n\t\t\tlet oy=new d2.Vector(1,0);\r\n\t\t\t//are they colinear?\r\n\t\t\treturn d2.utils.EQ(v.cross(oy),0);\t\t\t\r\n\t\t}\r\n\t\tget isVertical(){\r\n\t\t\tlet v=new d2.Vector(this.p1,this.p2);\r\n\t\t\tlet oy=new d2.Vector(0,1);\r\n\t\t\t//are they colinear?\r\n\t\t\treturn d2.utils.EQ(v.cross(oy),0);\r\n\t\t}\r\n        rotate(angle,center){            \r\n            this.p1.rotate(angle,center);\r\n            this.p2.rotate(angle,center);            \r\n        }\r\n        get vertices() {\r\n            return [this.p1.clone(),this.p2.clone()];\r\n        }\r\n\t\tpaint(g2){\t\t\t\r\n\t\t\tg2.moveTo(this.p1.x, this.p1.y);\r\n\t\t\tg2.lineTo(this.p2.x, this.p2.y);\r\n\t\t\t\r\n\t\t\tg2.stroke();\r\n\t\t}\r\n\t\r\n\t}\r\n}","module.exports = function(d2) {\r\n\t\r\n\td2.Obround = class Obround{\r\n\t\t/**\r\n\t\t * Obround is regarded as a line with variable thickness\r\n\t\t * @input pt - center \r\n\t\t * @input width - relative,  line width + 2  arcs at both ends\r\n\t\t * this.width=ps to pe + 2 rcs radius\r\n\t\t * @input height - relative but still height\r\n\t\t * @warning obround may change its width and height - it should recalculate its size\r\n\t\t */\r\n\t\tconstructor(pt,width,height) {\r\n\t\t\tthis.pc=pt.clone();\r\n\t\t\tthis.width=width;\r\n\t\t\tthis.height=height;\r\n\t\t\tthis.ps;\r\n\t\t\tthis.pe;\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\tclone(){\r\n\t\t\tlet copy=new Obround(this.pc,this.width,this.height);\r\n\t\t\tcopy.ps.x=this.ps.x;\r\n\t\t\tcopy.ps.y=this.ps.y;\r\n\t\t\t\r\n\t\t\tcopy.pe.x=this.pe.x;\r\n\t\t\tcopy.pe.y=this.pe.y;\r\n\t\t\treturn copy;\r\n\t\t}    \r\n        assign(drawing) {\r\n         this.pc.set(drawing.pc);                        \r\n         this.width=drawing.width;\r\n         this.height=drawing.height;\r\n         this.ps.set(drawing.ps);\r\n         this.pe.set(drawing.pe);\r\n        }    \t\t\r\n\t\tget box(){\r\n\t\t\t let r=this.getDiameter()/2;\r\n\t         //first point\t\t \r\n\t\t\t let v=new d2.Vector(this.pe,this.ps);\r\n\t\t\t let n=v.normalize();\r\n\t\t\t let a=this.ps.x +r*n.x;\r\n\t\t\t let b=this.ps.y +r*n.y;\t\t\t \r\n\t\t\t \r\n\t\t\t \t\t\t \r\n\t\t\t v.rotate90CW();\r\n\t\t\t let norm=v.normalize();\r\n\t\t\t \r\n\t\t\t let x=a +r*norm.x;\r\n\t\t\t let y=b +r*norm.y;\t\t\t \r\n\t\t\t let pa=new d2.Point(x,y);\r\n\t\t\t \r\n\t\t\t norm.invert();\r\n\t\t\t x=a +r*norm.x;\r\n\t\t\t y=b +r*norm.y;\t\t\t \r\n\t\t\t let pb=new d2.Point(x,y);\r\n\t\t\t //second point\r\n\t\t\t v=new d2.Vector(this.ps,this.pe);\r\n\t\t\t n=v.normalize();\r\n\t\t\t let c=this.pe.x +r*n.x;\r\n\t\t\t let d=this.pe.y +r*n.y;\t\t\t \r\n\t\t\t \r\n\t\t\t v.rotate90CW();\r\n\t\t\t norm=v.normalize();\r\n\t\t\t \r\n\t\t\t x=c +r*norm.x;\r\n\t\t\t y=d +r*norm.y;\t\t\t \r\n\t\t\t let pc=new d2.Point(x,y);\r\n\t\t\t \r\n\t\t\t norm.invert();\r\n\t\t\t x=c +r*norm.x;\r\n\t\t\t y=d +r*norm.y;\t\t\t \r\n\t\t\t let pd=new d2.Point(x,y);\r\n\t\t\t \r\n\t\t\t return new d2.Box(\r\n\t\t                [\r\n\t\t                pa,pb,pc,pd]\r\n\t\t            );\t\t\t\r\n\t\t}\r\n\r\n\t\tsetSize(width,height){\r\n\t\t\t  this.height=height;\r\n\t\t\t  this.width=width;\r\n\t\t\t  this.reset();\r\n\t\t}\t\t\r\n\t\t/**\r\n\t\tif (x-x1)/(x2-x1) = (y-y1)/(y2-y1) = alpha (a constant), then the point C(x,y) will lie on the line between pts 1 & 2.\r\n\t\tIf alpha < 0.0, then C is exterior to point 1.\r\n\t\tIf alpha > 1.0, then C is exterior to point 2.\r\n\t\tFinally if alpha = [0,1.0], then C is interior to 1 & 2.\r\n\t\t*/\r\n\t\tcontains(pt){\t\t\t\r\n\t\t\tlet l=new d2.Line(this.ps,this.pe);\r\n        \tlet projectionPoint=l.projectionPoint(pt);\r\n\t\t\t\r\n\t\t    let a=(projectionPoint.x-this.ps.x)/((this.pe.x-this.ps.x)==0?1:this.pe.x-this.ps.x);\r\n\t\t    let b=(projectionPoint.y-this.ps.y)/((this.pe.y-this.ps.y)==0?1:this.pe.y-this.ps.y);\r\n\t\t    \r\n\t\t    let dist=projectionPoint.distanceTo(pt);\r\n\t\t    //arc diameter\r\n\t\t    let r=(this.width>this.height?this.height:this.width);\r\n\t\t    \r\n\t\t    if(0<=a&&a<=1&&0<=b&&b<=1){  //is projection between start and end point\r\n\t\t        if(dist<=(r/2)){\r\n\t\t        \treturn true;\r\n\t\t        }    \r\n\t\t    \t\r\n\t\t    }\r\n        \t\r\n\t\t    //check the 2 circles\r\n        \tif (d2.utils.LE(this.ps.distanceTo(pt), r/2)){\r\n                return true;\r\n        \t}\r\n        \tif (d2.utils.LE(this.pe.distanceTo(pt), r/2)){\r\n                return true;\r\n        \t}\r\n        \treturn false;\r\n\t\t    \r\n\t\t}\r\n\t\tget center(){\r\n\t\t\treturn this.pc;\r\n\t\t}\t\t\r\n\t\treset(){\t\t\t\r\n\t\t\tlet w=0,h=0;\r\n\t\t\tif(this.width>this.height){  //horizontal\r\n\t\t\t  w=this.width;\r\n\t\t\t  h=this.height;\r\n   \t\t\t  let d=(w-h);//always positive\r\n\t\t\t  this.ps=new d2.Point(this.pc.x-(d/2),this.pc.y);\r\n\t\t\t  this.pe=new d2.Point(this.pc.x+(d/2),this.pc.y);\t\t\t\t\t\t\t\t   \t\r\n\t\t\t}else{\t\t\t\t\t\t //vertical\r\n\t\t\t  w=this.height;\r\n\t\t\t  h=this.width;\r\n  \t\t\t  let d=(w-h);//always positive\r\n\t\t\t  this.ps=new d2.Point(this.pc.x,this.pc.y-(d/2));\r\n\t\t\t  this.pe=new d2.Point(this.pc.x,this.pc.y+(d/2));\t\t\t\t\t\t\t\t   \t\t\t\t  \r\n\t\t\t}\r\n\t\t}\r\n    \trotate(angle,center = {x:this.pc.x, y:this.pc.y}){\r\n    \t   this.pc.rotate(angle,center);\r\n      \t   this.ps.rotate(angle,center);\r\n      \t   this.pe.rotate(angle,center);      \t   \r\n      \t}\r\n    \tscale(alpha){\r\n      \t  this.pc.scale(alpha);\r\n      \t  this.ps.scale(alpha);\r\n      \t  this.pe.scale(alpha);\r\n      \t  this.width*=alpha;\r\n      \t  this.height*=alpha;\r\n      \t  \r\n      \t}\r\n        mirror(line){\r\n            this.pc.mirror(line);\r\n            this.ps.mirror(line);\r\n            this.pe.mirror(line);        \r\n        }    \t\r\n        move(offsetX,offsetY){\r\n            this.pc.move(offsetX,offsetY);\r\n            this.ps.move(offsetX,offsetY);\r\n            this.pe.move(offsetX,offsetY);\r\n        }  \r\n\t    grow(offset,angle){\r\n            this.height +=  2*offset;\r\n            this.width +=  2*offset;\r\n            this.reset();\r\n            this.rotate(angle);\r\n\t    }\r\n\t    getDiameter(){\r\n\t        if(d2.utils.GE(this.width,this.height)){\r\n\t            return this.height;\r\n\t        } else {\r\n\t            return this.width;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t\tpaint(g2){\r\n\t\t\tg2.beginPath();\r\n\t\t\tlet l=g2.lineWidth;\r\n\t\t\tg2.lineWidth=this.getDiameter();\r\n\t\t\tg2.lineCap=\"round\";\r\n\t\t\tg2.moveTo(this.ps.x, this.ps.y);\r\n\t\t\tg2.lineTo(this.pe.x, this.pe.y);\r\n\t\t\t\r\n\t\t\tg2.stroke();\t\t    \r\n\t\t\tg2.lineWidth =l;\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n}","module.exports = function(d2) {\r\n\t\r\n\td2.Oval = class Oval extends d2.Rectangle{\r\n\t\tconstructor(p1,width,height) {\r\n\t\t  super(p1,width,height);\t\r\n\t\t  this.width=0;\r\n\t\t  this.height=0;\r\n\t\t  this.arc=0;\r\n\t\t  this.segments=[];\r\n\t      this.arcs=[];\r\n\t         \r\n\t\t  this.setWidth(width);\r\n\t\t  this.setHeight(height);\r\n\t\t  \r\n\t\t  this.reset();\r\n\t\t}\r\n        createArc(center, start, end){\r\n            let startAngle =360 -(new d2.Vector(center,start)).slope;\r\n            let endAngle = (new d2.Vector(center, end)).slope;\r\n            \r\n            let r = (new d2.Vector(center, start)).length;\r\n            return new d2.Arc(center, r, startAngle, 180);        \t\r\n        }\r\n        findArcPoints(p1,p2,p3,p4){\r\n    \t\t  let pt=p1;\r\n      \t\t  let v=new d2.Vector(pt,p2);\r\n      \t\t  let norm=v.normalize();  \t\t  \r\n      \t\t  let x=pt.x +(this.arc/2)*norm.x;\r\n      \t\t  let y=pt.y + (this.arc/2)*norm.y;  \t\t\t\r\n      \t\t  let A=new d2.Point(x,y);\r\n      \t\t  \r\n    \t\t  //end angle point \r\n   \t\t      pt=p4;\r\n   \t\t      v=new d2.Vector(pt,p3);\r\n   \t\t      norm=v.normalize();\t\t  \r\n   \t\t      x=pt.x +(this.arc/2)*norm.x;\r\n   \t\t      y=pt.y +(this.arc/2)*norm.y;\t\t\t\r\n   \t\t      let B=new d2.Point(x,y);\t\t  \t\t  \r\n   \t\t   \r\n   \t\t   \r\n   \t\t      //center is the mid point\r\n   \t\t      let C=new d2.Point((A.x+B.x)/2,(A.y+B.y)/2);\r\n   \t\t   \r\n              return [C,A,B];   \t\t     \r\n        }\r\n        //****TEST************\r\n        eval(g2){\r\n      //*********************LEFT****************************  \t\r\n  \t\t  //start angle point\r\n//  \t\t  let pt=this.points[0];\r\n//  \t\t  let v=new d2.Vector(pt,this.points[1]);\r\n//  \t\t  let norm=v.normalize();  \t\t  \r\n//  \t\t  let x=pt.x +(this.arc/2)*norm.x;\r\n//  \t\t  let y=pt.y + (this.arc/2)*norm.y;  \t\t\t\r\n//  \t\t  let A=new d2.Point(x,y);    \r\n//  \t\t  //d2.utils.drawCrosshair(g2,10,[A]);\r\n//  \t\t  \r\n//  \t\t  \r\n//\t\t  //end angle point \r\n//\t\t   pt=this.points[3];\r\n//\t\t   v=new d2.Vector(pt,this.points[2]);\r\n//\t\t   norm=v.normalize();\t\t  \r\n//\t\t   x=pt.x +(this.arc/2)*norm.x;\r\n//\t\t   y=pt.y +(this.arc/2)*norm.y;\t\t\t\r\n//\t\t   let B=new d2.Point(x,y);\t\t  \t\t  \r\n//\t\t   //d2.utils.drawCrosshair(g2,10,[B]);\r\n//\t\t   \r\n//\t\t   //center is the mid point\r\n//\t\t   let C=new d2.Point((A.x+B.x)/2,(A.y+B.y)/2);\r\n//\t\t   //d2.utils.drawCrosshair(g2,10,[C]);\r\n//\t\t     \r\n//\t\t   let arc=this.createArc(C,A,B);\r\n//\t\t   arc.paint(g2);\r\n\t\t   \r\n\t\t\tlet r=this.findArcPoints(this.points[0],this.points[1],this.points[2],this.points[3]);  \r\n\t\t\tlet arc=this.createArc(r[0],r[1],r[2]);\t\t\t\r\n\t\t\tarc.paint(g2);\t\r\n       //************************RIGHT************************\r\n//\t  \t\t  //start angle point\r\n//\t  \t\t pt=this.points[1];\r\n//\t  \t\t v=new d2.Vector(pt,this.points[0]);\r\n//\t  \t\t norm=v.normalize();  \t\t  \r\n//\t  \t\t x=pt.x +(this.arc/2)*norm.x;\r\n//\t  \t\t y=pt.y + (this.arc/2)*norm.y;  \t\t\t\r\n//\t  \t\t A=new d2.Point(x,y);    \r\n//\t  \t\t //d2.utils.drawCrosshair(g2,10,[A]);\r\n//\t  \t\t  \r\n//\t  \t\t  \r\n//\t\t\t  //end angle point \r\n//\t\t\t   pt=this.points[2];\r\n//\t\t\t   v=new d2.Vector(pt,this.points[3]);\r\n//\t\t\t   norm=v.normalize();\t\t  \r\n//\t\t\t   x=pt.x +(this.arc/2)*norm.x;\r\n//\t\t\t   y=pt.y +(this.arc/2)*norm.y;\t\t\t\r\n//\t\t\t   B=new d2.Point(x,y);\t\t  \t\t  \r\n//\t\t\t   //d2.utils.drawCrosshair(g2,10,[B]);\r\n//\t\t\t   \r\n//\t\t\t   //center is the mid point\t\t\t  \t\t\t   \r\n//\t\t\t   C=new d2.Point((A.x+B.x)/2,(A.y+B.y)/2);\r\n//\t\t\t   //d2.utils.drawCrosshair(g2,10,[C]);\r\n//\t\t\t     \r\n//\t\t\t   arc=this.createArc(C,B,A);\r\n//\t\t\t   arc.paint(g2);\t\t   \r\n\t\t   \r\n\t\t\tr=this.findArcPoints(this.points[1],this.points[0],this.points[3],this.points[2]);  \r\n\t\t\tarc=this.createArc(r[0],r[2],r[1]);\t\t\t\r\n\t\t\tarc.paint(g2);\r\n\t\t   \r\n        }\r\n        resize(offX,offY,point){\r\n    \t\tsuper.resize(offX,offY,point);\r\n    \t\tthis.reset(); \t\r\n        }\r\n\t\treset(){\r\n\t\t\t this.segments=[];\r\n\t         this.arcs=[];\r\n\t\t\t //segments \r\n\t         let top=new d2.Segment(0,0,0,0);\r\n\t    \t this.segments.push(top);\r\n\t    \t   \r\n\t    \t let bottom=new d2.Segment(0,0,0,0);\r\n\t    \t this.segments.push(bottom);\r\n\t    \t \r\n\t    \t \r\n\t    \t \r\n\t         //arcs\r\n\t\t\t let r=this.findArcPoints(this.points[0],this.points[1],this.points[2],this.points[3]);  \r\n\t\t\t this.arcs.push(this.createArc(r[0],r[1],r[2]));\t\t\t\r\n\t\t\t top.ps=r[1].clone();\r\n\t\t\t bottom.ps=r[2].clone();  \t\r\n\t\t\t\t\r\n\t\t\t r=this.findArcPoints(this.points[1],this.points[0],this.points[3],this.points[2]);  \r\n\t\t\t this.arcs.push(this.createArc(r[0],r[2],r[1]));\t\r\n\t\t\t top.pe=r[1].clone();\r\n\t\t\t bottom.pe=r[2].clone();  \t\r\n\t\t\t  \r\n\t\t\t\t\r\n        }\r\n        \r\n        setWidth(width) {\r\n            this.width=width;\r\n            if (width < this.height) {\r\n                this.arc = width;\r\n            } else {\r\n                this.arc = this.height;\r\n            }\r\n        }\r\n\r\n        setHeight(height) {\r\n            this.height=height;\r\n            if (height < this.width) {\r\n                this.arc =this.height;\r\n            } else {\r\n                this.arc = this.width;\r\n            }\r\n        }\r\n    \trotate(angle,center = {x:0, y:0}){\r\n     \t   super.rotate(angle,center);\r\n     \t   this.reset();    \t\r\n     \t}\r\n    \tmirror(line){\r\n    \t   super.mirror(line);\r\n    \t   this.reset();\r\n\t\t\tthis.arcs.forEach(arc=>{\r\n\t\t\t\tarc.endAngle=-1*arc.endAngle;\r\n\t\t\t});  \r\n    \t}\r\n    \tscale(alpha){\r\n    \t  super.scale(alpha);\r\n    \t  this.reset();\r\n    \t}\r\n        paint(g2){\t\r\n\t\t\tthis.segments.forEach(segment=>{\r\n\t\t\t\tsegment.paint(g2);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis.arcs.forEach(arc=>{\r\n\t\t\t\tarc.paint(g2);\r\n\t\t\t});  \t\t\t\r\n\t\t\t\r\n        }\r\n\t}\r\n\t\r\n}\t","module.exports = function(d2) {\r\n\t\r\n\td2.Point = class Point{\r\n\t\tconstructor(x = 0, y = 0) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        clone() {\r\n            return new d2.Point(this.x, this.y);\r\n        }\r\n        set(...args){\r\n           if(args.length==1){//point\r\n             this.x=args[0].x;\r\n             this.y=args[0].y;\r\n           }else{\t   //coordinates\r\n            this.x=args[0];\r\n            this.y=args[1];\r\n           }\r\n        }\r\n//\t\ttranslate(vec) {       \r\n//\t\t       this.x += vec.x;\r\n//\t\t       this.y += vec.y;\r\n//\t\t    }\r\n\t\t\r\n\t\t/**\r\n\t     * Returns new point translated by given vector.\r\n\t     * Translation vector may by also defined by a pair of numbers.\r\n\t     * @param {Vector} vector - Translation vector defined as Flatten.Vector or\r\n\t     * @param {number|number} - Translation vector defined as pair of numbers\r\n\t     * @returns {Point}\r\n\t     */\r\n\t    translate(...args) {\r\n\t        if (args.length == 1 &&(args[0] instanceof d2.Vector || !isNaN(args[0].x) && !isNaN(args[0].y))) {\r\n\t            this.x += args[0].x;\r\n\t            this.y += args[0].y;\r\n\t        }\r\n\r\n\t        if (args.length == 2 && (typeof (args[0]) == \"number\") && (typeof (args[1]) == \"number\")) {\r\n\t           this.x += args[0];\r\n\t           this.y += args[1];\r\n\t        }\r\n\t    }\t\t\r\n\t    /**\r\n\t     * Returns bounding box of a point\r\n\t     * @returns {Box}\r\n\t     */\r\n\t    get box() {\r\n\t        return new d2.Box(this.x, this.y, this.x, this.y);\r\n\t    }\t    \r\n\t\tscale(alpha){\r\n\t\t       this.x *=alpha;\r\n\t\t       this.y *=alpha;\t\t  \t\t\r\n\t\t}\r\n        /**\r\n         * rotates by given angle around given center point.\r\n         * If center point is omitted, rotates around zero point (0,0).\r\n         * Positive value of angle defines rotation in counter clockwise direction,\r\n         * negative angle defines rotation in clockwise clockwise direction\r\n         * @param {number} angle - angle in degrees\r\n         * @param {Point} [center=(0,0)] center\r\n         */\r\n\t\trotate(angle, center = {x:0, y:0}) {\r\n\t\t\t    \r\n\t\t        let a=-1*d2.utils.radians(angle);\t\t        \r\n\t\t\t    let x_rot = center.x + (this.x - center.x) * Math.cos(a) - (this.y - center.y) * Math.sin(a);\r\n\t\t        let y_rot = center.y + (this.x - center.x) * Math.sin(a) + (this.y - center.y) * Math.cos(a);\r\n\t            \r\n\t\t        this.x=x_rot;\r\n\t\t        this.y=y_rot;\r\n\t\t    }\r\n\t\tmove(offsetX,offsetY){\r\n\t        this.x+=offsetX;\r\n\t        this.y+=offsetY;\t\r\n\t\t}   \r\n\t\t/*\r\n\t\t * Mirror point around horizontal or vertical line\r\n\t\t */\r\n\t\tmirror(line){\r\n\t\t let prj=line.projectionPoint(this);\r\n\t\t let v=new d2.Vector(this,prj);\r\n\t\t prj.translate(v); \r\n\t\t this.x=prj.x;\r\n\t\t this.y=prj.y;\t\r\n\t\t}\r\n\t\tdistanceTo(shape) {\r\n\t\t        if (shape instanceof d2.Point) {\r\n\t\t            let dx = shape.x - this.x;\r\n\t\t            let dy = shape.y - this.y;\r\n\t\t            return Math.sqrt(dx*dx + dy*dy);\r\n\t\t        }\t\r\n\t            if (shape instanceof d2.Circle) {\r\n\t\t            let dx = shape.center.x - this.x;\r\n\t\t            let dy = shape.center.y - this.y;\r\n\t\t            return Math.sqrt(dx*dx + dy*dy);\t               \r\n\t            }\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t     * Returns true if point is on a shape, false otherwise\r\n\t     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    on(shape) {\r\n\t        if (shape instanceof d2.Point) {\r\n\t            return this.equalTo(shape);\r\n\t        }\r\n\r\n//\t        if (shape instanceof Flatten.Line) {\r\n//\t            return shape.contains(this);\r\n//\t        }\r\n//\r\n//\t        if (shape instanceof Flatten.Circle) {\r\n//\t            return shape.contains(this);\r\n//\t        }\r\n//\r\n//\t        if (shape instanceof Flatten.Segment) {\r\n//\t            return shape.contains(this);\r\n//\t        }\r\n\r\n\t        if (shape instanceof d2.Arc) {\r\n\t            return shape.contains(this);\r\n\t        }\r\n\r\n\t        if (shape instanceof d2.Polygon) {\r\n\t            return shape.contains(this);\r\n\t        }\r\n\t    }\r\n\t\t\r\n        equals(pt) {\r\n            return d2.utils.EQ(this.x, pt.x) && d2.utils.EQ(this.y, pt.y);\r\n        }\r\n        toString(){\r\n           return this.x+\",\"+this.y;\t\r\n        }\r\n\t\tpaint(g2){\r\n\t\t  d2.utils.drawCrosshair(g2,10,[this]);\r\n\t\t}\r\n\t}\r\n\r\n}","module.exports = function(d2) {\r\n\r\n    d2.Polygon = class Polygon {\r\n    \tconstructor() {\r\n    \t\tthis.points=[];\r\n    \t}\r\n    \tclone(){\r\n    \t    let copy=new d2.Polygon();\r\n    \t    this.points.forEach(function(point){\r\n    \t    \tcopy.points.push(point.clone());\r\n    \t    });  \r\n    \t    return copy;\t\r\n    \t}\r\n    \tadd(point){\r\n    \t    this.points.push(point);\t\r\n    \t}\r\n        contains(...args){\r\n          let x=0;\r\n          let y=0;\r\n\r\n       \t  if(args.length==1){//point\r\n                x=args[0].x;\r\n                y=args[0].y;\r\n          }else{\t   //coordinates\r\n               x=args[0];\r\n               y=args[1];\r\n          }\t\r\n      \t  let inside = false;\r\n          // use some raycasting to test hits\r\n          // https://github.com/substack/point-in-polygon/blob/master/index.js\r\n          \r\n    \t  //flat out points\r\n    \t  let p = [];\r\n\r\n          for (let i = 0, il = this.points.length; i < il; i++)\r\n          {\r\n              p.push(this.points[i].x, this.points[i].y);\r\n          }\r\n\r\n    \t  \r\n    \t  let length = p.length / 2;\r\n\r\n          for (let i = 0, j = length - 1; i < length; j = i++)\r\n          {\r\n              let xi = p[i * 2];\r\n              let yi = p[(i * 2) + 1];\r\n              let xj = p[j * 2];\r\n              let yj = p[(j * 2) + 1];\r\n              let intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\r\n\r\n              if (intersect)\r\n              {\r\n                  inside = !inside;\r\n              }\r\n          }\r\n\r\n          return inside;   \t   \r\n        }\r\n        move(offsetX,offsetY){\r\n            this.points.forEach(point=>{\r\n            \tpoint.move(offsetX,offsetY);\r\n            });\t\r\n        }\r\n        mirror(line){\r\n        \tthis.points.forEach(point=>{\r\n            \tpoint.mirror(line);\r\n            });        \t\r\n        }\r\n        scale(alpha){\r\n            this.points.forEach(point=>{\r\n            \tpoint.scale(alpha);\r\n            });        \t\r\n        }\r\n        rotate(angle,center = {x:0, y:0}){\r\n            this.points.forEach(point=>{\r\n            \tpoint.rotate(angle,center);\r\n            });\r\n        }\r\n        get box(){\r\n          return new d2.Box(this.points);\t\r\n        }\r\n        /*\r\n         * suppose a closed polygon\r\n         */\r\n\t\tget vertices() {\r\n\t\t    return this.points;\t\r\n\t\t}       \r\n        isPointOn(pt,diviation){    \t       \r\n        \t  let segment=new d2.Segment(0,0,0,0);\t   \r\n\t          let prevPoint = this.points[0];        \r\n\t          for(let point of this.points){    \t        \t  \r\n\t              if(prevPoint.equals(point)){    \t            \t  \r\n\t            \t  prevPoint = point;\r\n\t                  continue;\r\n\t              }    \t              \r\n\t              segment.set(prevPoint.x,prevPoint.y,point.x,point.y);\r\n\t              if(segment.isPointOn(pt,diviation)){\r\n\t                  return true;\r\n\t              }\r\n\t              prevPoint = point;\r\n\t          }\t\t\r\n\t          //close polygon\t\r\n\t          segment.set(prevPoint.x,prevPoint.y,this.points[0].x,this.points[0].y);\r\n              if(segment.isPointOn(pt,diviation)){\r\n                  return true;\r\n              }\r\n\t          \r\n\t          return false;\r\n        } \t\t\r\n        paint(g2){\r\n\t    \tg2.beginPath();\r\n\t    \tg2.moveTo(this.points[0].x,this.points[0].y);\r\n\t    \tfor (var i = 1; i < this.points.length; i++) {\r\n\t    \t\t\t\t\t\tg2.lineTo(this.points[i].x, this.points[i].y);\r\n\t    \t}\r\n\t    \tg2.closePath();                    \r\n\t    \tif(g2._fill!=undefined&&g2._fill){\r\n\t        \t  g2.fill();\t\r\n\t        }else{\r\n\t        \t  g2.stroke();\r\n\t        }\r\n        }\r\n    }\r\n}","module.exports = function(d2) {\r\n\td2.Polyline = class{\r\n\t   constructor(){\r\n\t\t this.points = [];\r\n\t\t   \r\n\t   }\r\n   \t   clone(){\r\n   \t\t\tlet copy=new d2.Polyline();\r\n   \t\t\tthis.points.forEach(function(point){\r\n   \t\t\t\tcopy.points.push(point.clone());\r\n   \t\t\t});  \r\n   \t\t\treturn copy;\t\r\n   \t   }\r\n   \t   remove(x,y){\r\n       \tlet item=new d2.Point(x,y);\r\n   \t\tvar tempArr = this.points.filter(function(point) { \r\n    \t    return ! point.equals(item);\r\n    \t});\r\n   \t\tthis.points=tempArr;\r\n   \t   }\r\n\t   add(...args){\r\n          if(args.length==1){//point               \r\n               this.points.push(new d2.Point(args[0].x,args[0].y));  \r\n          }else{\t   //coordinates             \r\n             this.points.push(new d2.Point(args[0],args[1]));              \r\n          }\t\t   \r\n\t\t \r\n\t   }\r\n       move(offsetX,offsetY){\r\n           this.points.forEach(point=>{\r\n           \tpoint.move(offsetX,offsetY);\r\n           });\t\r\n       }\r\n       mirror(line){\r\n       \tthis.points.forEach(point=>{\r\n           \tpoint.mirror(line);\r\n           });        \t\r\n       }\r\n       scale(alpha){\r\n           this.points.forEach(point=>{\r\n           \tpoint.scale(alpha);\r\n           });        \t\r\n       }\r\n       rotate(angle,center = {x:0, y:0}){\r\n           this.points.forEach(point=>{\r\n           \tpoint.rotate(angle,center);\r\n           });\r\n       }\r\n       isPointOn(pt,diviation){\r\n    \t\t  var result = false;\r\n    \t\t\t// build testing rect\r\n    \t\t  \r\n    \t\t  var rect = d2.Box.fromRect(pt.x\r\n    \t\t\t\t\t\t\t\t\t- (diviation / 2), pt.y\r\n    \t\t\t\t\t\t\t\t\t- (diviation / 2), diviation,\r\n    \t\t\t\t\t\t\t\t\tdiviation);\r\n    \t\t  var r1 = rect.min;\r\n    \t\t  var r2 = rect.max;\r\n\r\n    \t\t  // ***make lines and iterate one by one\r\n    \t\t  var prevPoint = this.points[0];\r\n\r\n    \t\t  this.points.some(function(wirePoint) {\r\n    \t\t\t\t\t\t\t\t// skip first point\r\n    \t\t\t\t\t\t\t\t{\r\n    \t\t\t\t\t\t\t\t\tif (d2.utils.intersectLineRectangle(\r\n    \t\t\t\t\t\t\t\t\t\t\tprevPoint, wirePoint, r1, r2)) {\r\n    \t\t\t\t\t\t\t\t\t\tresult = true;\r\n    \t\t\t\t\t\t\t\t\t\treturn true;\r\n    \t\t\t\t\t\t\t\t\t}\r\n    \t\t\t\t\t\t\t\t\tprevPoint = wirePoint;\r\n    \t\t\t\t\t\t\t\t}\r\n\r\n    \t\t\t\t\t\t\t});\r\n\r\n    \t\treturn result;\r\n    \t   \r\n       }\r\n       intersect(shape){\r\n    \t   let segment=new d2.Segment(0,0,0,0);\r\n    \t   if(shape instanceof d2.Circle){\r\n    \t          let prevPoint = this.points[0];        \r\n    \t          for(let point of this.points){    \t        \t  \r\n    \t              if(prevPoint.equals(point)){    \t            \t  \r\n    \t            \t  prevPoint = point;\r\n    \t                  continue;\r\n    \t              }    \t              \r\n    \t              segment.set(prevPoint.x,prevPoint.y,point.x,point.y);\r\n    \t              if(segment.intersect(shape)){\r\n    \t                  return true;\r\n    \t              }\r\n    \t              prevPoint = point;\r\n    \t          }\r\n    \t\t   \r\n    \t   }\r\n    \t   \r\n       }\r\n       get box(){\r\n         return new d2.Box(this.points);\t\r\n       }\r\n\t   get vertices() {\r\n\t\t    return this.points;\t\r\n\t   }\r\n\t   get segments(){\r\n\t\t  let list=[];\r\n     \t  if(this.points.length<2) {\r\n    \t\treturn list;\r\n    \t  }\r\n    \t  let prevPoint = this.points[0]; \r\n          for(let i=1;i<this.points.length;i++) {   \r\n\t\t\t\tlet point=this.points[i];        \t                            \r\n        \t\tif(prevPoint.equals(point)){                        \r\n            \t\tprevPoint = point;\r\n            \t\tcontinue;\r\n           \t\t}                    \r\n            let segment=new d2.Segment(0,0,0,0);\r\n            segment.set(prevPoint,point);            \r\n   \r\n           \tlist.push(segment);        \r\n           \tprevPoint = point;\r\n    \t   }\r\n    \t   return list;  \r\n\t   }\t \r\n       isPointOnSegment(pt,diviation){    \t       \r\n     \t  let segment=new d2.Segment(0,0,0,0);\t   \r\n\t          let prevPoint = this.points[0];        \r\n\t          for(let point of this.points){    \t        \t  \r\n\t              if(prevPoint.equals(point)){    \t            \t  \r\n\t            \t  prevPoint = point;\r\n\t                  continue;\r\n\t              }    \t              \r\n\t              segment.set(prevPoint.x,prevPoint.y,point.x,point.y);\r\n\t              if(segment.isPointOn(pt,diviation)){\r\n\t                  return true;\r\n\t              }\r\n\t              prevPoint = point;\r\n\t          }\t\t\r\n\t          \r\n\t          return false;\r\n       } \t   \r\n\t   paint(g2){\r\n\t\t  g2.beginPath(); \r\n\t\t  g2.moveTo(this.points[0].x, this.points[0].y);\r\n\t\t  \r\n \t\t  this.points.forEach((point)=>{\r\n\t\t\t g2.lineTo(point.x, point.y); \t\t\t  \r\n \t\t  });\r\n\t\t  \r\n\r\n\t\t  g2.stroke();\r\n\t   }\r\n\t   \r\n\t}\r\n\t\r\n}","module.exports = function(d2) {\r\n\t/*\r\n\t * rectangle is represented by 4 points\r\n\t */\r\n\td2.Rectangle = class Rectangle extends d2.Polygon{\r\n\t\tconstructor(...args) {\r\n\t\t\tsuper();\r\n\t\t\tif(args.length==3){     //***topleft point,width,height\r\n\t\t\t  let p1=args[0];\r\n\t\t\t  let width=args[1];\r\n\t\t\t  let height=args[2];\r\n\t\t\t  \r\n\t\t\t  this.points.push(p1.clone());     \r\n\t\t\t  this.points.push(new d2.Point(p1.x+width,p1.y));\r\n\t\t\t  this.points.push(new d2.Point(p1.x+width,p1.y+height));\r\n\t\t\t  this.points.push(new d2.Point(p1.x,p1.y+height));\r\n\t\t\t}\r\n\t\t\tif(args.length==4){\t  //***x,y,width,height\r\n\t\t\t\t  let p1=new d2.Point(args[0],args[1]);\r\n\t\t\t\t  let width=args[2];\r\n\t\t\t\t  let height=args[3];\r\n\t\t\t\t  \r\n\t\t\t\t  this.points.push(p1);     \r\n\t\t\t\t  this.points.push(new d2.Point(p1.x+width,p1.y));\r\n\t\t\t\t  this.points.push(new d2.Point(p1.x+width,p1.y+height));\r\n\t\t\t\t  this.points.push(new d2.Point(p1.x,p1.y+height));\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tclone(){\r\n    \t    let copy=new d2.Rectangle(new d2.Point(0,0),0,0);\r\n    \t    copy.points=[];\r\n    \t    this.points.forEach(function(point){\r\n    \t    \tcopy.points.push(point.clone());\r\n    \t    });  \r\n    \t    return copy;\r\n\t\t}\r\n\t\tassign(drawing) {\r\n    \t    this.points[0].set(drawing.points[0]);                        \r\n        \tthis.points[1].set(drawing.points[1]);\r\n        \tthis.points[2].set(drawing.points[2]);\r\n        \tthis.points[3].set(drawing.points[3]);                                                                       \r\n\t    }\t\t\r\n\t\tget area(){\r\n\t\t\treturn (this.points[0].distanceTo(this.points[1]))*(this.points[1].distanceTo(this.points[2]));\r\n\t\t}\r\n\t\treset(width,height){\r\n\t\t\tlet pc=this.box.center;\t\t\t\r\n\t\t\tthis.points=[];\r\n\t\t\tthis.points.push(new d2.Point(pc.x-(width/2),pc.y-(height/2)));     //topleft point\r\n\t\t\tthis.points.push(new d2.Point(pc.x+(width/2),pc.y-(height/2)));\r\n\t\t\tthis.points.push(new d2.Point(pc.x+(width/2),pc.y+(height/2)));\r\n\t\t\tthis.points.push(new d2.Point(pc.x-(width/2),pc.y+(height/2)));\t\t\t\t\t\t\r\n\t\t}\r\n\t\tsetSize(width,height){\r\n\t\t  this.reset(width,height);\t\t\t    \r\n\t\t}\r\n\t\tsetRect(x,y,width,height){\t\t\t\t\t\t  \r\n\t\t\t  this.points[0].set(x,y);\t\t\t  \r\n\t\t\t  this.points[1].set(x+width,y);\r\n\t\t\t  this.points[2].set(x+width,y+height);\r\n\t\t\t  this.points[3].set(x,y+height);\t\t\t\t\t\t\t\t\t\r\n\t\t}\r\n\t\tcreateArc(center, start, end) {\r\n            let startAngle =360 -(new d2.Vector(center,start)).slope;\r\n            let endAngle = (new d2.Vector(center, end)).slope;\r\n            \r\n            if (d2.utils.EQ(startAngle, endAngle)) {\r\n                endAngle = 360;\r\n            }\r\n            let r = (new d2.Vector(center, start)).length;\r\n            return new d2.Arc(center, r, startAngle, 90);\r\n        }\r\n        //****TEST************\r\n\t\teval(g2){\r\n\t\t  //start angle point\r\n//\t\t  let pt=this.points[0];\r\n//\t\t  let v=new d2.Vector(pt,this.points[1]);\r\n//\t\t  let norm=v.normalize();\r\n//\t\t  \r\n//\t\t  let x=pt.x +this.rounding*norm.x;\r\n//\t\t  let y=pt.y + this.rounding*norm.y;\r\n//\t\t\t\r\n//\t\t  let A=new d2.Point(x,y);\r\n//\t\t  \r\n//\t\t  //d2.utils.drawCrosshair(g2,10,[A]);\r\n//\t\t\t\r\n//\t\t  //end angle point \r\n//\t\t   pt=this.points[0];\r\n//\t\t   v=new d2.Vector(pt,this.points[3]);\r\n//\t\t   norm=v.normalize();\r\n//\t\t  \r\n//\t\t   x=pt.x +this.rounding*norm.x;\r\n//\t\t   y=pt.y + this.rounding*norm.y;\r\n//\t\t\t\r\n//\t\t   let A1=new d2.Point(x,y);\r\n//\t\t  \r\n//\t\t  \r\n//\t\t  // d2.utils.drawCrosshair(g2,10,[A1]);\r\n//\t\t   \r\n//\t\t   //center\r\n//\t\t   v=new d2.Vector(pt,A1);\r\n//\t\t   \r\n//\t\t   x=A.x +v.x;\r\n//\t\t   y=A.y +v.y;\r\n//\t\t   \r\n//\t\t   let C=new d2.Point(x,y);\r\n//\t\t   //d2.utils.drawCrosshair(g2,10,[C]);\r\n\t\t\t\r\n\t\t   let r=this.findArcPoints(this.points[0],this.points[1],this.points[3]);\r\n\t\t   let arc=this.createArc(r[0],r[1],r[2]);\r\n\t\t   arc.paint(g2);\r\n\t\t   //----------------------RT-------------------------------------\r\n//\t\t\t//start angle point\r\n//\t\t\tlet pt=this.points[1];\r\n//\t\t\tlet v=new d2.Vector(pt,this.points[2]);\r\n//\t\t\tlet norm=v.normalize();\r\n//\t\t\t  \r\n//\t\t\tlet x=pt.x +this.rounding*norm.x;\r\n//\t\t\tlet y=pt.y + this.rounding*norm.y;\r\n//\t\t\t\t\r\n//\t\t\tlet A=new d2.Point(x,y);\r\n//\t\t\t  \r\n//\t\t\t//d2.utils.drawCrosshair(g2,10,[A]);\r\n//\t\t\t\r\n//\t\t\t  //end angle point \r\n//\t\t\tpt=this.points[1];\r\n//\t\t\tv=new d2.Vector(pt,this.points[0]);\r\n//\t\t\tnorm=v.normalize();\r\n//\t\t\t  \r\n//\t\t\tx=pt.x +this.rounding*norm.x;\r\n//\t\t\ty=pt.y + this.rounding*norm.y;\r\n//\t\t\t\t\r\n//\t\t\tlet A1=new d2.Point(x,y);\r\n//\t\t\t  \r\n//\t\t\t  \r\n//\t\t\t//d2.utils.drawCrosshair(g2,10,[A1]);\r\n//\t\t\t   //center\r\n//\t\t\tv=new d2.Vector(pt,A1);\r\n//\t\t\t   \r\n//\t\t\tx=A.x +v.x;\r\n//\t\t\ty=A.y +v.y;\r\n//\t\t\t   \r\n//\t\t\tlet C=new d2.Point(x,y);\r\n//\t\t\t//d2.utils.drawCrosshair(g2,10,[C]);\r\n\t\t    \r\n\t\t    r=this.findArcPoints(this.points[1],this.points[2],this.points[0]);   \r\n\t\t\tarc=this.createArc(r[0],r[1],r[2]);\r\n\t\t\tarc.paint(g2);\t\r\n/*\r\n\t\t\t//----------------------RB-------------------------------------\r\n\t\t\t//start angle point\r\n\t\t\tpt=this.points[2];\r\n\t\t\tv=new d2.Vector(pt,this.points[1]);\r\n\t\t\tnorm=v.normalize();\r\n\t\t\t  \r\n\t\t\tx=pt.x +this.rounding*norm.x;\r\n\t\t\ty=pt.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\tA=new d2.Point(x,y);\r\n\t\t\t  \r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[A]);\t\t\t\r\n\t\t\t  //end angle point \r\n\t\t\tpt=this.points[2];\r\n\t\t\tv=new d2.Vector(pt,this.points[3]);\r\n\t\t\tnorm=v.normalize();\r\n\t\t\t  \r\n\t\t\tx=pt.x +this.rounding*norm.x;\r\n\t\t\ty=pt.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\tA1=new d2.Point(x,y);\t\t\t  \t\t\t  \r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[A1]);\t\t\r\n\t\t\t\r\n\t\t\t   //center\r\n\t\t\tv=new d2.Vector(pt,A1);\t\t\t   \r\n\t\t\tx=A.x +v.x;\r\n\t\t\ty=A.y +v.y;\r\n\t\t\t   \r\n\t\t\tC=new d2.Point(x,y);\r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[C]);\t\t\t\r\n*/\t\t\t\r\n\t\t\tr=this.findArcPoints(this.points[2],this.points[3],this.points[1]);  \r\n\t\t\tarc=this.createArc(r[0],r[1],r[2]);\r\n\t\t\tarc.paint(g2);\t\r\n/*\t\t\t\r\n\t\t\t//----------------------LB-------------------------------------\r\n\t\t\t//start angle point\r\n\t\t\tpt=this.points[3];\r\n\t\t\tv=new d2.Vector(pt,this.points[2]);\r\n\t\t\tnorm=v.normalize();\r\n\t\t\t  \r\n\t\t\tx=pt.x +this.rounding*norm.x;\r\n\t\t\ty=pt.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\tA=new d2.Point(x,y);\r\n\t\t\t  \r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[A]);\r\n\t\t\t  //end angle point \r\n\t\t\tpt=this.points[3];\r\n\t\t\tv=new d2.Vector(pt,this.points[0]);\r\n\t\t\tnorm=v.normalize();\r\n\t\t\t  \r\n\t\t\tx=pt.x +this.rounding*norm.x;\r\n\t\t\ty=pt.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\tA1=new d2.Point(x,y);\t\t\t  \t\t\t  \r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[A1]);\t\t\t\t\r\n\t\t\t   //center\r\n\t\t\tv=new d2.Vector(pt,A1);\t\t\t   \r\n\t\t\tx=A.x +v.x;\r\n\t\t\ty=A.y +v.y;\r\n\t\t\t   \r\n\t\t\tC=new d2.Point(x,y);\r\n\t\t\t//d2.utils.drawCrosshair(g2,10,[C]);\t\t\t\r\n*/\t\t\t\r\n\t\t\tr=this.findArcPoints(this.points[3],this.points[0],this.points[2]);  \r\n\t\t\tarc=this.createArc(r[0],r[1],r[2]);\t\t\t\r\n\t\t\tarc.paint(g2);\t\r\n\t\r\n\t\t}\r\n        /**\r\n        *\r\n        * @param {Point} p1 corner point\r\n        * @param {Point} p2 left point\r\n        * @param {Point} p3 right point   \r\n        * @returns {array of arc points[center,start point,end point]}           \r\n        */\r\n\t\tfindArcPoints(p1,p2,p3){\r\n\t\t\t  //start angle point\r\n\t\t\t  //let pt=this.points[0];\r\n\t\t\t  let v=new d2.Vector(p1,p2);\r\n\t\t\t  let norm=v.normalize();\r\n\t\t\t  \r\n\t\t\t  let x=p1.x +this.rounding*norm.x;\r\n\t\t\t  let y=p1.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\t  let A=new d2.Point(x,y);\r\n\t\t\t  \r\n\t\t\t  //d2.utils.drawCrosshair(g2,10,[A]);\r\n\t\t\t\t\r\n\t\t\t  //end angle point \r\n\t\t\t   //pt=this.points[0];\r\n\t\t\t   v=new d2.Vector(p1,p3);\r\n\t\t\t   norm=v.normalize();\r\n\t\t\t  \r\n\t\t\t   x=p1.x +this.rounding*norm.x;\r\n\t\t\t   y=p1.y + this.rounding*norm.y;\r\n\t\t\t\t\r\n\t\t\t   let A1=new d2.Point(x,y);\r\n\t\t\t  \r\n\t\t\t  \r\n\t\t\t  // d2.utils.drawCrosshair(g2,10,[A1]);\r\n\t\t\t   \r\n\t\t\t   //center\r\n\t\t\t   v=new d2.Vector(p1,A1);\r\n\t\t\t   \r\n\t\t\t   x=A.x +v.x;\r\n\t\t\t   y=A.y +v.y;\r\n\t\t\t   \r\n\t\t\t   let C=new d2.Point(x,y);\r\n\t\t\t   //d2.utils.drawCrosshair(g2,10,[C]);\r\n\t\t\t   \r\n\t\t\t   return [C,A,A1];\r\n\t\t\t   \t\t\t\r\n\t\t}\r\n\t\tresize(offX,offY,point){\r\n\t\t\tif(point==this.points[2]){\r\n\t    \t//do same\r\n\t\t\t\tlet pt=this.points[2];\r\n\t\t\t\tpt.move(offX,offY);\r\n\t    \t//do left \r\n\t\t\t\tlet v1=new d2.Vector(this.points[0],pt);\r\n\t\t\t\tlet v2=new d2.Vector(this.points[0],this.points[1]);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[1].x=this.points[0].x +v.x;\r\n\t\t\t\tthis.points[1].y=this.points[0].y + v.y;\r\n\t    \t\r\n\t    \t//do right \r\n\t\t\t\tv2=new d2.Vector(this.points[0],this.points[3]);\r\n\t    \t\r\n\t\t\t\tv=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[3].x=this.points[0].x +v.x;\r\n\t\t\t\tthis.points[3].y=this.points[0].y + v.y;\r\n\t    \t\r\n\t    \t\r\n\t\t\t}else if(point==this.points[1]){\r\n\t\t    \t//do same\r\n\t\t\t\tlet pt=this.points[1];\r\n\t\t\t\tpt.move(offX,offY);\r\n\r\n\t    \t\t    \t//do left \r\n\t\t\t\tlet v1=new d2.Vector(this.points[3],pt);\r\n\t\t\t\tlet v2=new d2.Vector(this.points[3],this.points[0]);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[0].x=this.points[3].x +v.x;\r\n\t\t\t\tthis.points[0].y=this.points[3].y + v.y;\r\n\t    \t//do right \r\n\t\t\t\tv2=new d2.Vector(this.points[3],this.points[2]);\r\n\t    \t\r\n\t\t\t\tv=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[2].x=this.points[3].x +v.x;\r\n\t\t\t\tthis.points[2].y=this.points[3].y + v.y;\t\t\t\t\r\n\t\t\t}else if(point==this.points[3]){\r\n\t\t    \t//do same\r\n\t\t\t\tlet pt=this.points[3];\r\n\t\t\t\tpt.move(offX,offY);\t\t\r\n\t\t\t\t\r\n\t\t    \t//do left \r\n\t\t\t\tlet v1=new d2.Vector(this.points[1],pt);\r\n\t\t\t\tlet v2=new d2.Vector(this.points[1],this.points[0]);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[0].x=this.points[1].x +v.x;\r\n\t\t\t\tthis.points[0].y=this.points[1].y + v.y;\r\n\t\t\t\t\r\n\t\t    \t//do right \r\n\t\t\t\tv2=new d2.Vector(this.points[1],this.points[2]);\r\n\t    \t\r\n\t\t\t\tv=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[2].x=this.points[1].x +v.x;\r\n\t\t\t\tthis.points[2].y=this.points[1].y + v.y;\r\n\t\t\t}else{\r\n\t\t    \t//do same\r\n\t\t\t\tlet pt=this.points[0];\r\n\t\t\t\tpt.move(offX,offY);\t\t\r\n\t\t\t\t\r\n\t\t    \t//do left \r\n\t\t\t\tlet v1=new d2.Vector(this.points[2],pt);\r\n\t\t\t\tlet v2=new d2.Vector(this.points[2],this.points[1]);\r\n\t    \t\r\n\t\t\t\tlet v=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[1].x=this.points[2].x +v.x;\r\n\t\t\t\tthis.points[1].y=this.points[2].y + v.y;\r\n\t\t\t\t\r\n\t\t    \t//do right \r\n\t\t\t\tv2=new d2.Vector(this.points[2],this.points[3]);\r\n\t    \t\r\n\t\t\t\tv=v1.projectionOn(v2);\r\n\t    \t//translate point\r\n\t\t\t\tthis.points[3].x=this.points[2].x +v.x;\r\n\t\t\t\tthis.points[3].y=this.points[2].y + v.y;\t\t\t\t\r\n\t\t\t}\r\n\t    \t\r\n\t\t}\r\ngrow(offset){\r\n\t //help point\r\n\t        let v=new d2.Vector(this.points[3] ,this.points[0]);\r\n\t        let norm = v.normalize();        \r\n\t        let x = this.points[0].x + offset * norm.x;\r\n\t        let y = this.points[0].y + offset * norm.y;\r\n\t        this.points[0].set(x, y); \r\n\t//help point        \r\n\t        v.set(this.points[2],this.points[1]);\r\n\t        norm = v.normalize();        \r\n\t        x = this.points[1].x + offset * norm.x;\r\n\t        y = this.points[1].y + offset * norm.y;\r\n\t        this.points[1].set(x, y);\r\n\t//help point\r\n\t        v.set(this.points[0] ,this.points[3]);\r\n\t        norm = v.normalize();            \r\n\t        x = this.points[3].x + offset * norm.x;\r\n\t        y = this.points[3].y + offset * norm.y;\r\n\t        this.points[3].set(x, y); \r\n\t//help point                \r\n\t        v.set(this.points[1] ,this.points[2]);\r\n\t        norm = v.normalize();                \r\n\t        x = this.points[2].x + offset * norm.x;\r\n\t        y = this.points[2].y + offset * norm.y;\r\n\t        this.points[2].set(x, y);   \r\n\t        \r\n\t//point 1;index 0        \r\n\t        v.set(this.points[1] ,this.points[0]);\r\n\t        norm = v.normalize();         \r\n\t        let x1 = this.points[0].x + offset * norm.x;\r\n\t        let y1 = this.points[0].y + offset * norm.y;\r\n\t        \r\n\t               \r\n\t//point 2;index 1\r\n\t        v.set(this.points[0] ,this.points[1]);\r\n\t        norm = v.normalize();         \r\n\t        let x2 = this.points[1].x + offset * norm.x;\r\n\t        let y2 = this.points[1].y + offset * norm.y;\r\n\t        \r\n\t        \r\n\t        \r\n\r\n\t//point 3;index 2                \r\n\t        v.set(this.points[3] ,this.points[2]);\r\n\t        norm = v.normalize();                 \r\n\t        let x3 = this.points[2].x + offset * norm.x;\r\n\t        let y3 = this.points[2].y + offset * norm.y;\r\n\t        \r\n\t                       \r\n\t//point 4;index 3 \r\n\t        v.set(this.points[2] ,this.points[3]);\r\n\t        norm = v.normalize();                 \r\n\t        let x4 = this.points[3].x + offset * norm.x;\r\n\t        let y4 = this.points[3].y + offset * norm.y;\r\n\t                \r\n\t        \r\n\t        this.points[0].set(x1, y1);\r\n\t        this.points[1].set(x2, y2);\r\n\t        this.points[2].set(x3, y3);\r\n\t        this.points[3].set(x4, y4);\r\n\t    }\r\nintersects(r) {\r\n\t\t\tlet box=this.box;\t\r\n\t    // calculate the left common area coordinate:\r\n\t\t\tlet left = Math.max( box.min.x, r.x );\r\n\t    // calculate the right common area coordinate:\r\n\t\t\tlet right  = Math.min( box.min.x +box.width, r.x + r.width );\r\n\t    // calculate the upper common area coordinate:\r\n\t\t\tlet top    = Math.max( box.min.y,r.y );\r\n\t    // calculate the lower common area coordinate:\r\n\t\t\tlet bottom = Math.min( box.min.y +box.height, r.y + r.height );\r\n\t\r\n\t    // if a common area exists, it must have a positive (null accepted) size\r\n\t\t\tif( left <= right && top <= bottom )\r\n\t\t\t\treturn true;\r\n\t\t\telse\r\n\t\t\t\treturn false;\t\t\t  \t    \r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t    contains(...args){\r\n\t      \tif(args.length==1){  //point  \r\n\t      \t  return super.contains(args[0]);\r\n\t      \t}else{       //coordinates\r\n\t      \t  return super.contains({x:args[0],y:args[1]});    \t\t\r\n\t      \t}  \r\n\t    }\r\n\t\trotate(angle,center = {x:this.box.center.x, y:this.box.center.y}){\r\n\t\t\tsuper.rotate(angle,center);\r\n\t\t}\r\n\t\tget box(){\r\n\t\t\treturn super.box;\r\n\t\t}\r\n\t\tget center(){\r\n\t\t\treturn super.box.center;\r\n\t\t}\r\n\t\tget vertices() {\r\n\t\t    return this.points;\t\r\n\t\t}\r\n\t\tpaint(g2){\r\n\t    \tg2.beginPath();\r\n\t    \tg2.moveTo(this.points[0].x,this.points[0].y);\r\n\t    \tfor (var i = 1; i < this.points.length; i++) {\r\n\t    \t\t\t\t\t\tg2.lineTo(this.points[i].x, this.points[i].y);\r\n\t    \t}\r\n\t    \tg2.closePath();                    \r\n\t    \tif(g2._fill!=undefined&&g2._fill){\r\n\t        \t  g2.fill();\t\r\n\t        }else{\r\n\t        \t  g2.stroke();\r\n\t        }\r\n\t\t}\r\n\t}\r\n\r\n}","module.exports = function(d2) {\r\n    /*\r\n     * Round rectangle is represented by 4 segments and 4 arcs\r\n     */\r\n    d2.RoundRectangle = class RoundRectangle  extends d2.Rectangle{\r\n    \tconstructor(p1,width,height,rounding) {\r\n    \t\tsuper(p1,width,height);\r\n    \t\tthis.p1=p1;\r\n    \t\tthis.width=width;\r\n    \t\tthis.height=height;\r\n    \t\tthis.rounding=rounding;\r\n    \t\tthis.segments=[new d2.Segment(0,0,0,0),new d2.Segment(0,0,0,0),new d2.Segment(0,0,0,0),new d2.Segment(0,0,0,0)];\r\n    \t\tthis.arcs = [new d2.Arc(),new d2.Arc(),new d2.Arc(),new d2.Arc()];  \r\n    \t\t\r\n    \t\tthis.reset();\r\n    \t}\r\n    \tclone(){\r\n    \t\tlet copy=new d2.RoundRectangle(new d2.Point(),0,0,this.rounding);\r\n    \t\tcopy.points=[];\r\n    \t\tthis.points.forEach(point=>{\r\n    \t\t\tcopy.points.push(point.clone());\r\n    \t\t});\r\n    \t\tcopy.reset();\r\n    \t\treturn copy;\r\n    \t}\r\n    \tsetPoints(points){\r\n    \t   this.points=[];\r\n    \t   this.points=points;\r\n    \t   this.reset();\r\n    \t}\r\n    \tsetRect(x,y,width,height,rounding){\r\n    \t\tsuper.setRect(x,y,width,height);\r\n    \t\tthis.rounding=rounding;\r\n    \t\tthis.p1.set(x,y);\r\n    \t\tthis.width=width;\r\n    \t\tthis.height=height;\r\n    \t\tthis.reset();\r\n    \t}    \t\r\n        /**\r\n         * Create specific rounding arc 90 degrees long\r\n         * @param center of the arc\r\n         * @param start angle point\r\n         * @param end angle point\r\n         */\r\n        resetArc(arc,center,start,end) {\r\n            let startAngle =360 -(new d2.Vector(center,start)).slope;\r\n            let endAngle = (new d2.Vector(center, end)).slope;\r\n            if (d2.utils.EQ(startAngle, endAngle)) {\r\n              endAngle = 360;\r\n            }\r\n            let r = (new d2.Vector(center, start)).length;         \t  \r\n            arc.pc=center;\r\n            arc.r=r;\r\n            arc.startAngle=startAngle;\r\n            arc.endAngle=90;\r\n\r\n        }    \t\r\n        /**\r\n        *\r\n        * @param {Point} p1 corner point\r\n        * @param {Point} p2 left point\r\n        * @param {Point} p3 right point   \r\n        * @returns {array of arc points[center,start point,end point]}           \r\n        */\r\n\t\tfindArcPoints(p1,p2,p3){\r\n\t\t\t  //start angle point\r\n\t\t\t  let v=new d2.Vector(p1,p2);\r\n\t\t\t  let norm=v.normalize();\t\t\t  \r\n\t\t\t  let x=p1.x +this.rounding*norm.x;\r\n\t\t\t  let y=p1.y + this.rounding*norm.y;\t\t\t\t\r\n\t\t\t  let A=new d2.Point(x,y);\r\n\r\n\t\t\t\t\r\n\t\t\t  //end angle point \r\n\t\t\t   v=new d2.Vector(p1,p3);\r\n\t\t\t   norm=v.normalize();\t\t\t  \r\n\t\t\t   x=p1.x +this.rounding*norm.x;\r\n\t\t\t   y=p1.y + this.rounding*norm.y;\t\t\t\t\r\n\t\t\t   let B=new d2.Point(x,y);\r\n\t\t\t   \r\n\t\t\t   //center\r\n\t\t\t   v=new d2.Vector(p1,B);\t\t\t   \r\n\t\t\t   x=A.x +v.x;\r\n\t\t\t   y=A.y +v.y;\t\t\t   \r\n\t\t\t   let C=new d2.Point(x,y);\r\n\t\t\t   \r\n\t\t\t   return [C,A,B];\r\n\t\t\t   \t\t\t\r\n\t\t}\r\n\t\tisPointOn(pt,diviation){\r\n\t\t\tif (this.rounding == 0) {\r\n\t\t\t\tfor(const seg of this.segments){\r\n\t\t\t\t \tif(seg.isPointOn(pt,diviation)){\t\t\t\t \t\t\r\n\t\t\t\t \t\treturn true;\r\n\t\t\t\t \t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(const seg of this.segments){\r\n\t\t\t\t \tif(seg.isPointOn(pt,diviation)){\r\n\t\t\t\t \t\treturn true;\r\n\t\t\t\t \t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tfor(const arc of this.arcs){\r\n\t\t\t\t \tif(arc.isPointOn(pt,diviation/2)){\r\n\t\t\t\t \t\treturn true;\r\n\t\t\t\t \t}\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t}\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n    \treset(){\r\n            if (this.rounding == 0) {\r\n            \t \r\n                this.segments[0].set(this.points[0].x,this.points[0].y,this.points[1].x, this.points[1].y);\r\n                this.segments[1].set(this.points[1].x,this.points[1].y,this.points[2].x, this.points[2].y);\r\n                this.segments[2].set(this.points[2].x,this.points[2].y,this.points[3].x, this.points[3].y);\r\n                this.segments[3].set(this.points[3].x,this.points[3].y,this.points[0].x, this.points[0].y);               \r\n\r\n            } else {\r\n                //rect\r\n                let top = this.segments[0];\r\n                let right = this.segments[1];    \r\n                let bottom = this.segments[2];\r\n                let left =this.segments[3];\r\n     \r\n\r\n                //arcs\r\n                let r = this.findArcPoints(this.points[0], this.points[1], this.points[3]);\r\n                this.resetArc(this.arcs[0],r[0], r[1], r[2]);\r\n                top.ps = r[1].clone();\r\n                left.ps = r[2].clone();\r\n\r\n                r = this.findArcPoints(this.points[1], this.points[2], this.points[0]);\r\n                this.resetArc(this.arcs[1],r[0], r[1], r[2]);\r\n                top.pe = r[2].clone();\r\n                right.ps = r[1].clone();\r\n\r\n                r = this.findArcPoints(this.points[2], this.points[3], this.points[1]);\r\n                this.resetArc(this.arcs[2] ,r[0], r[1], r[2]);\r\n                right.pe = r[2].clone();\r\n                bottom.ps = r[1].clone();\r\n\r\n\r\n                r = this.findArcPoints(this.points[3], this.points[0], this.points[2]);\r\n                this.resetArc(this.arcs[3],r[0], r[1], r[2]);\r\n                bottom.pe = r[2].clone();\r\n                left.pe = r[1].clone();\r\n            }    \t\t    \t\r\n    \t}\r\n    \tresize(offX,offY,point){\r\n    \t\tsuper.resize(offX,offY,point);\r\n    \t\tthis.reset();\r\n    \t}\r\n    \trotate(angle,center = {x:0, y:0}){\r\n    \t   super.rotate(angle,center);\r\n    \t   this.reset();    \t\r\n    \t}\r\n    \tmove(offX,offY){\r\n    \t   super.move(offX,offY);\r\n    \t   this.reset();\r\n    \t}\r\n        contains(pt){\r\n  \t \t\tvar pol=new d2.Polygon();\r\n  \t \t\tthis.segments.forEach(segment=>{\r\n  \t\t \t\tpol.add(segment.ps);\r\n  \t\t \t\tpol.add(segment.pe);\r\n  \t \t\t});\r\n  \t   \r\n  \t \t\tif(pol.contains(pt)) {\r\n  \t\t \t\treturn true;\r\n  \t \t\t}\r\n  \t        var result=false;\r\n\t   \t\tthis.arcs.forEach(arc=>{\r\n\t\t \t\tif(arc.contains(pt)){\r\n\t\t\t\t\tresult=true;\r\n\t\t \t\t}\t\t\t\t\t\t\t\t\t\t\r\n\t   \t\t});\t\t\t\r\n\t \t  return result;\r\n         }\r\n\t\tscale(alpha){\r\n\t\t\tsuper.scale(alpha);\r\n\t\t\tthis.rounding*=alpha;\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\tsetRounding(rounding){\r\n\t\t this.rounding=rounding;\r\n\t\t this.reset();\r\n\t\t}\r\n    \tmirror(line){\r\n    \t\tsuper.mirror(line);\r\n    \t\tlet p=this.points[0];\r\n    \t\tthis.points[0]=this.points[1];\r\n    \t\tthis.points[1]=p\r\n    \t\t\r\n    \t\tp=this.points[2];\r\n    \t\tthis.points[2]=this.points[3];\r\n    \t\tthis.points[3]=p\r\n    \t\t\r\n    \t\tthis.reset();\r\n    \t}\r\n\t\tget box(){\r\n\t\t\treturn super.box;\r\n\t\t}\r\n\t\tget polygon() {\r\n\t\t\tlet vertices=[];\r\n\t\t\tlet p=this.segments[0].ps;\r\n\t\t\t\r\n    \t\tthis.segments.forEach(segment=>{\r\n    \t\t   let a=p.distanceTo(segment.ps);\r\n    \t\t   let b=p.distanceTo(segment.pe);\r\n    \t\t   if(a<b){\r\n    \t\t     vertices.push(segment.ps);\r\n\t\t\t     vertices.push(segment.pe);\r\n    \t\t   }else{\r\n        \t\t vertices.push(segment.pe);\r\n    \t\t\t vertices.push(segment.ps);    \t\t\t   \r\n    \t\t   }\r\n\t\t\t   p=vertices[vertices.length-1];  //keep the last one\r\n\t\t\t});\r\n          return vertices;\t\t   \t\r\n\t\t}\r\n    \tpaint(g2){\r\n    \t\tif(g2._fill!=undefined&&g2._fill){\r\n    \t\t\tlet vertices=this.polygon;\r\n        \t\t\r\n    \t    \tg2.beginPath();\t    \t\t    \t\t    \t\r\n    \t    \tg2.moveTo(vertices[0].x,vertices[0].y);\r\n    \t    \tfor (var i = 1; i < vertices.length; i++) {\r\n    \t    \t\t\t\t\t\tg2.lineTo(vertices[i].x, vertices[i].y);\r\n    \t    \t}\r\n    \t    \tg2.closePath(); \r\n    \t    \tg2.fill();    \t    \t       \t\t\r\n    \t    \tif(this.rounding!=0){\r\n    \t    \t this.arcs.forEach(arc=>{\r\n    \t\t\t\tvar circle=new d2.Circle(arc.pc,arc.r);\r\n    \t    \t\tcircle.paint(g2);\r\n    \t\t\t });\r\n    \t    \t}\r\n    \t\t}else{\r\n\t\t\t this.segments.forEach(segment=>{\r\n\t\t\t\tsegment.paint(g2);\r\n\t\t\t });\r\n\t\t\t\r\n\t\t\t if(this.rounding!=0){\r\n\t\t\t  this.arcs.forEach(arc=>{\r\n\t\t\t\tarc.paint(g2);\r\n\t\t\t  });\r\n\t\t\t }\r\n    \t\t}\r\n    \t}\r\n    }\r\n    \r\n}","module.exports = function(d2) {\r\n\t\r\n\td2.Segment = class Segment{\r\n\t\tconstructor(...args) {\r\n            if (args.length == 2 && args[0] instanceof d2.Point && args[1] instanceof d2.Point) {\r\n                this.ps = args[0].clone();\r\n                this.pe = args[1].clone();\r\n                return;\r\n            }\r\n\r\n            if (args.length == 4) {\r\n                this.ps = new d2.Point(args[0], args[1]);\r\n                this.pe = new d2.Point(args[2], args[3]);\r\n                return;\r\n            }\r\n        }\r\n        clone() {\r\n            return new Segment(this.ps, this.pe);\r\n        }\r\n        set(...args){\r\n          if(args.length==4){\t\r\n\t\t\tthis.ps.set(args[0],args[1]);\r\n        \tthis.pe.set(args[2],args[3]);\r\n\t\t  }else{\r\n\t\t\tthis.ps=args[0]\r\n        \tthis.pe=args[1]\t\t\t\r\n\t\t  }\r\n        }\r\n        get length() {\r\n            return this.ps.distanceTo(this.pe);\r\n        } \r\n        get box() {\r\n            return new d2.Box(\r\n                Math.min(this.ps.x, this.pe.x),\r\n                Math.min(this.ps.y, this.pe.y),\r\n                Math.max(this.ps.x, this.pe.x),\r\n                Math.max(this.ps.y, this.pe.y)\r\n            )\r\n        }\r\n\t\tget isHorizontal(){\t\t\t\t\t\t\r\n\t\t\treturn d2.utils.EQ(this.ps.y,this.pe.y);\t\t\t\r\n\t\t}\r\n\t\tget isVertical(){\r\n\t\t\treturn d2.utils.EQ(this.ps.x,this.pe.x);\r\n\t\t}        \r\n        middle() {\r\n            return new d2.Point((this.ps.x + this.pe.x)/2, (this.ps.y + this.pe.y)/2);\r\n        }\r\n        translate(vec) {\r\n            this.ps.translate(vec);\r\n            this.pe.translate(vec);\r\n        }\r\n        contains(pt){\r\n      \t   return false;    \t   \r\n        }\r\n        isPointOn(pt,diviation){  \t\t \r\n\t\t  var rect = d2.Box.fromRect(pt.x\r\n\t\t\t\t\t\t\t\t\t- (diviation / 2), pt.y\r\n\t\t\t\t\t\t\t\t\t- (diviation / 2), diviation,\r\n\t\t\t\t\t\t\t\t\tdiviation);\r\n\t\t var r1 = rect.min;\r\n\t\t var r2 = rect.max;\r\n\r\n\t\t if (d2.utils.intersectLineRectangle(this.ps,this.pe, r1, r2)) {\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t }\r\n\r\n\t\t return false;        \t\r\n        }\r\n        projectionPoint(pt) {\r\n            let v1 = new d2.Vector(this.ps, pt);\r\n            let v2 = new d2.Vector(this.ps, this.pe);\r\n\r\n            let v = v1.projectionOn(v2);\r\n            //translate point\r\n            let x = this.ps.x + v.x;\r\n            let y = this.ps.y + v.y;\r\n            return new d2.Point(x, y);\r\n        }   \r\n      //https://github.com/psalaets/line-intersect        \r\n        intersect(shape){\r\n          if(shape instanceof d2.Circle){  \r\n            let projectionPoint = this.projectionPoint(shape.pc);\r\n\r\n            let a = (projectionPoint.x - this.ps.x) / ((this.pe.x - this.ps.x) == 0 ? 1 : this.pe.x - this.ps.x);\r\n            let b = (projectionPoint.y - this.ps.y) / ((this.pe.y - this.ps.y) == 0 ? 1 : this.pe.y - this.ps.y);\r\n\r\n            let dist = projectionPoint.distanceTo(shape.pc);\r\n            \r\n            if (0 <= a && a <= 1 && 0 <= b && b <= 1) { //is projection between start and end point\r\n                if (!d2.utils.GT(dist,shape.r)) {\r\n                    return true;\r\n                }\r\n            }\r\n            //end points in circle?\r\n            if (d2.utils.LE(this.ps.distanceTo(shape.pc), shape.r)) {\r\n                return true;\r\n            }\r\n            if (d2.utils.LE(this.pe.distanceTo(shape.pc), shape.r)) {\r\n                return true;\r\n            }        \r\n          }else if(shape instanceof d2.Segment){\r\n              let x1=this.ps.x, y1=this.ps.y, x2=this.pe.x, y2=this.pe.y, x3=shape.ps.x, y3=shape.ps.y, x4=shape.pe.x, y4=shape.pe.y; \r\n              let denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\r\n              let numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\r\n              let numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\r\n\r\n              if (denom == 0) {\r\n                if (numeA == 0 && numeB == 0) {\r\n                  return false;  //COLINEAR;\r\n                }\r\n                return false; //PARALLEL;\r\n              }\r\n\r\n              let uA = numeA / denom;\r\n              let uB = numeB / denom;\r\n\r\n              if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\r\n                return true;\r\n                //return intersecting({\r\n                //  x: x1 + (uA * (x2 - x1)),\r\n                //  y: y1 + (uA * (y2 - y1))\r\n                //});\r\n              }\r\n\r\n              return false;        \t  \r\n          }\r\n           \r\n          \r\n          return false;\r\n        }        \r\n        rotate(angle, center = {x:0, y:0}) {\r\n          this.ps.rotate(angle,center);\r\n          this.pe.rotate(angle,center);\r\n        }\r\n        move(offsetX,offsetY){\r\n            this.ps.move(offsetX,offsetY);\r\n            this.pe.move(offsetX,offsetY);           \t\r\n        }\r\n        mirror(line){\r\n        \tthis.ps.mirror(line);\r\n        \tthis.pe.mirror(line);\r\n        }\r\n        scale(alpha){\r\n        \tthis.ps.scale(alpha);\r\n        \tthis.pe.scale(alpha);        \t\r\n        }\r\n\t\tsame(that){\r\n\t       return this.ps===that.ps&&this.pe===that.pe;\r\n\t\t}\r\n\t\tpaint(g2){\t\r\n\t\t\tg2.beginPath();\r\n\t\t\tg2.moveTo(this.ps.x, this.ps.y);\r\n\t\t\tg2.lineTo(this.pe.x, this.pe.y);\r\n\t\t\t\r\n\t\t\tg2.stroke();\r\n\t\t}\r\n    }\r\n}","const DP_TOL = 0.000001;\r\n\r\nmodule.exports = function(d2) {\r\n\td2.utils={\r\n\t\t DP_TOL: DP_TOL,\r\n\t\t\t\r\n\t\t drawCrosshair:function(g2,length,points){                \r\n\t\t\t\t\r\n\r\n\t\t        points.forEach(function(point){\r\n\t\t        \tlet line = new d2.Segment(point.x - length, point.y, point.x + length, point.y);\r\n\t\t\t\t\tline.paint(g2);\r\n\t\t            \r\n\t\t\t\t\tline = new d2.Segment(point.x, point.y - length, point.x, point.y + length);            \r\n\t\t\t\t\tline.paint(g2);\r\n\t\t        });\t\r\n\t   \t },\r\n\t   \t/*****\r\n\t   \t*\r\n\t   \t*   Intersect Line with Line\r\n\t   \t*\r\n\t   \t*****/\r\n\t   \t intersectLineLine : function(a1, a2, b1, b2) {\r\n\t   \t    var result=false;\r\n\t   \t    \r\n\t   \t    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\r\n\t   \t    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\r\n\t   \t    var u_b  = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n\r\n\t   \t    if ( u_b != 0 ) {\r\n\t   \t        var ua = ua_t / u_b;\r\n\t   \t        var ub = ub_t / u_b;\r\n\r\n\t   \t        if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 ) {\r\n\t   \t            result = true;\r\n\t   \t        } else {\r\n\t   \t            result = false;\r\n\t   \t        }\r\n\t   \t    }\r\n\t   \t    return result;\r\n\t   \t},\t   \t \r\n\t   \t/*****\r\n\t   \t*\r\n\t   \t*   Intersect Line with Rectangle\r\n\t   \t*\r\n\t   \t*****/\r\n\t   \tintersectLineRectangle: function(a1, a2, r1, r2) {\r\n\t   \t    var min        = this.min(r1,r2);\r\n\t   \t    var max        = this.max(r1,r2);\r\n\t   \t    var topRight   = new d2.Point( max.x, min.y );\r\n\t   \t    var bottomLeft = new d2.Point( min.x, max.y );\r\n\t   \t    \r\n\t   \t    var inter1 = this.intersectLineLine(min, topRight, a1, a2);\r\n\t   \t    var inter2 = this.intersectLineLine(topRight, max, a1, a2);\r\n\t   \t    var inter3 = this.intersectLineLine(max, bottomLeft, a1, a2);\r\n\t   \t    var inter4 = this.intersectLineLine(bottomLeft, min, a1, a2);\r\n\t   \t    \r\n\t   \t    return inter1||inter2||inter3||inter4;\r\n\t   \t},\r\n\t   \tmin:function(p1,p2){\r\n\t   \t\treturn new d2.Point(Math.min(p1.x,p2.x),Math.min(p1.y,p2.y));\t\r\n\t   \t},\r\n\t   \tmax:function(p1,p2){\r\n\t   \t    return new d2.Point(Math.max(p1.x,p2.x),Math.max(p1.y,p2.y));\t\r\n\t   \t},\t   \t\r\n\t   radians:function(degrees) {\r\n\t\t\t  return degrees * Math.PI / 180;\r\n\t   },\r\n\t\t\t \r\n\t\t\t// Converts from radians to degrees.\r\n\t   degrees :function(radians) {\r\n\t\t\t  return radians * 180 / Math.PI;\r\n\t   },\r\n\t   EQ_0(x) {\r\n\t\t    return ((x) < DP_TOL && (x) > -DP_TOL);\r\n\t   },\t   \r\n\t   GT: (x,y) => {\r\n\t        return ( (x)-(y) >  DP_TOL );\r\n\t   },\r\n\t   GE: (x,y) => {\r\n\t        return ( (x)-(y) > -DP_TOL );\r\n\t   },\r\n\t   EQ: function(x,y) {\r\n\t        return ( (x)-(y) <  DP_TOL && (x)-(y) > -DP_TOL );\r\n\t   },\r\n\t   LT:function(x,y){\r\n\t        return ( (x)-(y) < -DP_TOL );\r\n\t    },\r\n\t   LE:function(x,y){\r\n\t        return ( (x)-(y) <  DP_TOL );\r\n\t    },\r\n    }\r\n\r\n};","module.exports = function(d2) {\r\n\t\r\n\td2.Vector = class Vector{\r\n\t\tconstructor(...args) {\r\n\t\t\t this.x = 0;\r\n\t         this.y = 0;\r\n\t         \r\n             let a1 = args[0];\r\n             let a2 = args[1];\r\n\r\n             if (typeof(a1) == \"number\" && typeof(a2) == \"number\") {\r\n                 this.x = a1;\r\n                 this.y = a2;\r\n                 return;\r\n             }\r\n\r\n             if (a1 instanceof d2.Point && a2 instanceof d2.Point) {\r\n                 this.x = a2.x - a1.x;\r\n                 this.y = a2.y - a1.y;\r\n                 return;\r\n             }\t         \r\n\t\t}\r\n\t\t\r\n\t\tset(...args){\r\n\t\t\t  if (typeof(args[0]) == \"number\") {\r\n\t\t\t\t  this.x=args[2] - args[0];   //x2-x1\r\n\t\t\t\t  this.y=args[3] - args[1];  \t//y2-y1\r\n\t\t\t  }else{\r\n\t              this.x = args[1].x - args[0].x;\r\n\t              this.y = args[1].y - args[0].y;\r\n\t\t\t  }       \r\n\t\t} \r\n\t\t\r\n        clone() {\r\n            return new Vector(this.x, this.y);\r\n        }\r\n        \r\n        get length() {\r\n            return Math.sqrt(this.dot(this));\r\n        }        \r\n        \r\n        /**\r\n         * Returns scalar product (dot product) of two vectors <br/>\r\n         * <code>dot_product = (this * v)</code>\r\n         */\r\n        dot(v) {\r\n            return ( this.x * v.x + this.y * v.y );\r\n        }\r\n        \r\n        /**\r\n         * Returns vector product (cross product) of two vectors <br/>\r\n         * <code>cross_product = (this x v)</code>\r\n         */\r\n        cross(v) {\r\n            return ( this.x * v.y - this.y * v.x );\r\n        } \r\n        /**\r\n         * Slope of the vector in degrees from 0 to 360\r\n         */\r\n        get slope() {\r\n            let angle = Math.atan2(this.y, this.x);\r\n            if (angle<0) angle = 2*Math.PI + angle;\r\n            \r\n            return d2.utils.degrees(angle);\r\n        }\r\n        invert() {\r\n            this.x=-this.x;\r\n            this.y=-this.y;\r\n        }\r\n        /**\r\n         * Returns unit vector.<br/>\r\n         */\r\n        normalize() {            \r\n            return ( new Vector(this.x / this.length, this.y / this.length) );            \r\n        }        \r\n        /**\r\n         * Returns new vector rotated by given angle,\r\n         * positive angle defines rotation in counter clockwise direction,\r\n         * negative - in clockwise direction\r\n         */\r\n        rotate(angle) {\r\n            let point = new d2.Point(this.x, this.y);\r\n            point.rotate(angle);\r\n            this.x=point.x\r\n            this.y=point.y;\r\n        }        \r\n        /**\r\n         *rotate 90 degrees counter clockwise         \r\n         */\r\n        rotate90CCW() {\r\n        \tlet x=this.x;\r\n        \tlet y=this.y;\r\n            this.x=-1*y;\r\n            this.y= x;\r\n        }    \r\n        /**\r\n         * rotate 90 degrees clockwise\r\n         */\r\n        rotate90CW() {\r\n        \tlet x=this.x;\r\n        \tlet y=this.y;        \t\r\n            this.x=y;\r\n            this.y=-1*x;\r\n        };\r\n        \r\n        /**\r\n         * Return angle between this vector and other vector. <br/>\r\n         * Angle is measured from 0 to 2*PI in the counter clockwise direction\r\n         * from current vector to other.\r\n         */\r\n        angleTo(v) {\r\n            let norm1 = this.normalize();\r\n            let norm2 = v.normalize();\r\n            let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\r\n            if (angle<0) angle += 2*Math.PI;\r\n            return d2.utils.degrees(angle);\r\n        }\r\n        /**\r\n         * Return vector projection of the current vector on another vector\r\n         * @param {Vector} v Another vector\r\n         * @returns {Vector}\r\n         */\r\n        projectionOn(v){\r\n            let n = v.normalize();\r\n            let d = this.dot(n);\r\n            n.multiply(d);\r\n            return n;\r\n        }\r\n        isCollinearTo(v){\r\n        \tlet a=Math.abs(this.x/v.x);\r\n        \tlet b=Math.abs(this.y/v.y);\r\n        \treturn d2.utils.EQ(a,b);\r\n        }\r\n        multiply(scalar) {\r\n            this.x=scalar * this.x;\r\n            this.y=scalar * this.y;\r\n        }\r\n        add(v){\r\n        \treturn new Vector(this.x+v.x,this.y+v.y);\r\n        }\r\n\r\n\t}\r\n\t\r\n}\t","// ��������������������������������������������������\r\n// Variables\r\n// ��������������������������������������������������\r\n\r\nlet initialized = false\r\nlet padding\r\nlet context\r\nlet canvas\r\n\r\n// ��������������������������������������������������\r\n// Settings\r\n// ��������������������������������������������������\r\n\r\nconst settings = {\r\n  chars: {\r\n    capHeight: 'S',\r\n    baseline: 'n',\r\n    xHeight: 'x',\r\n    descent: 'p',\r\n    ascent: 'h',\r\n    tittle: 'i'\r\n  }\r\n}\r\n\r\n// ��������������������������������������������������\r\n// Methods\r\n// ��������������������������������������������������\r\n\r\nconst initialize = () => {\r\n  canvas = document.createElement('canvas')\r\n  //context = canvas.getContext('2d')\r\n  context = canvas.getContext('2d', {willReadFrequently: true});\r\n  initialized = true\r\n}\r\nconst getCanvasContext=()=>{\r\n\t if (!initialized) initialize()\r\n\t   return context;\r\n}\r\nconst setFont = (fontFamily, fontSize, fontWeight) => {\r\n  if (!initialized) initialize()\r\n  padding = fontSize * 0.5\r\n  canvas.width = fontSize * 2\r\n  canvas.height = fontSize * 2 + padding\r\n  context.font = `${fontWeight} ${fontSize}px ${fontFamily}`\r\n  context.textBaseline = 'top'\r\n  context.textAlign = 'center'\t  \r\n}\r\n\r\nconst setAlignment = (baseline = 'top') => {\r\n  const ty = baseline === 'bottom' ? canvas.height : 0\r\n  context.setTransform(1, 0, 0, 1, 0, ty)\r\n  context.textBaseline = baseline\r\n}\r\n\r\nconst updateText = (text) => {\r\n  context.clearRect(0, 0, canvas.width, canvas.height)\r\n  context.fillText(text, canvas.width / 2, padding, canvas.width)\r\n}\r\nconst computeLineHeight = () => {\r\n  const letter = 'A'\r\n  setAlignment('bottom')\r\n  const gutter = canvas.height - measureBottom(letter)\r\n  setAlignment('top')\r\n  return measureBottom(letter) + gutter\r\n}\r\n\r\nconst getPixels = (text) => {\r\n  updateText(text)\r\n  return context.getImageData(0, 0, canvas.width, canvas.height).data\r\n}\r\n\r\nconst getFirstIndex = (pixels) => {\r\n  for (let i = 3, n = pixels.length; i < n; i += 4) {\r\n    if (pixels[i] > 0) return (i - 3) / 4\r\n  } return pixels.length\r\n}\r\n\r\nconst getLastIndex = (pixels) => {\r\n  for (let i = pixels.length - 1; i >= 3; i -= 4) {\r\n    if (pixels[i] > 0) return i / 4\r\n  } return 0\r\n}\r\n\r\nconst normalize = (metrics, fontSize, origin) => {\r\n  const result = {}\r\n  const offset = metrics[origin]\r\n  for (let key in metrics) { \r\n\t   if(key!='width'){\r\n\t     result[key] = (metrics[key] - offset) / fontSize;\r\n\t   }else{\r\n\t\t result[key]= metrics[key];  \r\n\t   }\r\n\t  }\r\n  return result;\r\n}\r\n\r\nconst measureTop = (text) => (\r\n  Math.round(\r\n    getFirstIndex(\r\n      getPixels(text)\r\n    ) / canvas.width\r\n  ) - padding\r\n)\r\n\r\nconst measureBottom = (text) => (\r\n  Math.round(\r\n    getLastIndex(\r\n      getPixels(text)\r\n    ) / canvas.width\r\n  ) - padding\r\n)\r\n\r\nconst getMetrics = (chars = settings.chars) => ({\r\n  capHeight: measureTop(chars.capHeight),\r\n  baseline: measureBottom(chars.baseline),\r\n  xHeight: measureTop(chars.xHeight),\r\n  descent: measureBottom(chars.descent),\r\n  bottom: computeLineHeight(),\r\n  ascent: measureTop(chars.ascent),\r\n  tittle: measureTop(chars.tittle),\r\n  top: 0\r\n})\r\n\r\n// ��������������������������������������������������\r\n// FontMetrics\r\n// ��������������������������������������������������\r\n\r\nconst FontMetrics = ({\r\n  fontFamily = 'Times',\r\n  fontWeight = 'normal',\r\n  fontSize = 10,\r\n  origin = 'baseline'\r\n  \r\n} = {}) => (\r\n  setFont(fontFamily, fontSize, fontWeight), {\r\n    ...normalize(getMetrics(), fontSize, origin),\r\n    fontFamily,\r\n    fontWeight,\r\n    fontSize,\r\n\r\n  }\r\n)\r\n\r\nFontMetrics.settings = settings\r\n\r\n// ��������������������������������������������������\r\n// Exports\r\n// ��������������������������������������������������\r\n\r\nmodule.exports = {\r\n\t\tFontMetrics,\r\n\t\tgetCanvasContext\r\n}","var Unit = require('core/unit').Unit;\r\nvar UnitContainer = require('core/unit').UnitContainer;\r\nvar UnitComponent = require('core/unit').UnitComponent;\r\nvar UnitMgr = require('core/unit').UnitMgr;\r\nvar mywebpcb=require('core/core').mywebpcb;\r\nvar core = require('core/core');\r\nvar FootprintEventMgr = require('pads/events').FootprintEventMgr;\r\nvar events=require('core/events');\r\nvar RoundRect=require('pads/shapes').RoundRect;\r\nvar Circle=require('pads/shapes').Circle;\r\nvar Arc=require('pads/shapes').Arc;\r\nvar Pad=require('pads/shapes').Pad;\r\nvar SolidRegion=require('pads/shapes').SolidRegion;\r\nvar FootprintShapeFactory=require('pads/shapes').FootprintShapeFactory;\r\nvar Drill=require('pads/shapes').Drill;\r\nvar GlyphLabel=require('pads/shapes').GlyphLabel;\r\nvar Line=require('pads/shapes').Line;\r\nvar LineEventHandle=require('core/events').LineEventHandle;\r\nvar SolidRegionEventHandle=require('pads/events').SolidRegionEventHandle;\r\nvar DefaultLineBendingProcessor=require('core/line/linebendingprocessor').DefaultLineBendingProcessor;\r\nvar FootprintContextMenu=require('pads/popup/footprintpopup').FootprintContextMenu;\r\nvar GlyphManager=require('core/text/d2glyph').GlyphManager;\r\nvar d2=require('d2/d2');\r\nvar utilities=require('core/utilities');\r\n\r\nclass Footprint extends Unit{\r\nconstructor(width,height) {\r\n       super(width,height); \r\n\t   this.shapeFactory = new FootprintShapeFactory();\r\n\t}\r\nclone(){\r\n\t  var copy=new Footprint(this.width,this.height);\r\n\t  //copy.silent=true;\r\n\t  copy.unitName=this.unitName;\r\n\t  copy.grid=this.grid.clone();\r\n      var len=this.shapes.length;\r\n\t  for(var i=0;i<len;i++){\r\n           var clone=this.shapes[i].clone();\r\n\t       copy.add(clone);\r\n\t  }\r\n\t  //copy.silent=false;\r\n\t  return copy;\r\n\t}\t\r\n\t/*\r\npaint(g2, viewportWindow){\t\r\n\t   let len=this.shapes.length;\r\n \t   for(let i=0;i<len;i++){\r\n \t\t   this.shapes[i].paint(g2,viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);  \r\n \t   }\r\n \t   this.shapes.forEach((shape)=>{\t \t    \t\r\n\t\t\tif ((typeof shape.drawControlShape === 'function')&&shape.isSelected()) {\t\t\t\t\t                \r\n\t\t\t\tshape.drawControlShape(g2, viewportWindow,this.scalableTransformation);\r\n        \t}\r\n \t   });\r\n \t   //grid\r\n       this.grid.paint(g2,viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n        //coordinate system\r\n       if(this.coordinateSystem!=null){\r\n         this.coordinateSystem.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n       }\t\r\n         //ruler\r\n\t   this.ruler.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n        //frame\r\n       if(this.frame!=null){\r\n\t     this.frame.paint(g2, viewportWindow,this.scalableTransformation,core.Layer.LAYER_ALL);\r\n       }\r\n}\t\r\n*/\r\nparse(data){\r\n\t \t   this.unitName=j$(data).find(\"name\").text();\r\n\t \t   this.grid.setGridUnits(j$(data).find(\"units\").attr(\"raster\"),core.Units.MM);\r\n\t \t   \r\n\t \t   var reference=j$(data).find(\"reference\");\r\n\t \t   var value=j$(data).find(\"value\");\r\n\t \t   if(reference!=null&&reference.text()!=''){\r\n\t           var label = new GlyphLabel(0,0,0);\r\n\t           label.fromXML(reference[0]);\r\n\t           label.texture.tag=\"reference\";\r\n\t           this.add(label);      \r\n\t \t   }\r\n\t \t   if(value!=null&&value.text()!=''){\r\n\t           var label = new GlyphLabel(0,0,0);\r\n\t           label.fromXML(value[0]);\r\n\t           label.texture.tag=\"value\";\r\n\t           this.add(label);\t \t\t   \r\n\t \t   }\r\n\t \t   var that=this;\r\n\t \t   j$(data).find('shapes').children().each(function(){\r\n               var shape=that.shapeFactory.createShape(this);\r\n               that.add(shape);\r\n\t \t   });\r\n\r\n\r\n\t}\t\r\nformat(){   \r\n   var xml=\"<footprint width=\\\"\"+ this.width +\"\\\" height=\\\"\"+this.height+\"\\\">\\r\\n\"; \r\n   xml+=\"<name>\"+this.unitName+\"</name>\\r\\n\";\r\n   //***reference\r\n   var text=UnitMgr.getInstance().getLabelByTag(this,'reference');\r\n   if(text!=null){\r\n       xml+=\"<reference>\";\r\n       xml+=text.getTexture().toXML();\r\n       xml+=\"</reference>\\r\\n\";\r\n   } \r\n   //value\r\n   text=UnitMgr.getInstance().getLabelByTag(this,'value');\r\n   if(text!=null){\r\n       xml+=\"<value>\";\r\n       xml+=text.getTexture().toXML();\r\n       xml+=\"</value>\\r\\n\";\r\n   }    \r\n   xml+=\"<units raster=\\\"\"+this.grid.getGridValue()+\"\\\">MM</units>\\r\\n\"; \r\n   xml+=\"<shapes>\\r\\n\";\r\n   this.shapes.forEach(function(shape) {\r\n\t   if(!((shape instanceof GlyphLabel)&&(shape.texture.tag=='reference'||shape.texture.tag=='value'))){\r\n\t\t   xml+=shape.toXML();\r\n\t\t   xml+='\\r\\n';   \r\n\t   }\r\n   });\r\n   xml+=\"</shapes>\\r\\n\";   \r\n   xml+=\"</footprint>\";\r\n   return xml;\r\n}\t\r\n}\r\n\r\nclass FootprintContainer extends UnitContainer{\r\n    constructor() {\r\n       super();\r\n       this.formatedFileName=\"Footprints\"\r\n\t}\r\n\r\n    parse(xml){\r\n    \t  this.setFileName(j$(xml).find(\"filename\").text());\r\n    \t  this.libraryname=(j$(xml).find(\"library\").text());\r\n    \t  this.categoryname=(j$(xml).find(\"category\").text());    \t  \r\n    \t  \r\n    \t  var that=this;\r\n\t      j$(xml).find(\"footprint\").each(j$.proxy(function(){\r\n\t    \tvar footprint=new Footprint(j$(this).attr(\"width\"),j$(this).attr(\"height\"));\r\n\t    \t    footprint.unitName=j$(this).find(\"name\").text();\r\n\t    \t//silent mode\r\n\t    \t//footprint.silent=that.silent;\r\n\t    \t//need to have a current unit\r\n            that.add(footprint);\r\n            footprint.parse(this);\r\n\t    }),that);\t\r\n    }\r\n    format() {\r\n        var xml=\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\\r\\n\"; \r\n        xml+=\"<footprints identity=\\\"Footprint\\\" version=\\\"\"+utilities.version.FOOTPRINT_VERSION+\"\\\">\\r\\n\";      \r\n    \tlet units=this.unitsmap.values();\r\n  \t    for(let i=0;i<this.unitsmap.size;i++){\r\n          let unit=units.next().value;\r\n          xml+=unit.format();\r\n  \t\t  xml+=\"\\r\\n\";\r\n  \t    }    \t    \t\r\n        xml+=\"</footprints>\";\r\n        \r\n        return xml;\r\n    }\r\n\t\r\n}\r\n\r\n\r\nclass FootprintComponent extends UnitComponent{\r\n  constructor(canvas,popup) {\r\n\tsuper(canvas,popup); \r\n\t\r\n\tthis.eventMgr=new FootprintEventMgr(this); \r\n\tthis.model=new FootprintContainer();\r\n\tthis.popup=new FootprintContextMenu(this,popup);\r\n\tthis.lineBendingProcessor=new DefaultLineBendingProcessor();  \r\n\t  \r\n}\r\nsetMode(_mode){\r\n\tthis.mode=_mode;\r\n\tlet shape=null;\r\n\t if (this.cursor != null) {\r\n\t     this.cursor.clear();\r\n\t     this.cursor = null;\r\n\t }\r\n\t this.eventMgr.resetEventHandle();\r\n\t        \r\n\t switch (this.mode) {\r\n     \t\tcase core.ModeEnum.SOLID_REGION:\r\n         \tbreak;\t \r\n\t        case core.ModeEnum.PAD_MODE:\r\n\t            shape=new Pad(0,0,core.MM_TO_COORD(1.52),core.MM_TO_COORD(1.6));\t            \t            \t\t                        \r\n\t            this.setContainerCursor(shape);               \r\n\t            this.getEventMgr().setEventHandle(\"cursor\",shape);  \r\n\t          break;\r\n\t        case  core.ModeEnum.RECT_MODE:\r\n\t            shape=new RoundRect(0,0,core.MM_TO_COORD(7),core.MM_TO_COORD(7),core.MM_TO_COORD(0.8),core.MM_TO_COORD(0.2),core.Layer.SILKSCREEN_LAYER_FRONT);\t            \r\n\t            this.setContainerCursor(shape);               \r\n\t            this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n\t          break;\r\n\t        case  core.ModeEnum.LINE_MODE:\r\n\t          \r\n\t          break;\r\n\t        case  core.ModeEnum.ELLIPSE_MODE:\t\r\n\t            shape=new Circle(0,0,core.MM_TO_COORD(3.4),core.MM_TO_COORD(0.2),core.Layer.SILKSCREEN_LAYER_FRONT);\r\n\t            this.setContainerCursor(shape);               \r\n\t            this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n\t          break;\r\n\t        case  core.ModeEnum.ARC_MODE:\r\n\t        \tshape=new Arc(0,0,core.MM_TO_COORD(3.4),core.MM_TO_COORD(0.2),core.Layer.SILKSCREEN_LAYER_FRONT);\r\n\t            this.setContainerCursor(shape);               \r\n\t            this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n\t          break;\r\n\t        case  core.ModeEnum.LABEL_MODE:\r\n\t            shape=new GlyphLabel(\"Label\",core.MM_TO_COORD(0.3),core.Layer.SILKSCREEN_LAYER_FRONT);\t\t\t\r\n\t\t        this.setContainerCursor(shape);               \r\n\t            this.getEventMgr().setEventHandle(\"cursor\",shape); \r\n\t          break;\r\n\t        case core.ModeEnum.ORIGIN_SHIFT_MODE:  \r\n\t            this.getEventMgr().setEventHandle(\"origin\",null);   \r\n\t            break;          \r\n\t        default:\r\n\t          this.repaint();\r\n\t      }       \r\n} \r\n\r\n\r\n//  contextMenu:function(event){ \r\n//\t  var x,y;\r\n//\t  if (event.pageX != undefined && event.pageY != undefined) {\r\n//\t\t   x = event.pageX;\r\n//\t\t   y = event.pageY;\r\n//\t  }else {\r\n//\t\t   x = event.clientX + document.body.scrollLeft +\r\n//\t            document.documentElement.scrollLeft;\r\n//\t\t   y = event.clientY + document.body.scrollTop +\r\n//\t            document.documentElement.scrollTop;\r\n//\t }\r\n//\t       x -= parseInt(this.canvas.offset().left);\r\n//\t       y -= parseInt(this.canvas.offset().top);\r\n//\t       \r\n//\t       \r\n//  },\r\n\r\n\r\n\r\nmouseDown(event){\r\n    event.preventDefault();\r\n\r\n\tif (this.getModel().getUnit() == null) { \r\n\t   return; \r\n\t}\r\n\r\n    this.canvas.on('mousemove',j$.proxy(this.mouseDrag,this));\r\n    this.canvas.off('mousemove',j$.proxy(this.mouseMove,this));\r\n    \r\n\t//****Dynamic event handling\r\n    var scaledEvent =this.getScaledEvent(event);\r\n\t\r\n\r\n\tif(this.getModel().getUnit()==null){\r\n          this.getEventMgr().resetEventHandle();\r\n    }else{\r\n    \tswitch (this.getMode()){\r\n    \tcase  core.ModeEnum.COMPONENT_MODE:\r\n         if(this.getModel().getUnit().getCoordinateSystem()!=null){ \r\n    \t  if(this.getModel().getUnit().getCoordinateSystem().isClicked(scaledEvent.x, scaledEvent.y)){\r\n              this.getEventMgr().setEventHandle(\"origin\",null); \r\n        \t  break;\r\n          } \r\n         }\r\n    \t\t\r\n    \t  var shape=this.getModel().getUnit().isControlRectClicked(scaledEvent.x, scaledEvent.y);\r\n\t\t  if(shape!=null){\r\n                if(shape instanceof Arc){\r\n                \tif(shape.arcType==core.ArcType.CENTER_POINT_ARC){\r\n                     if(shape.isStartAnglePointClicked(scaledEvent.x , scaledEvent.y)){ \r\n                         this.getEventMgr().setEventHandle(\"arc.start.angle\",shape);                    \r\n                     }else if(shape.isExtendAnglePointClicked(scaledEvent.x , scaledEvent.y)){\r\n                         this.getEventMgr().setEventHandle(\"arc.extend.angle\",shape);                      \r\n                     }else if(shape.isMidPointClicked(scaledEvent.x , scaledEvent.y)){\r\n                    \t  this.getEventMgr().setEventHandle(\"arc.mid.point\",shape);\r\n                     }\r\n                \t}else{    \r\n                  \t  if(shape.isMidPointClicked(scaledEvent.x , scaledEvent.y)){\r\n                      \t  this.getEventMgr().setEventHandle(\"arc.mid.point\",shape);\r\n                        }else{\r\n                      \t  this.getEventMgr().setEventHandle(\"arc.resize\",shape);\r\n                        }\r\n                \t}\r\n                  }else{\r\n\t\t\t\t\t\tthis.getEventMgr().setEventHandle(\"resize\",shape); \r\n                  }\r\n\t\t\t\r\n \r\n\t\t  }else{\r\n\t\t     shape = this.getModel().getUnit().getClickedShape(scaledEvent.x, scaledEvent.y, true);\r\n\t\t     \r\n\t\t     if(shape!=null){\r\n\t\t\t   if (UnitMgr.getInstance().isBlockSelected(this.getModel().getUnit().shapes) && shape.isSelected()){\r\n                 this.getEventMgr().setEventHandle(\"block\", null);\t\t\t\t\t\t \r\n\t\t       }else if ((!(shape instanceof GlyphLabel))&&(undefined !=shape['getTextureByTag'])&&shape.getClickedTexture(scaledEvent.x, scaledEvent.y)!=null){\r\n\t\t\t     this.getEventMgr().setEventHandle(\"texture\",shape);\r\n               }else\r\n\t\t         this.getEventMgr().setEventHandle(\"move\",shape);\r\n\t\t     }else{\r\n\t\t         this.getEventMgr().setEventHandle(\"component\",null);\r\n\t\t     }\r\n\t\t  }\r\n\t\t  break;\r\n    \tcase core.ModeEnum.SOLID_REGION:\r\n            //is this a new copper area\r\n            if ((this.getEventMgr().targetEventHandle == null) ||\r\n                !(this.getEventMgr().targetEventHandle instanceof SolidRegionEventHandle)) {\r\n            \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape =new SolidRegion(core.Layer.LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);\r\n                this.getEventMgr().setEventHandle(\"solidregion\", shape);\r\n            }     \t\t\r\n    \t\tbreak;\r\n    \tcase core.ModeEnum.LINE_MODE:\r\n            //***is this a new wire\r\n            if ((this.getEventMgr().getTargetEventHandle() == null) ||\r\n                !(this.getEventMgr().getTargetEventHandle() instanceof LineEventHandle)) {\r\n            \tif(event.which!=1){\r\n            \t\treturn;\r\n            \t}\r\n                shape = new Line(core.MM_TO_COORD(0.3),core.Layer.SILKSCREEN_LAYER_FRONT);\r\n                this.getModel().getUnit().add(shape);\r\n                \r\n            \tthis.getEventMgr().setEventHandle(\"line\", shape);\r\n            }\r\n    \t  break;\r\n    \tcase core.ModeEnum.DRAGHEAND_MODE:  \r\n    \t\tthis.getEventMgr().setEventHandle(\"dragheand\", null);\r\n    \t  break;\t\r\n    \tcase core.ModeEnum.MEASUMENT_MODE:\r\n                if ((this.getEventMgr().getTargetEventHandle() != null) ||\r\n                    (this.getEventMgr().getTargetEventHandle() instanceof events.MeasureEventHandle)) {\r\n                     this.getModel().getUnit().ruler.resizingPoint=null;\r\n                     this.getEventMgr().resetEventHandle();\r\n                     this.repaint();\r\n                }else{\r\n                   this.getEventMgr().setEventHandle(\"measure\",this.getModel().getUnit().ruler);   \r\n\t\t\t\t   this.getModel().getUnit().ruler.setX(scaledEvent.x);\r\n\t\t\t\t   this.getModel().getUnit().ruler.setY(scaledEvent.y);                   \r\n                }\r\n\t\t  break;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (this.getEventMgr().getTargetEventHandle() != null) {\r\n      this.getEventMgr().getTargetEventHandle().mousePressed(scaledEvent);\r\n    } \r\n\t\r\n  }\r\n\r\n \r\n}\r\n\r\n\r\nmodule.exports ={\r\n\t   FootprintContainer,\r\n\t   Footprint,\r\n\t   FootprintComponent\t   \r\n}","var EventHandle = require('core/events').EventHandle;\r\nvar events = require('core/events');\r\nvar core = require('core/core');\r\nvar d2 = require('d2/d2');\r\n\r\nclass ArcMidPointEventHandle extends EventHandle{\r\nconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\n \r\nmousePressed(event){\r\n\tif(super.isRightMouseButton(event)){\r\n            if (this.target[\"getLinePoints\"]!=undefined){\r\n            \tthis.component.popup.registerLineSelectPopup(this.target,event);            \r\n            }            \r\n    }\r\n     \r\n    this.component.getModel().getUnit().setSelected(false);\r\n    this.target.setSelected(true);\r\n\tthis.mx=event.x;\r\n\tthis.my=event.y;\r\n    \r\n\tthis.target.A=this.target.arc.start.clone();\r\n\tthis.target.B=this.target.arc.end.clone();\r\n\tthis.target.M=this.target.arc.middle.clone();\r\n\t\r\n    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n    \r\n\tthis.component.repaint();\r\n }\r\n mouseReleased(event){\r\n\t    if(this.component.getParameter(\"snaptogrid\")){\r\n         this.target.alignResizingPointToGrid(this.targetPoint);\r\n\t     this.component.repaint();\t \r\n\t\t}\r\n\t    this.target.resizingPoint=null;\r\n }\r\n mouseDragged(event){\r\n \tlet new_mx = event.x;\r\n    let new_my = event.y;\r\n    \r\n    this.target.Resize(0,0,event);\r\n    \r\n    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n    this.mx = new_mx;\r\n    this.my = new_my;\r\n\tthis.component.repaint();\r\n }\r\n mouseMove(event){\r\n \r\n }\r\n}\r\n\r\nclass ArcStartAngleEventHandle extends EventHandle{\r\n constructor(component) {\r\n\t super(component);\r\n }\r\n mousePressed(event){\r\n }\r\n mouseDragged(event){\r\n \tlet new_mx = event.x;\r\n    let new_my = event.y;\r\n    \r\n\t\r\n        \r\n    let centerX=this.target.arc.center.x;\r\n    let centerY=this.target.arc.center.y;\r\n           \r\n    let start = (180/Math.PI*Math.atan2(new_my-centerY,new_mx-centerX));\r\n\r\n    if(start<0){\r\n        this.target.setStartAngle(-1*(start));            \r\n    }else{\r\n        this.target.setStartAngle(360-(start));            \r\n    }\r\n\t\t\r\n\tthis.mx = new_mx;\r\n    this.my = new_my;\r\n\r\n\tthis.component.getModel().getUnit().fireShapeEvent({target:this.target,type:events.Event.PROPERTY_CHANGE});\r\n\t\t\r\n\tthis.component.repaint();\r\n }\r\nmouseReleased(event){\r\n\r\n} \r\nmouseMove(event){\r\n \r\n}\r\n\r\n}\t\r\nclass ArcExtendAngleEventHandler extends EventHandle{\r\n constructor(component) {\r\n\t super(component);\r\n\r\n }\r\n mousePressed(event){\r\n }\r\n mouseDragged(event){\r\n \tlet new_mx = event.x;\r\n    let new_my = event.y;\r\n        \r\n    let centerX=this.target.arc.center.x;\r\n    let centerY=this.target.arc.center.y;\r\n        \r\n        \r\n    let extend = (180/Math.PI*Math.atan2(new_my-centerY,new_mx-centerX));\r\n\r\n    if(extend<0){\r\n        extend=(-1*(extend));                  \r\n    }else{\r\n        extend=(360-extend);         \r\n    }\r\n        \r\n        //-360<extend<360 \r\n    let extendAngle=this.target.arc.endAngle;\r\n    if(extendAngle<0){        \r\n          if(extend-this.target.arc.startAngle>0) {                \r\n              this.target.setExtendAngle(((extend-this.target.arc.startAngle))-360);\r\n          }else{\r\n              this.target.setExtendAngle(extend-this.target.arc.startAngle);\r\n            }\r\n        }else{           \r\n            if(extend-this.target.arc.startAngle>0) {\r\n              this.target.setExtendAngle(extend-this.target.arc.startAngle);\r\n            }else{\r\n              this.target.setExtendAngle((360-this.target.arc.startAngle)+extend);\r\n            }\r\n        }\r\n        \r\n    //***update PropertiesPanel           \r\n\tthis.component.getModel().getUnit().fireShapeEvent({target:this.target,type:events.Event.PROPERTY_CHANGE});\r\n\t\t\r\n\tthis.component.repaint();\r\n }\r\nmouseReleased(event){\r\n\r\n} \r\nmouseMove(event){\r\n \r\n}\r\n\r\n}\r\n/*\r\n * resizing of arcs start and end points\r\n * Arc type - Two point arc \r\n */\r\nclass ResizeEventHandle extends EventHandle{\r\n\t constructor(component) {\r\n\t\t super(component);\t \r\n\t\t this.isStartPoint;\r\n\t }\r\n\t mousePressed(event){\t     \r\n\t    this.component.getModel().getUnit().setSelected(false);\r\n\t    this.target.setSelected(true);\r\n\t\tthis.mx=event.x;\r\n\t\tthis.my=event.y;\t        \r\n\t    \r\n\t    this.isStartPoint=this.target.isStartAnglePointClicked(event.x,event.y);\r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    \r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseReleased(event){\r\n\t\t    if(this.component.getParameter(\"snaptogrid\")){\r\n\t          this.target.alignResizingPointToGrid(this.isStartPoint);\r\n\t          this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\t\t      \r\n\t\t\t}\r\n\t\t    this.component.repaint();\t\r\n\t }\r\n\t mouseDragged(event){\r\n\t \tlet new_mx = event.x;\r\n\t    let new_my = event.y;\r\n\t    this.target.resizeStartEndPoint(new_mx - this.mx, new_my - this.my,this.isStartPoint);\r\n\r\n\t    \r\n\t    this.component.getModel().getUnit().fireShapeEvent({target:this.target,type:Event.PROPERTY_CHANGE});\r\n\t    this.mx = new_mx;\r\n\t    this.my = new_my;\r\n\t\tthis.component.repaint();\r\n\t }\r\n\t mouseMove(event){\r\n\t \r\n\t }\r\n\t \r\n}\r\nclass SolidRegionEventHandle extends EventHandle{\r\n\tconstructor(component) {\r\n\t\t super(component);\r\n\t }\r\nmousePressed(event){\r\n      this.mx=event.x;\r\n\t  this.my=event.y;\r\n\t  if(super.isRightMouseButton(event)){                                  \r\n           return;\r\n      }\r\n      this.component.getModel().getUnit().setSelected(false);\r\n\t  this.target.setSelected(true);\r\n\r\n      let p;      \r\n      \r\n      if(this.component.getParameter(\"snaptogrid\")){\r\n        p=this.component.getModel().getUnit().getGrid().positionOnGrid(event.x,event.y);       \t\t\r\n      }else{\r\n        p=new d2.Point(event.x,event.y);\r\n      }\r\n      let justcreated=this.target.polygon.points.length==2;\r\n      \r\n      if(this.target.getLinePoints().length==0){\r\n    \t  this.target.add(p);    \r\n          //avoid point over point\r\n      }else if(!this.target.getLinePoints()[this.target.getLinePoints().length-1].equals(p)){\r\n    \t  this.target.add(p);           \r\n      }\r\n      \r\n      \r\n\t  this.component.repaint();\t   \r\n\t    \r\n\t }\r\nmouseReleased(event){\r\n\t\t\r\n\t }\r\n\t \r\nmouseDragged(event){\r\n\t\t\r\n\t }\r\nmouseMove(event){\r\n    this.target.floatingEndPoint.set(event.x,event.y);   \r\n    this.component.repaint();\t \r\n\t }\t \r\ndblClick(){\r\n      \r\n    this.target.setSelected(false);\r\n    this.component.getEventMgr().resetEventHandle();\r\n    this.component.repaint();\t \r\n} \r\ndetach() {\r\n    this.target.reset(); \r\n    if(this.target.polygon.points.length<3){\r\n        this.target.owningUnit.remove(this.target.uuid);\r\n    }\r\n    super.detach();\r\n}\t\r\n}\r\nclass FootprintEventMgr{\r\n constructor(component) {\r\n    this.component=component;\r\n\tthis.targetEventHandle=null;\t\r\n\tthis.hash = new Map();\r\n\tthis.hash.set(\"arc.mid.point\",new ArcMidPointEventHandle(component));\r\n\tthis.hash.set(\"arc.start.angle\",new ArcStartAngleEventHandle(component));\r\n\tthis.hash.set(\"arc.extend.angle\",new ArcExtendAngleEventHandler(component));\r\n\tthis.hash.set(\"arc.resize\",new ResizeEventHandle(component));\r\n\tthis.hash.set(\"move\",new events.MoveEventHandle(component));\r\n\tthis.hash.set(\"resize\",new events.ResizeEventHandle(component));\r\n\tthis.hash.set(\"component\",new events.UnitEventHandle(component));\r\n\tthis.hash.set(\"block\",new events.BlockEventHandle(component));\r\n\tthis.hash.set(\"line\",new events.LineEventHandle(component));\r\n\tthis.hash.set(\"cursor\",new events.CursorEventHandle(component));\r\n\tthis.hash.set(\"texture\",new events.TextureEventHandle(component));\r\n\tthis.hash.set(\"dragheand\",new events.DragingEventHandle(component));\r\n\tthis.hash.set(\"origin\",new events.OriginEventHandle(component));\r\n\tthis.hash.set(\"measure\",new events.MeasureEventHandle(component));\r\n\tthis.hash.set(\"solidregion\",new SolidRegionEventHandle(component));\r\n }\r\n //****private\r\n getEventHandle(eventKey,target) {\r\n    var handle=this.hash.get(eventKey);\r\n\tif(handle!=null){\r\n\t  handle.setTarget(target);\r\n\t  if(eventKey=='resize'||eventKey=='move'||eventKey=='line'||eventKey=='solidregion'||eventKey=='texture'){\r\n\t     this.component.getModel().getUnit().fireShapeEvent({target:target,type:events.Event.SELECT_SHAPE});\r\n\t  }\r\n\t  if(eventKey=='component'||eventKey==\"origin\"){\r\n\t\t this.component.getModel().fireUnitEvent({target:this.component.getModel().getUnit(),type:events.Event.SELECT_UNIT});\r\n\t  }\r\n\t  handle.attach();\r\n\t}\r\n\treturn handle;\r\n }\r\n \r\n getTargetEventHandle(){\r\n   return this.targetEventHandle;\r\n }\r\n \r\n setEventHandle(eventKey,target){\r\n        this.resetEventHandle();\r\n        this.targetEventHandle=this.getEventHandle(eventKey,target);\r\n    }\r\n \r\n resetEventHandle(){\r\n\t    //hide context menu\r\n\t    this.component.popup.close();\r\n        if (this.targetEventHandle != null) {\r\n            this.targetEventHandle.detach();\r\n        }\r\n        this.targetEventHandle = null;                \r\n    }\r\n \r\n}\r\n\r\nmodule.exports ={\r\n\t  FootprintEventMgr,\r\n\t  ArcExtendAngleEventHandler,\r\n\t  ArcStartAngleEventHandle,\r\n\t  ArcMidPointEventHandle,\r\n\t  ResizeEventHandle,\r\n\t  SolidRegionEventHandle\r\n}","var ContextMenu = require('core/popup/contextmenu').ContextMenu;\r\nvar core=require('core/core');\r\n\r\nclass FootprintContextMenu extends ContextMenu{\r\nconstructor(component,placeholderid){\r\n\t\tsuper(component,placeholderid);\t\r\n\t}\t\r\nregisterLineSelectPopup(target,event){\r\n\t  let bending=target.isBendingPointClicked(event.x,event.y);\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='cloneid' ><td style='padding: 0.4em;'>Clone</td></tr>\";\r\n\t    if(bending!=null){\r\n\t      if(target.isEndPoint(event.x,event.y)){\t\r\n\t        items+=\"<tr id='resumeid'><td style='padding: 0.4em;'>Resume</td></tr>\";\r\n\t      }\r\n\t    }else{\r\n\t    \titems+=\"<tr id='addbendingpointid'><td style='padding: 0.4em;'>Add Bending point</td></tr>\";\t\r\n\t    }\r\n\t    \r\n\t    if(bending!=null){\r\n\t      items+=\"<tr id='deletebendingpointid'><td style='padding: 0.4em'>Delete Bending point</td></tr>\";\r\n\t    }\r\n\t\titems+=\"<tr id='sendbackid'><td style='padding: 0.4em'>Send To Back</td></tr>\";\r\n\t\titems+=\"<tr id='bringfrontid'><td style='padding: 0.4em'>Bring To Front</td></tr>\";\t  \r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t\r\n\t    \r\n}\r\nregisterUnitPopup(target,event){\t          \t            \r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='selectallid' ><td style='padding: 0.4em;'>Select All</td></tr>\";\r\n\t    items+=\"<tr id='undoid'><td style='padding: 0.4em;'>Undo</td></tr>\";\t  \r\n\t    items+=\"<tr id='redoid'><td style='padding: 0.4em;'>Redo</td></tr>\";\r\n\t    items+=\"<tr id='loadid'><td style='padding: 0.4em'>Load</td></tr>\";\r\n\t    items+=\"<tr id='reloadid'><td style='padding: 0.4em'>Reload</td></tr>\";\r\n\t    items+=\"<tr id='deleteunit'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"<tr id='copyid'><td style='padding: 0.4em'>Copy</td></tr>\";\r\n\t    items+=\"<tr id='pasteid'><td style='padding: 0.4em'>Paste</td></tr>\";\t\t    \r\n\t    items+=\"<tr id='positiontocenterid'><td style='padding: 0.4em'>Position drawing to center</td></tr>\";\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t    \r\n\t    \r\n}\r\nregisterBlockPopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='rotateleftid' ><td style='padding: 0.4em;'>Rotate Left</td></tr>\";\r\n\t    items+=\"<tr id='rotaterightid'><td style='padding: 0.4em;'>Rotate Right</td></tr>\";\t  \r\n\t    items+=\"<tr id='cloneid'><td style='padding: 0.4em;'>Clone</td></tr>\";\r\n\t    items+=\"<tr id='topbottomid'><td style='padding: 0.4em'>Mirror Top-Bottom</td></tr>\";\r\n\t    items+=\"<tr id='leftrightid'><td style='padding: 0.4em'>Mirror Left-Right</td></tr>\";\r\n\t    items+=\"<tr id='deleteid'><td style='padding: 0.4em'>Delete</td></tr>\";\t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t\t\r\n\t\t\t\t\r\n}\r\nregisterLinePopup(target,event){\r\n\t  var items=\"<div id='menu-items'><table style='cursor: default;'>\";\t\t  \t\t  \t\t\t  \r\n\t    items+=\"<tr id='deletelastpointid' ><td style='padding: 0.4em;'>Delete Last Point</td></tr>\";\r\n\t    items+=\"<tr id='deletelineid'><td style='padding: 0.4em;'>Delete Line</td></tr>\";\t  \r\n\t    items+=\"<tr id='cancelid'><td style='padding: 0.4em;'>Cancel</td></tr>\";\t    \t    \t\r\n\t    items+=\"</table></div>\";\r\n\t    this.setContent(event,items,{target:target});\t  \t\r\n}\r\nactionPerformed(id,context){ \t\r\n\t\r\n   super.actionPerformed(id,context);\r\n   \r\n}\r\n\r\n\r\n}\r\n\r\nmodule.exports ={\r\n\t\tFootprintContextMenu\r\n\t\t}","var core=require('core/core');\r\nvar utilities =require('core/utilities');\r\nvar Shape=require('core/shapes').Shape;\r\nvar AbstractLine=require('core/shapes').AbstractLine;\r\nvar glyph=require('core/text/d2glyph');\r\nvar font=require('core/text/d2font');\r\nvar d2=require('d2/d2');\r\n\r\n\r\nclass FootprintShapeFactory{\r\n\t\r\ncreateShape(data){\r\n\tif (data.tagName.toLowerCase() == 'pad') {\r\n\t\tvar pad = new Pad(0, 0, 0, 0);\r\n\t\tpad.fromXML(data);\r\n\t\treturn pad;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'rectangle') {\r\n\t\tvar roundRect = new RoundRect(0, 0, 0, 0, 0,0, core.Layer.SILKSCREEN_LAYER_FRONT);\r\n\t\troundRect.fromXML(data);\r\n\t\treturn roundRect;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'circle') {\r\n\t\tvar circle = new Circle(0, 0, 0, 0, 0);\r\n\t\tcircle.fromXML(data);\r\n\t\treturn circle;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'ellipse') {\r\n\t\tvar circle = new Circle(0, 0, 0, 0, 0);\r\n\t\tcircle.fromXML(data);\r\n\t\treturn circle;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'line') {\r\n\t\tvar line = new Line( 0, 0, 0, 0, 0);\r\n\t\tline.fromXML(data);\r\n\t\treturn line;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'arc') {\r\n\t\tvar arc = new Arc(0, 0, 0, 0, 0);\r\n\t\tarc.fromXML(data);\r\n\t\treturn arc;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'label') {\r\n\t\tvar label = new GlyphLabel(0, 0, 0);\r\n\t\tlabel.fromXML(data);\t\t\r\n\t\treturn label;\r\n\t}\r\n\tif (data.tagName.toLowerCase() == 'solidregion') {\r\n\t\tvar region = new SolidRegion(0);\r\n\t\tregion.fromXML(data);\t\t\r\n\t\treturn region;\r\n\t}\t\r\n\r\n}\r\n}\t\r\n\r\nclass GlyphLabel extends Shape{\r\nconstructor(text,thickness,layermaskId) {\r\n\t\tsuper( 0, 0, 0, 0, thickness,layermaskId);\r\n\t\tthis.setDisplayName(\"Label\");\r\n\t\tthis.texture=new glyph.GlyphTexture(text,\"\",0,0,thickness);\r\n        this.texture.setSize(core.MM_TO_COORD(2));\r\n\t}\r\nclone(){\r\n    var copy = new GlyphLabel(this.text,this.thickness,this.layermaskId);    \r\n        copy.texture = this.texture.clone();        \r\n        copy.copper=this.copper;\r\n\t\treturn copy;\r\n    }\r\nsetCopper(copper){\r\n\tthis.copper= copper;\r\n\t//mirror horizontally\r\n\tlet line=new d2.Line(this.texture.anchorPoint,new d2.Point(this.texture.anchorPoint.x,this.texture.anchorPoint.y+100));\r\n\t\r\n\tlet side=core.Layer.Side.resolve(this.copper.getLayerMaskID());\r\n\t\r\n\tthis.texture.mirror(side==core.Layer.Side.BOTTOM,line);\r\n}\r\nsetRotation(rotate,center){\t\r\n\tif(center==undefined){\r\n\t\t  this.texture.setRotation(rotate,this.getCenter());\r\n\t}else{\r\n\t\t  this.texture.setRotation(rotate,center);\t\r\n\t}\r\n}\r\ncalculateShape(){ \r\n  return this.texture.getBoundingShape();\r\n}\r\ngetLabel(){\r\n  return this.texture;\r\n}\r\nget vertices(){\r\n\t  return [];\t\r\n}\r\nisClicked(x,y){\r\n    return this.texture.isClicked(x,y);\r\n}\r\ngetCenter(){\r\n   return this.texture.getBoundingShape().center;\r\n}\r\ngetTexture(){\r\n  return this.texture;    \r\n}\r\ngetClickableOrder(){\r\n\treturn 1;\r\n}\r\nsetSide(side, line,angle) {\r\n    this.copper=(core.Layer.Side.change(this.copper.getLayerMaskID()));\r\n    this.texture.setSide(side, line, angle);\r\n}\r\nsetSelected(selected) {\r\n    this.texture.setSelected(selected);\r\n}\r\nisSelected() {\r\n   return this.texture.selection;\r\n}\r\nrotate(rotation) {\t\r\n\tthis.texture.rotate(rotation.angle,rotation.origin);\t\r\n}\r\nmirror(line) {\r\n\r\n}\r\nmove(xoffset,yoffset) {\r\n  this.texture.move(xoffset, yoffset);\r\n}\r\ntoXML() {\r\n    if (!this.texture.isEmpty())\r\n        return \"<label layer=\\\"\"+this.copper.getName()+\"\\\">\" + this.texture.toXML() + \"</label>\";\r\n    else\r\n        return \"\";\r\n}\r\nfromXML(data){\r\n        //extract layer info        \r\n        if(j$(data).attr(\"layer\")!=null){\r\n           this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"layer\"));\r\n        }else{\r\n           this.copper=core.Layer.Copper.FSilkS;\r\n        }\r\n        this.texture.fromXML(data);  \r\n}    \r\npaint(g2, viewportWindow, scale,layersmask) {\r\n      if((this.copper.getLayerMaskID()&layersmask)==0){\r\n        return;\r\n      }\r\n\t\tvar rect = this.texture.getBoundingShape();\r\n\t\t\trect.scale(scale.getScale());\r\n\t\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\tif (this.selection) {\r\n\t\t\tthis.texture.fillColor = \"gray\";\r\n\t\t} else {\r\n\t\t\tthis.texture.fillColor = this.copper.getColor();\r\n\t\t}\r\n\t\tthis.texture.paint(g2, viewportWindow, scale,this.copper.getLayerMaskID());\r\n    }\r\n}\t\r\nclass RoundRect extends Shape{\r\n\tconstructor(x, y, width, height,arc,thickness,layermaskid) {\r\n\t\tsuper(x, y, width, height, thickness,layermaskid);\r\n\t\tthis.setDisplayName(\"Rect\");\t\t\r\n\t\tthis.selectionRectWidth=3000;\r\n\t\tthis.resizingPoint = null;\r\n\t\t//this.rotation=0;\r\n\t\tthis.roundRect=new d2.RoundRectangle(new d2.Point(x,y),width,height,arc);\t\t\r\n\t}\r\n\tclone() {\r\n\t\tvar copy = new RoundRect(0,0,0,0,0,this.thickness,this.copper.getLayerMaskID());\r\n\t\tcopy.roundRect = this.roundRect.clone();\r\n\t\tcopy.rotation=this.rotation;\r\n\t\tcopy.fill = this.fill;\t\t\r\n\t\treturn copy;\r\n\t}\r\n\tcalculateShape() {\r\n\t\treturn this.roundRect.box;\t\t\r\n\t}\r\n    alignResizingPointToGrid(targetPoint){\r\n        let point=this.owningUnit.getGrid().positionOnGrid(targetPoint.x,targetPoint.y);  \r\n        this.Resize(point.x -targetPoint.x,point.y-targetPoint.y,targetPoint);     \r\n    }\t\r\n\tgetCenter() {\r\n\t\tlet box=this.roundRect.box;\r\n\t    return new d2.Point(box.center.x,box.center.y);\r\n\t}\r\n\tsetSelected (selection) {\r\n\t\tsuper.setSelected(selection);\r\n\t\t\tif (!selection) {\r\n\t\t\t\tthis.resizingPoint = null;\r\n\t        }\r\n\t}\t\r\n\tget vertices(){\r\n\t  return this.roundRect.vertices;\t\r\n\t}\r\n\tisClicked(x, y) {\t\t\r\n\t  if(this.fill==core.Fill.EMPTY) {\r\n    \t\treturn this.roundRect.isPointOn(new d2.Point(x, y),this.thickness);\r\n      }else {    \t\t\r\n      \t    return this.roundRect.contains(new d2.Point(x, y));\t\r\n      } \t\t\t\r\n\t}\r\n\tisControlRectClicked(x,y){\r\n\t   \tlet pt=new d2.Point(x,y);\r\n\t   \tlet result=null\r\n\t\tthis.roundRect.points.some(v=>{\r\n\t   \t\tif(d2.utils.LE(pt.distanceTo(v),this.selectionRectWidth/2)){\r\n\t   \t\t  \tresult=v;\r\n\t   \t\t\treturn true;\r\n\t   \t\t}else{\r\n\t   \t\t\treturn false;\r\n\t   \t\t}\r\n\t   \t});\r\n\t   \treturn result;\r\n\t}\t\r\n\tsetRotation(rotate,center){\r\n\t\tlet alpha=rotate-this.rotation;\r\n\t\tlet box=this.roundRect.box;\r\n\t\tif(center==undefined){\r\n\t\t  this.roundRect.rotate(alpha,box.center);\r\n\t\t}else{\r\n\t\t  this.roundRect.rotate(alpha,center);\t \t\r\n\t\t}\r\n\t\tthis.rotation=rotate;\r\n\t}\r\n\tsetRounding(rounding){\t  \r\n\t  this.roundRect.setRounding(rounding);\r\n\t}\r\n\tsetResizingPoint(pt){\r\n\t\tthis.resizingPoint=pt;\r\n\t}\r\n\tgetResizingPoint() {\r\n\t\treturn this.resizingPoint;\r\n\t}\r\n\tmove(xoffset, yoffset) {\r\n\t\tthis.roundRect.move(xoffset,yoffset);\r\n\t}\r\n\tmirror(line){\r\n\t\tthis.roundRect.mirror(line);\r\n\t}\t\r\n\trotate(rotation){\t\r\n\t\t//fix angle\r\n\t\tlet alpha=this.rotation+rotation.angle;\r\n\t\tif(alpha>=360){\r\n\t\t\talpha-=360\r\n\t\t}\r\n\t\tif(alpha<0){\r\n\t\t alpha+=360; \r\n\t\t}\t\r\n\t\tthis.rotation=alpha;\t\t\r\n\t\tthis.roundRect.rotate(rotation.angle,rotation.origin);\r\n\t}\r\n\tResize(xoffset, yoffset,clickedPoint){\r\n\t\tthis.roundRect.resize(xoffset, yoffset,clickedPoint);\r\n\t}\r\n\tgetClickableOrder(){\r\n\t\treturn this.roundRect.area; \r\n\t}\t\r\n\ttoXML() {\r\n\t\tlet points=\"\";\r\n\t\tthis.roundRect.points.forEach(function(point) {\r\n\t\t\tpoints += utilities.roundFloat(point.x,4) + \",\" + utilities.roundFloat(point.y,4) + \",\";\r\n\t\t},this);\r\n\t\treturn \"<rectangle copper=\\\"\" + this.copper.getName()\r\n\t\t        +\"\\\" thickness=\\\"\" + this.thickness\r\n\t\t\t\t+ \"\\\" fill=\\\"\" + this.fill + \"\\\" arc=\\\"\" + this.roundRect.rounding\r\n\t\t\t\t+\"\\\" points=\\\"\" + points\r\n\t\t\t\t+ \"\\\"></rectangle>\";\r\n\t}\r\n\tfromXML(data) {\r\n\t\tif(j$(data)[0].hasAttribute(\"copper\")){\r\n\t\t  this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));\r\n\t\t}\r\n\t\tif(j$(data).attr(\"width\")!=undefined){\r\n\t\t  this.roundRect.setRect(parseInt(j$(data).attr(\"x\")),parseInt(j$(data).attr(\"y\")),parseInt(j$(data).attr(\"width\")),parseInt(j$(data).attr(\"height\")),parseInt(j$(data).attr(\"arc\"))/2);\r\n\t\t}else{\t\t\t\r\n\t\t\tvar pts=j$(data).attr(\"points\");\t\t\t\r\n\t\t\tvar lastchar = pts[pts.length - 1];\r\n\t\t\tif(lastchar==\",\"){\r\n\t\t\t\tpts=pts.substr(0,pts.length - 1); \r\n\t\t\t}\r\n\t\t\tvar array = JSON.parse(\"[\" +pts+ \"]\");\r\n\t\t\tlet points=[];\r\n\t\t\tpoints.push(new d2.Point(array[0],array[1]));\r\n\t\t\tpoints.push(new d2.Point(array[2],array[3]));\r\n\t\t\tpoints.push(new d2.Point(array[4],array[5]));\r\n\t\t\tpoints.push(new d2.Point(array[6],array[7]));\r\n\t\t\tthis.roundRect.rounding=parseInt(j$(data).attr(\"arc\"));\r\n\t\t\tthis.roundRect.setPoints(points);\r\n\t\t}\r\n\t\t\r\n\t\tthis.thickness = (parseInt(j$(data).attr(\"thickness\")));\r\n\t\tthis.fill = parseInt(j$(data).attr(\"fill\"));\r\n\t\tthis.fill=(this.fill==0?1:this.fill);\r\n\t}\r\n\tpaint(g2, viewportWindow, scale,layersmask) {\r\n\t    if((this.copper.getLayerMaskID()&layersmask)==0){\r\n\t        return;\r\n\t    }\t\t\r\n\t\tvar rect = this.roundRect.box;\r\n\t\trect.scale(scale.getScale());\r\n\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(this.copper.getLayerMaskID()==core.Layer.BOARD_OUTLINE_LAYER){\r\n\t\t  g2.globalCompositeOperation = 'source-atop';\t\r\n\t\t}else{\r\n\t\t  g2.globalCompositeOperation = 'lighter';\r\n\t\t}\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\t\tg2.lineCap = 'round';\r\n\t\tg2.lineJoin = 'round';\r\n\r\n\t\tif (this.fill == core.Fill.EMPTY) {\t\t\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t\t}\t\t\t\r\n\t\t} else {\r\n\t\t\tg2._fill=true;\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\t\tg2.fillStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet r=this.roundRect.clone();\t\r\n\t\tr.scale(scale.getScale());\r\n        r.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tr.paint(g2);\r\n\t\t\r\n\t\tg2._fill=false;\r\n\t\t\r\n\t\tg2.globalCompositeOperation = 'source-over';\r\n\r\n\t}\r\n\r\ndrawControlShape(g2, viewportWindow, scale){\r\n\tutilities.drawCrosshair(g2,viewportWindow,scale,this.resizingPoint,this.selectionRectWidth,this.roundRect.vertices); \t\t\r\n\t}\t\r\n}\r\n\r\nclass Circle extends Shape{\r\n\tconstructor(x,y,r,thickness,layermaskId) {\r\n\t\tsuper(0, 0, 0, 0, thickness,\r\n\t\t\t\tlayermaskId);\r\n\t\tthis.setDisplayName(\"Circle\");\r\n\t\tthis.selectionRectWidth=3000;\r\n\t\tthis.resizingPoint=null;\r\n\t\tthis.circle=new d2.Circle(new d2.Point(x,y),r);\r\n\t\t//this.rotation=0;\r\n\t}\r\nclone() {\r\n\tlet copy=new Circle(this.circle.center.x,this.circle.center.y,this.circle.radius,this.thickness,this.copper.getLayerMaskID());\r\n\tcopy.rotation=this.rotation;\r\n\tcopy.fill=this.fill;\r\n\treturn copy\t\t\t\t\r\n\t}\t\r\ncalculateShape(){    \r\n\t return this.circle.box;\t \r\n    }\r\nalignToGrid(isRequired) {\r\n        if(isRequired){\r\n          return super.alignToGrid(isRequired);\r\n        }else{\r\n            return null;\r\n        }\r\n}\r\nalignResizingPointToGrid(targetPoint) {   \r\n\r\n}\r\nget vertices(){\r\n\t  return this.circle.vertices;\t\r\n\t}\r\nisClicked(x, y) {\t\r\n\tif(this.fill==core.Fill.EMPTY) {\r\n        \t  return (this.circle.isPointOn(new d2.Point(x,y),this.thickness/2));\r\n        }else {    \t\t\r\n        \t  return this.circle.contains(new d2.Point(x, y));\t\r\n        }\r\n\t}\r\nisControlRectClicked(x,y) {\r\n   \tlet pt=new d2.Point(x,y);\r\n   \tlet result=null\r\n\tthis.circle.vertices.some(v=>{\r\n   \t\tif(d2.utils.LE(pt.distanceTo(v),this.selectionRectWidth/2)){\r\n   \t\t  \tresult=v;\r\n   \t\t\treturn true;\r\n   \t\t}else{\r\n   \t\t\treturn false;\r\n   \t\t}\r\n   \t});\r\n   \treturn result;\r\n    }\t\r\ntoXML() {\r\n        return \"<circle copper=\\\"\"+this.copper.getName()+\"\\\" x=\\\"\"+utilities.roundFloat(this.circle.pc.x,4)+\"\\\" y=\\\"\"+utilities.roundFloat(this.circle.pc.y,4)+\"\\\" radius=\\\"\"+utilities.roundFloat(this.circle.r,4)+\"\\\" thickness=\\\"\"+this.thickness+\"\\\" fill=\\\"\"+this.fill+\"\\\"/>\";\r\n\t}\r\nfromXML(data) {\t  \r\n        this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));\r\n        \r\n \t\tlet xx=parseInt(j$(data).attr(\"x\"));\r\n \t\tlet yy=parseInt(j$(data).attr(\"y\"));\r\n \t\t\r\n \t\tif(j$(data).attr(\"width\")!=undefined){\r\n \t\t\tlet diameter=parseInt(parseInt(j$(data).attr(\"width\")));\r\n \t        this.circle.pc.set(xx+(parseInt(diameter/2)),yy+(parseInt(diameter/2)));\r\n \t        this.circle.r=parseInt(diameter/2); \t\t\t\r\n \t\t}else{\r\n \t\t\tlet radius=parseInt(parseInt(j$(data).attr(\"radius\")));\r\n \t        this.circle.pc.set(xx,yy);\r\n \t        this.circle.r=radius; \t\t\t \t\t\r\n \t\t}\r\n \t\t \r\n         \r\n \t\t this.thickness = (parseInt(j$(data).attr(\"thickness\")));\r\n \t\t this.fill = parseInt(j$(data).attr(\"fill\")); \r\n \t\t\r\n\t}\r\n\tmirror(line){\r\n\t   this.circle.mirror(line);\t\r\n\t}\r\n    \r\n\tmove(xoffset, yoffset) {\r\n\t\tthis.circle.move(xoffset,yoffset);\r\n\t}\t\r\n\tsetRotation(rotate,center){\r\n\t\tlet alpha=rotate-this.rotation;\r\n\t\tif(center==null){\r\n\t\t\tthis.circle.rotate(alpha,this.circle.center);\r\n\t\t}else{\r\n\t\t\tthis.circle.rotate(alpha,center);\t \t\r\n\t\t}\r\n\t\tthis.rotation=rotate;\t\t\t\t\t\t\r\n\t}\t\t\r\n\trotate(rotation){\r\n\t\t//fix angle\r\n\t\tlet alpha=this.rotation+rotation.angle;\r\n\t\tif(alpha>=360){\r\n\t\t\talpha-=360\r\n\t\t}\r\n\t\tif(alpha<0){\r\n\t\t alpha+=360; \r\n\t\t}\t\r\n\t\tthis.rotation=alpha;\r\n\t\tthis.circle.rotate(rotation.angle,rotation.origin);\r\n\t}\r\n\tResize(xoffset, yoffset,point) {    \r\n\t\tlet radius=this.circle.r;\r\n\r\n        if(d2.utils.EQ(point.x,this.circle.pc.x)){\r\n          if(point.y>this.circle.pc.y){\r\n        \t  radius+=yoffset;\r\n          }else{\r\n        \t  radius-=yoffset;  \r\n          }\t\r\n        }\r\n        if(d2.utils.EQ(point.y,this.circle.pc.y)){\r\n            if(point.x>this.circle.pc.x){\r\n          \t  radius+=xoffset;\r\n            }else{\r\n          \t  radius-=xoffset;  \r\n            }\t\r\n        }\r\n        if(radius>0){ \r\n          this.circle.r=radius;\r\n        }\r\n    }\t\r\n\tpaint(g2, viewportWindow, scale,layersmask) {\r\n\t    if((this.copper.getLayerMaskID()&layersmask)==0){\r\n\t        return;\r\n\t    }\t\t\r\n\t\tvar rect = this.circle.box;\r\n\t\trect.scale(scale.getScale());\r\n\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// ****3 http://scienceprimer.com/draw-oval-html5-canvas\r\n\t\tif(this.copper.getLayerMaskID()==core.Layer.BOARD_OUTLINE_LAYER){\r\n\t\t  g2.globalCompositeOperation = 'source-atop';\t\r\n\t\t}else{\r\n\t\t  g2.globalCompositeOperation = 'lighter';\r\n\t\t}\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\r\n\t\tif (this.fill == core.Fill.EMPTY) {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tg2._fill=true;\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.fillStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet c=this.circle.clone();\r\n\t\tc.scale(scale.getScale());\r\n        c.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tc.paint(g2);\r\n\t\tg2._fill=false;\r\n\r\n\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\r\n\t\t  \r\n }\r\ndrawControlShape(g2, viewportWindow, scale) {\r\n\tutilities.drawCrosshair(g2,viewportWindow,scale,null,this.selectionRectWidth,this.circle.vertices);\t\r\n}\r\ngetClickableOrder(){\r\n\treturn this.circle.area; \r\n}\t\r\ngetResizingPoint() {\r\n        return null;\r\n}\r\n\r\nsetResizingPoint(point) {\r\n\r\n}\r\n\r\n}\r\nclass Arc extends Shape{\r\n\tconstructor(x,y,r,thickness,layermaskid){\t\r\n\t        super(0, 0, 0,0,thickness,layermaskid);  \r\n\t\t\tthis.setDisplayName(\"Arc\");\r\n\t\t\tthis.selectionRectWidth=3000;\r\n\t\t\tthis.resizingPoint=null;\r\n\t\t\tthis.arc=new d2.Arc(new d2.Point(x,y),r,50,170);\r\n\t\t\tthis.A;\r\n\t\t\tthis.B;\r\n\t\t\tthis.M;\r\n\t\t\t//this.rotation=0;\r\n\t\t\tthis.arcType=core.ArcType.CENTER_POINT_ARC;\r\n\t}\r\n\tclone() {\r\n\r\n\t\t\tvar copy = new Arc(this.arc.center.x,this.arc.center.y, this.arc.r,this.thickness,this.copper.getLayerMaskID());\t\t\r\n\t        copy.arc.startAngle = this.arc.startAngle;\r\n\t        copy.arc.endAngle = this.arc.endAngle; \r\n\t        copy.rotation=this.rotation;\r\n\t\t\tcopy.fill = this.fill;\r\n\t\t\treturn copy;\r\n\t}\r\n\tcalculateShape() {\r\n\t\treturn this.arc.box;\t\r\n\t}\r\n\talignResizingPointToGrid(isStartPoint) {\r\n\t\tlet A=this.arc.start.clone(),B=this.arc.end.clone();\t\t\t\t\r\n\t    let targetPoint;\r\n\r\n\t\tif(isStartPoint){  //start point click\t    \t\t    \t\r\n\t    \t targetPoint=this.owningUnit.grid.positionOnGrid(A.x,A.y);\r\n\t    \t this.resizeStartEndPoint((targetPoint.x-A.x),(targetPoint.y-A.y),isStartPoint);\r\n\t    }else{\t    \t\r\n\t    \ttargetPoint=this.owningUnit.grid.positionOnGrid(B.x,B.y);\r\n\t    \tthis.resizeStartEndPoint((targetPoint.x-B.x),(targetPoint.y-B.y),isStartPoint);\r\n\t    }\t\t\t        \r\n\t}\r\n\tgetClickableOrder(){\r\n\t\treturn this.arc.area; \r\n\t}\r\n\tfromXML(data){\r\n\t        \r\n\t        this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));        \r\n\t\t\tlet xx=parseInt(j$(data).attr(\"x\"));\r\n\t\t\tlet yy=parseInt(j$(data).attr(\"y\"));\r\n\t\t\t\r\n\t \t\tif(j$(data).attr(\"width\")!=undefined){\r\n\t \t\t\tlet diameter=parseInt(parseInt(j$(data).attr(\"width\")));\r\n\t \t        this.arc.pc.set(xx+(parseInt(diameter/2)),yy+(parseInt(diameter/2)));\r\n\t \t        this.arc.r=parseInt(diameter/2); \t\t\t\r\n\t \t\t}else{\r\n\t \t\t\tlet radius=parseInt(parseInt(j$(data).attr(\"radius\")));\r\n\t \t        this.arc.pc.set(xx,yy);\r\n\t \t        this.arc.r=radius; \t\t\t \t\t\r\n\t \t\t}        \r\n\t\t\tthis.arc.startAngle = parseInt(j$(data).attr(\"start\"));\r\n\t        this.arc.endAngle = parseInt(j$(data).attr(\"extend\"));        \r\n\t\t\tthis.thickness = (parseInt(j$(data).attr(\"thickness\")));\r\n\t\t\tthis.fill=parseInt(j$(data).attr(\"fill\"));\r\n\t}\r\n\ttoXML() {\r\n\t    return '<arc copper=\"'+this.copper.getName()+'\"  x=\"'+utilities.roundFloat(this.arc.pc.x,4)+'\" y=\"'+utilities.roundFloat(this.arc.pc.y,4)+'\" radius=\"'+utilities.roundFloat(this.arc.r,4)+'\"  thickness=\"'+this.thickness+'\" start=\"'+utilities.roundFloat(this.arc.startAngle,2)+'\" extend=\"'+utilities.roundFloat(this.arc.endAngle,2)+'\" fill=\"'+this.fill+'\" />';\r\n\t}\r\n\tsetRadius(r){\r\n\t\tthis.arc.r=r;\t\r\n\t}\r\n\tsetExtendAngle(extendAngle){\r\n\t    this.arc.endAngle=utilities.round(extendAngle);\r\n\t}\r\n\tsetStartAngle(startAngle){        \r\n\t    this.arc.startAngle=utilities.round(startAngle);\r\n\t}\r\n\tget vertices(){\r\n\t\t  return this.arc.vertices;\t\r\n\t\t}\r\n\tisControlRectClicked(x,y) {\r\n\t\t if(this.isStartAnglePointClicked(x,y)){\r\n\t\t\t    return this.arc.start;\r\n\t\t\t }\r\n\t\t if(this.isExtendAnglePointClicked(x,y)){\r\n\t\t\t    return this.arc.end;\r\n\t\t\t }\r\n\t\t if(this.isMidPointClicked(x,y)){\r\n\t\t\t    return this.arc.middle;\t \r\n\t\t\t }\r\n\t\t     return null;\r\n\t\t}\r\n\tisClicked(x, y) {\t\t\r\n    \tif(this.fill==core.Fill.EMPTY) {\r\n      \t  return (this.arc.isPointOn(new d2.Point(x,y),this.thickness/2));\r\n      \t}else {    \t\t\r\n      \t  return this.arc.contains(new d2.Point(x, y));\t\r\n      \t}\r\n\t}\r\n\tisMidPointClicked(x,y){\r\n\t    let p=this.arc.middle;\r\n\t    let box=d2.Box.fromRect(p.x - this.selectionRectWidth / 2, p.y - this.selectionRectWidth / 2,\r\n\t                 this.selectionRectWidth, this.selectionRectWidth);\r\n\t    if (box.contains({x,y})) {\r\n\t        return true;\r\n\t    }else{                   \r\n\t        return false;\r\n\t\t}\t\r\n\t}\r\n\tisStartAnglePointClicked(x,y){\t\r\n\t    let p=this.arc.start;\r\n\t    let box=d2.Box.fromRect(p.x - this.selectionRectWidth / 2, p.y - this.selectionRectWidth / 2,\r\n\t                 this.selectionRectWidth, this.selectionRectWidth);\r\n\t    if (box.contains({x,y})) {\r\n\t        return true;\r\n\t    }else{                   \r\n\t        return false;\r\n\t\t}\r\n\t}\r\n\tisExtendAnglePointClicked(x,y){\r\n\t    let p=this.arc.end;\r\n\t    let box=d2.Box.fromRect(p.x - this.selectionRectWidth / 2, p.y - this.selectionRectWidth / 2,\r\n\t                 this.selectionRectWidth, this.selectionRectWidth);\r\n\t    if (box.contains({x,y})) {\r\n\t        return true;\r\n\t    }else{                   \r\n\t        return false;\r\n\t\t}\r\n\t}\t\r\n\tsetRotation(rotate,center){\r\n\t\tlet alpha=rotate-this.rotation;\r\n\t\tif(center==undefined){\r\n\t\t\tthis.arc.rotate(alpha,this.arc.center);\r\n\t\t}else{\r\n\t\t\tthis.arc.rotate(alpha,center);\t \t\r\n\t\t}\r\n\t\tthis.rotation=rotate;\r\n\t}\r\n\trotate(rotation){\r\n\t\t//fix angle\r\n\t  let alpha=this.rotation+rotation.angle;\r\n\t  if(alpha>=360){\r\n\t\t\talpha-=360\r\n\t  }\r\n\t  if(alpha<0){\r\n\t\t alpha+=360; \r\n\t  }\t\r\n\t  this.rotation=alpha;\t\r\n\t  this.arc.rotate(rotation.angle,rotation.origin); \r\n\t}\r\n\tmirror(line) {\r\n\t  this.arc.mirror(line);\r\n\t}\r\n\tresizeStartEndPoint(xoffset,yoffset,isStartPoint){\r\n\t\tlet A=this.arc.start.clone(),B=this.arc.end.clone(),M=this.arc.middle.clone(),O=new d2.Point();\r\n\t\tlet middleSegment=new d2.Segment(A,B);\r\n\t\tlet middlePoint=middleSegment.middle();\r\n\t\t\r\n\t\tlet delta=M.distanceTo(middlePoint);\r\n\t    if(isStartPoint){  //start point click\t    \t\t    \t\r\n\t    \tA.move(xoffset,yoffset);\t    \t\r\n\t    }else{\t    \t\r\n\t    \tB.move(xoffset,yoffset);\r\n\t    }\r\n\t    \tmiddleSegment.set(A.x,A.y,B.x,B.y);\r\n\t    \tmiddlePoint=middleSegment.middle();\r\n\t    \tO.set(middlePoint);\r\n\t    \tM.set(middlePoint);\r\n\t    \t\r\n\t    \tlet v=new d2.Vector(middlePoint,A);\r\n\t    \tif(this.arc.endAngle>0){\r\n\t    \t  v.rotate90CW();\r\n\t    \t}else{\r\n\t    \t  v.rotate90CCW();\t\r\n\t    \t}\r\n\t    \tlet norm=v.normalize();\r\n\t\t\tlet x=M.x +delta*norm.x;\r\n\t\t\tlet y=M.y +delta*norm.y;\r\n\t\t\tM.set(x,y);\t//new position of mid point\r\n\t    \t//same calculation - arc on 3 points\r\n\t\t\tlet C=M;  \r\n\t\t\tlet C1=O;\r\n\t    \r\n\t\t\tx=C1.distanceTo(A);\r\n\t\t\ty=C1.distanceTo(C);\r\n\r\n\r\n\t\t\tlet l=(x*x)/y;\r\n\t\t\tlet lambda=(l-y)/2;\r\n\r\n\t\t\tv=new d2.Vector(C,C1);\r\n\t\t\tnorm=v.normalize();\t\t\t  \r\n\t\t\r\n\t\t\tlet a=C1.x +lambda*norm.x;\r\n\t\t\tlet b=C1.y + lambda*norm.y;\r\n\t\t\tlet center=new d2.Point(a,b);\r\n\t        let r = center.distanceTo(A);\r\n\t\t\t\r\n\t\t\tlet startAngle =new d2.Vector(center,A).slope;\r\n\t\t\tlet endAngle = new d2.Vector(center, B).slope;\r\n\t    \r\n\r\n\t\t\tlet start = 360 - startAngle;\t\t\r\n\t\t\tlet end= (360-endAngle)-start;\t\t\r\n\t\t\t\r\n\t\t\tif(this.arc.endAngle<0){  //negative extend\r\n\t\t\t\tif(end>0){\t\t\t  \r\n\t\t\t\t  end=end-360;\r\n\t\t\t\t}\r\n\t\t\t}else{\t\t//positive extend\t\t\t\r\n\t\t\t\tif(end<0){ \t\t\t\t\t   \r\n\t\t\t\t\tend=360-Math.abs(end);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\r\n\t\t\tthis.arc.center.set(center.x,center.y);\r\n\t\t\tthis.arc.r=r;\r\n\t\t\tthis.arc.startAngle=start;\r\n\t\t\tthis.arc.endAngle=end;\t\t\r\n\t\t\t\r\n\t\t\tif(isStartPoint){\r\n\t\t\t\tthis.resizingPoint=this.arc.start;\r\n\t\t\t}else{\r\n\t\t\t\tthis.resizingPoint=this.arc.end;\r\n\t\t\t}\r\n\t}\r\n\t/*\r\n\t * Resize through mouse position point\r\n\t */\r\n//\tResize(xoffset, yoffset,point) {\r\n//\t    \t\r\n//\t    this.resizingPoint=this.calculateResizingMidPoint(point);\r\n//\t    \r\n//\t\t//old middle point on arc\r\n//\t\tlet a1=this.arc.middle;  \r\n//\t\t//mid point on line\r\n//\t\tlet m=new d2.Point((this.arc.start.x+this.arc.end.x)/2,(this.arc.start.y+this.arc.end.y)/2);\r\n//\t\t//new middle point on arc\r\n//\t\tlet a2=this.resizingPoint;  //new middle\r\n//\t\t\r\n//\t\t//do they belong to the same plane in regard to m \r\n//\t\tlet vec = new d2.Vector(m, a2);\r\n//\t\tlet linevec=new d2.Vector(m,a1);\r\n//\t    let samePlane = d2.utils.GT(vec.dot(linevec.normalize()), 0);\r\n//\t    \r\n//\t    \r\n//\t//which plane\r\n//\t    \t\r\n//\t\tif(!samePlane){\r\n//\t      //return;\r\n//\t\t}\r\n//\t\t\tlet C=this.resizingPoint;  //projection\r\n//\t\t\tlet C1=m;\r\n//\t    \r\n//\t\t\tlet y=C1.distanceTo(C);\r\n//\t\t\tlet x=C1.distanceTo(this.arc.start);\r\n//\t    \r\n//\t\t\tlet l=(x*x)/y;\r\n//\t\t\tlet lambda=(l-y)/2;\r\n//\r\n//\t\t\tlet v=new d2.Vector(C,C1);\r\n//\t\t\tlet norm=v.normalize();\t\t\t  \r\n//\t\t\r\n//\t\t\tlet a=C1.x +lambda*norm.x;\r\n//\t\t\tlet b=C1.y + lambda*norm.y;\r\n//\t\t\tlet center=new d2.Point(a,b);\r\n//\t        let r = center.distanceTo(this.arc.start);\r\n//\t\t\t\r\n//\t\t\tlet startAngle =new d2.Vector(center,this.arc.start).slope;\r\n//\t\t\tlet endAngle = new d2.Vector(center, this.arc.end).slope;\r\n//\t    \r\n//\r\n//\t\t\tlet start = 360 - startAngle;\t\t\r\n//\t\t\tlet end= (360-endAngle)-start;\t\t\r\n//\t\t\t\r\n//\t\t\tif(this.arc.endAngle<0){  //negative extend\r\n//\t\t\t\tif(end>0){\t\t\t  \r\n//\t\t\t\t  end=end-360;\r\n//\t\t\t\t}\r\n//\t\t\t}else{\t\t//positive extend\t\t\t\r\n//\t\t\t\tif(end<0){ \t\t\t\t\t   \r\n//\t\t\t\t\tend=360-Math.abs(end);\r\n//\t\t\t\t}\t\t\t\r\n//\t\t\t}\r\n//\r\n//\t\t\r\n//\t\t\tthis.arc.center.set(center.x,center.y);\r\n//\t\t\tthis.arc.r=r;\r\n//\t\t\tthis.arc.startAngle=start;\r\n//\t\t\tthis.arc.endAngle=end;  \r\n//\t\t\r\n//}\r\nResize(xoffset, yoffset,point) {  \r\n\t//previous mid pont\r\n\tlet oldM=this.M.clone();\t\t\r\n    this.M=this.calculateResizingMidPoint(point);\r\n    \r\n     \r\n\t//mid point on line\r\n\tlet m=new d2.Point((this.A.x+this.B.x)/2,(this.A.y+this.B.y)/2);\r\n\t\t\r\n\t\r\n\t\tlet C=this.M;  //projection\r\n\t\tlet C1=m;\r\n    \r\n\t\tlet y=C1.distanceTo(C);\r\n\t\tlet x=C1.distanceTo(this.A);\r\n    \r\n\t\tlet l=(x*x)/y;\r\n\t\tlet lambda=(l-y)/2;\r\n\r\n\t\tlet v=new d2.Vector(C,C1);\r\n\t\tlet norm=v.normalize();\t\t\t  \r\n\t\r\n\t\tlet a=C1.x +lambda*norm.x;\r\n\t\tlet b=C1.y + lambda*norm.y;\r\n\t\tlet center=new d2.Point(a,b);\r\n        let r = center.distanceTo(this.A);\r\n\t\t\t        \r\n        \r\n     \tlet startAngle =new d2.Vector(center,this.A).slope;\r\n\t\tlet endAngle = new d2.Vector(center, this.B).slope;\r\n\t\r\n\t\tlet start = 360 - startAngle;\t\t\r\n\t\tlet end= (360-endAngle)-start;\t\t\r\n\t\t\r\n\t\tif(this.arc.endAngle<0){  //negative extend\r\n\t\t\tif(end>0){\t\t\t  \r\n\t\t\t  end=end-360;\r\n\t\t\t}\r\n\t\t}else{\t\t//positive extend\t\t\t\r\n\t\t\tif(end<0){ \t\t\t\t\t   \r\n\t\t\t\tend=360-Math.abs(end);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tthis.arc.center.set(center.x,center.y);\r\n\t\tthis.arc.r=r;\r\n\t\tthis.arc.startAngle=start;\r\n\t\t\r\n        //check if M and oldM on the same plane\t    \r\n\t    if(utilities.isLeftPlane(this.A,this.B,this.M)!=utilities.isLeftPlane(this.A,this.B,oldM)){\t\t     \t\t\t\t\t\r\n\t\t\tif(this.arc.endAngle<0){  //negative extend\r\n\t\t\t this.arc.endAngle=(360-end);\r\n\t\t\t}else{\r\n\t\t\t this.arc.endAngle=-1*(360-end);\t\r\n\t\t\t}\t\t\t\t\t\t     \t\t\r\n\t    }else{\t\t\t\t\t\t\t\r\n\t    \tthis.arc.endAngle=end;\t\t\t\r\n\t    }\t\t\t   \r\n\t\r\n\t    this.resizingPoint=this.arc.middle;\r\n}\t\r\ncalculateResizingMidPoint(pt){\r\n\tlet middle=new d2.Point((this.A.x+this.B.x)/2,(this.A.y+this.B.y)/2);\r\n\tlet line=new d2.Line(middle,this.M);\r\n\treturn line.projectionPoint(new d2.Point(pt.x,pt.y));\t\r\n}\r\nmove(xoffset,yoffset){\r\n\t  this.arc.move(xoffset,yoffset);\t\r\n\t}\r\npaint(g2, viewportWindow, scale,layersmask) {\r\n\t    if((this.copper.getLayerMaskID()&layersmask)==0){\r\n\t    \treturn;\r\n\t    }\r\n\t\tvar rect = this.arc.box;\r\n\t\trect.scale(scale.getScale());\r\n\t\tif (!rect.intersects(viewportWindow)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tg2.beginPath(); // clear the canvas context\r\n\t\tg2.lineCap = 'round';\r\n\r\n\t\t\t\t\t\t\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\t\tif(this.copper.getLayerMaskID()==core.Layer.BOARD_OUTLINE_LAYER){\r\n\t\t\t  g2.globalCompositeOperation = 'source-atop';\t\r\n\t\t}else{\r\n\t\t\t  g2.globalCompositeOperation = 'lighter';\r\n\t\t}\t\t\t\t\r\n\t\tif (this.fill == core.Fill.EMPTY) {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\t\tg2.strokeStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t\tg2._fill=false;\r\n\t\t} else {\r\n\t\t\tif (this.selection) {\r\n\t\t\t\tg2.fillStyle = \"gray\";\r\n\t\t\t} else {\r\n\t\t\t\tg2.fillStyle = this.copper.getColor();\r\n\t\t\t}\r\n\t\t\tg2._fill=true;\r\n\t\t}\r\n\r\n\t\tlet a=this.arc.clone();\r\n\t\ta.scale(scale.getScale());\r\n\t\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\t\ta.paint(g2);\r\n\r\n\t\tg2._fill=undefined;\r\n\t\t\r\n\t\tg2.globalCompositeOperation = 'source-over';\r\n\t\t\t    \r\n\r\n\t}\r\n\tdrawControlShape(g2, viewportWindow, scale) {\t\t\r\n\t\tutilities.drawCrosshair(g2,viewportWindow,scale,this.resizingPoint,this.selectionRectWidth,[this.arc.center,this.arc.start,this.arc.end,this.arc.middle]);\t\r\n\t}\r\n\tsetResizingPoint(pt){\r\n\t\tthis.resizingPoint=pt;\r\n\t}\r\n\tgetResizingPoint() {\r\n\t\treturn this.resizingPoint;\r\n\t}\r\n}\r\n\r\n\r\nclass SolidRegion extends Shape{\r\n\tconstructor(layermaskId) {\r\n        super( 0, 0, 0,0, 0, layermaskId);\r\n        this.displayName = \"Solid Region\";\r\n        this.floatingStartPoint=new d2.Point();\r\n        this.floatingEndPoint=new d2.Point();                 \r\n        this.selectionRectWidth = 3000;\r\n        this.polygon=new d2.Polygon();\r\n        this.resizingPoint;\r\n        //this.rotation=0;\r\n    }\r\nclone(){\r\n\t  var copy=new SolidRegion(this.copper.getLayerMaskID());\r\n      copy.polygon=this.polygon.clone();\r\n      copy.rotation=this.rotation;\r\n      return copy;\r\n}\r\ngetClickableOrder(){\r\n\treturn this.polygon.box.area; \r\n}\r\nalignResizingPointToGrid(targetPoint) {\r\n    this.owningUnit.grid.snapToGrid(targetPoint);         \r\n}\r\ncalculateShape() {\r\n\treturn this.polygon.box;\t\r\n}\r\ngetLinePoints() {\r\n\t   return this.polygon.points;\r\n}\r\nadd(point) {\r\n\t    this.polygon.add(point);\r\n}\r\nsetResizingPoint(point) {\r\n\t    this.resizingPoint=point;\r\n}\r\nisFloating() {\r\n    return (!this.floatingStartPoint.equals(this.floatingEndPoint));                \r\n}\r\nisClicked(x,y){\r\n\t  return this.polygon.contains(x,y);\r\n}\r\nisControlRectClicked(x, y) {\r\n\tvar rect = d2.Box.fromRect(x-this.selectionRectWidth / 2, y - this.selectionRectWidth/ 2, this.selectionRectWidth, this.selectionRectWidth);\r\n\tlet point = null;\r\n\r\n\tthis.polygon.points.some(function(wirePoint) {\r\n\t\tif (rect.contains(wirePoint)) {\r\n\t\t\t\t\tpoint = wirePoint;\r\n\t\t  return true;\r\n\t\t}else{\r\n\t\t  return false;\r\n\t\t}\r\n\t});\r\n\r\n\treturn point;\r\n}\r\nResize(xoffset, yoffset, clickedPoint) {\r\n\tclickedPoint.set(clickedPoint.x + xoffset,\r\n\t\t\t\t\t\t\t\tclickedPoint.y + yoffset);\r\n}\r\nreset(){\r\n\tthis.resetToPoint(this.floatingStartPoint);\t\r\n}\r\nresetToPoint(p){\r\n    this.floatingStartPoint.set(p.x,p.y);\r\n    this.floatingEndPoint.set(p.x,p.y); \r\n}\r\nmove(xoffset, yoffset) {\r\n\tthis.polygon.move(xoffset,yoffset);\r\n}\r\nmirror(line) {\r\n    this.polygon.mirror(line);\r\n}\r\nsetRotation(rotate,center){\r\n\tlet alpha=rotate-this.rotation;\r\n\tlet box=this.polygon.box;\r\n\tif(center==null){\r\n\t\tthis.polygon.rotate(alpha,box.center);\r\n\t}else{\r\n\t\tthis.polygon.rotate(alpha,center);\t \t\r\n\t}\r\n\tthis.rotation=rotate;\r\n}\r\nrotate(rotation) {\r\n\t//fix angle\r\n\tlet alpha=this.rotation+rotation.angle;\r\n\tif(alpha>=360){\r\n\t\talpha-=360\r\n\t}\r\n\tif(alpha<0){\r\n\t alpha+=360; \r\n\t}\t\r\n\tthis.rotation=alpha;\r\n\tthis.polygon.rotate(rotation.angle,rotation.origin);\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {\t\t\r\n    if((this.copper.getLayerMaskID()&layersmask)==0){\r\n        return;\r\n    }\r\n\tvar rect = this.polygon.box;\r\n\trect.scale(scale.getScale());\t\t\r\n\tif (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tg2.lineWidth = 1;\r\n\t\r\n\tif(this.isFloating()){\r\n      g2.strokeStyle = this.copper.getColor();\t\t\r\n\t}else{\r\n\t  g2._fill=true;\r\n\t  if (this.selection) {\r\n\t\t g2.fillStyle = \"gray\";\r\n\t  } else {\r\n\t\t g2.fillStyle = this.copper.getColor();\r\n\t  }\r\n\t}\r\n\r\n\t\r\n\r\n\tlet a=this.polygon.clone();\t\r\n\tif (this.isFloating()) {\r\n\t\tlet p = this.floatingEndPoint.clone();\r\n\t\ta.add(p);\t\r\n    }\r\n\ta.scale(scale.getScale());\r\n\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\tg2.globalCompositeOperation = 'lighter';\r\n\ta.paint(g2);\r\n\tg2.globalCompositeOperation = 'source-over';\r\n\tg2._fill=false;    \r\n}\r\n\r\ndrawControlShape(g2, viewportWindow, scale) {\r\n\tutilities.drawCrosshair(g2,viewportWindow,scale,null,this.selectionRectWidth,this.polygon.points);\t\r\n}\r\ntoXML() {\r\n\tvar result = \"<solidregion copper=\\\"\" + this.copper.getName() + \"\\\">\";\r\n\tthis.polygon.points.forEach(function(point) {\r\n\t\tresult += utilities.roundFloat(point.x,4) + \",\" + utilities.roundFloat(point.y,4) + \",\";\r\n\t});\r\n\tresult += \"</solidregion>\";\r\n\treturn result;\r\n}\r\nfromXML(data) {\r\n       if(j$(data).attr(\"copper\")!=null){\r\n        this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));\r\n       }else{\r\n        this.copper=core.Layer.Copper.FSilkS;\r\n       }\t\r\n   \t   var tokens = data.textContent.split(\",\");\r\n\t   var len = Math.floor(tokens.length / 2) * 2;\r\n\t   for (var index = 0; index < len; index += 2) {\r\n\t\t\tvar x = parseFloat(tokens[index]);\r\n\t\t\tvar y = parseFloat(tokens[index + 1]);\r\n\t\t\tthis.polygon.points.push(new d2.Point(x, y));\r\n\t\t}\r\n}\r\n}\r\n\r\nclass Line extends AbstractLine{\r\nconstructor(thickness,layermaskId) {\r\n\t\t\tsuper(thickness,layermaskId);\t\r\n}\r\nclone() {\r\n\t\t  var copy = new Line(this.thickness,this.copper.getLayerMaskID());\r\n\t\t  copy.polyline=this.polyline.clone();\r\n\t\t  copy.rotation=this.rotation;\r\n\t\t  return copy;\r\n\t\t}\r\nalignToGrid(isRequired) {\r\n    if (isRequired) {\r\n        this.polyline.points.forEach(function(wirePoint){\r\n            let point = this.owningUnit.getGrid().positionOnGrid(wirePoint.x, wirePoint.y);\r\n              wirePoint.set(point.x,point.y);\r\n        }.bind(this));\r\n    }\r\n    return null;\r\n}\r\n\r\ngetOrderWeight() {\r\n\treturn 2;\r\n}\r\npaint(g2, viewportWindow, scale,layersmask) {\t\t\r\n       if((this.copper.getLayerMaskID()&layersmask)==0){\r\n         return;\r\n       }\t\r\n\t   var rect = this.polyline.box;\r\n\t   rect.scale(scale.getScale());\t\t\r\n\t   if (!this.isFloating()&& (!rect.intersects(viewportWindow))) {\r\n\t\treturn;\r\n\t   }\r\n\t\t\t\t\r\n\t\tg2.lineCap = 'round';\r\n\t\tg2.lineJoin = 'round';\r\n\t\t\r\n\r\n\t\tg2.lineWidth = this.thickness * scale.getScale();\r\n\t\tif(this.copper.getLayerMaskID()==core.Layer.BOARD_OUTLINE_LAYER){\r\n\t\t\t  g2.globalCompositeOperation = 'source-atop';\t\r\n\t\t}else{\r\n\t\t\t  g2.globalCompositeOperation = 'lighter';\r\n\t\t}\r\n\t\tif (this.selection)\r\n\t\t\tg2.strokeStyle = \"gray\";\r\n\t\telse\r\n\t\t\tg2.strokeStyle = this.copper.getColor();\r\n\r\n\t\tlet a=this.polyline.clone();\r\n\t\tif (this.isFloating()) {                                                    \r\n            if(this.resumeState==ResumeState.ADD_AT_FRONT){                \r\n                let p = this.floatingEndPoint.clone();\r\n                a.points.unshift(p);               \r\n            }else{\t\t                            \r\n                let p = this.floatingEndPoint.clone();\r\n                a.add(p);    \r\n            }\r\n\t\t} \t\r\n\t\t\r\n\t\ta.scale(scale.getScale());\r\n\t\ta.move( - viewportWindow.x, - viewportWindow.y);\t\t\r\n\t\ta.paint(g2);\r\n\t\t\r\n\t\t\r\n\t\tg2.globalCompositeOperation = 'source-over';\t\t\t\t\r\n\r\n}\r\n\r\ntoXML() {\r\n\tvar result = \"<line copper=\\\"\" + this.copper.getName()\r\n\t\t\t\t\t\t\t\t+ \"\\\" thickness=\\\"\" + this.thickness + \"\\\">\";\r\n\tthis.polyline.points.forEach(function(point) {\r\n\t\tresult += utilities.roundFloat(point.x,5) + \",\" + utilities.roundFloat(point.y,5) + \",\";\r\n\t},this);\r\n\tresult += \"</line>\";\r\n\treturn result;\r\n}\r\nfromXML(data) {\r\n       if(j$(data).attr(\"copper\")!=null){\r\n        this.copper =core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));\r\n       }else{\r\n        this.copper=core.Layer.Copper.FSilkS;\r\n       }\t\r\n\t   this.thickness = (parseInt(j$(data).attr(\"thickness\")));\r\n   \t   var tokens = data.textContent.split(\",\");\r\n\t   var len = Math.floor(tokens.length / 2) * 2;\r\n\t   for (var index = 0; index < len; index += 2) {\r\n\t\t\tvar x = parseFloat(tokens[index]);\r\n\t\t\tvar y = parseFloat(tokens[index + 1]);\r\n\t\t\tthis.polyline.points.push(new d2.Point(x, y));\r\n\t\t}\r\n}\r\n}\r\n\r\n\r\nclass Drill{\r\n\t constructor(x,y,width) {\r\n\t    this.circle=new d2.Circle(new d2.Point(x,y),width/2);\r\n\t }\r\n\t clone(){\r\n\t\t let copy= new Drill(0);\r\n\t\t copy.circle.pc.x=this.circle.pc.x;\r\n\t\t copy.circle.pc.y=this.circle.pc.y;\r\n\t\t copy.circle.r=this.circle.r;\r\n\t\t return copy;\r\n\t }\r\n\t setLocation(x,y){\r\n        this.circle.pc.x=x;\r\n        this.circle.pc.y=y;\r\n\t }\r\n\t move( xoffset, yoffset) {\r\n\t\tthis.circle.move(xoffset,yoffset);\r\n\t }\r\n\t getWidth(){\r\n\t\t return 2*this.circle.r;\r\n\t }\r\n\t setWidth(width){\r\n\t\t this.circle.r=width/2;\r\n\t }\r\n\t //rotate(rotation) {\r\n\t //\t this.circle.rotate(rotation.angle,{x:rotation.originx,y:rotation.originy});\r\n\t //}\t   \r\n\t mirror( line) {\r\n\t       this.circle.mirror(line);\r\n\t }\r\n\t rotate(alpha,origin){\r\n\t    if(origin==null){\r\n\t       this.circle.rotate(alpha);\r\n\t    }else{\r\n\t       this.circle.rotate(alpha,origin);\t\r\n\t    }\t\t \r\n\t }\r\n\tpaint(g2,viewportWindow,scale){\r\n\t    g2._fill=true;\r\n\t    g2.fillStyle = 'black';\r\n\t    let c=this.circle.clone();\r\n\t\tc.scale(scale.getScale());\r\n        c.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tc.paint(g2);\r\n\t\t\r\n\t\tg2._fill=false;\r\n\t}\r\n\ttoXML(){\r\n\t    return \"<drill type=\\\"CIRCULAR\\\" x=\\\"\"+utilities.roundFloat(this.circle.pc.x,4)+\"\\\" y=\\\"\"+utilities.roundFloat(this.circle.pc.y,4)+\"\\\" width=\\\"\"+utilities.roundFloat(2*this.circle.radius,2)+\"\\\" />\";\t\r\n\t}\r\n\tfromXML(data){ \r\n\t   this.setLocation(parseFloat(j$(data).attr(\"x\")),parseFloat(j$(data).attr(\"y\")));\r\n\t   this.setWidth(parseFloat(j$(data).attr(\"width\")));  \t   \r\n\t}\r\n}\r\n\r\n\r\nPadShape={\r\n\t RECTANGULAR:0,\r\n\t CIRCULAR:1,\r\n\t OVAL:2,\r\n\t POLYGON:3,\r\n\t parse:function(shape){\r\n\t\t switch(shape){\r\n\t\t  case 'RECTANGULAR':\r\n\t\t\t     return this.RECTANGULAR;\r\n\t\t\t\t break;\r\n\t\t  case 'CIRCULAR':\r\n\t\t\t\t return this.CIRCULAR;\r\n\t\t\t\t break; \r\n\t\t  case 'OVAL':\r\n\t\t\t\t return this.OVAL;\r\n\t\t\t\t break;\t\r\n\t\t  case 'POLYGON':\r\n\t\t\t\t return this.POLYGON;\r\n\t\t\t\t break;\t\t\t\t\t \r\n\t\t  default:\r\n\t\t\t  throw new TypeError('Unrecognized pad Shape:'+shape+' to parse');  \r\n\t\t  } \r\n\t },\r\n\tformat:function(shape){\r\n\t\tif(shape==this.RECTANGULAR)\r\n\t\t\treturn 'RECTANGULAR';\r\n\t\tif(shape==this.CIRCULAR)\r\n\t\t\treturn 'CIRCULAR';\r\n\t\tif(shape==this.OVAL)\r\n\t\t\treturn 'OVAL';\r\n\t\tif(shape==this.POLYGON)\r\n\t\t\treturn 'POLYGON';\r\n\t\telse\r\n\t\t\treturn '';\r\n\t} \r\n};\r\n\t    \r\nPadType={\r\n\t   THROUGH_HOLE:0,\r\n\t   SMD:1,\r\n\t   CONNECTOR:2,\r\n\t   parse:function(type){\r\n\t\t  switch(type){\r\n\t\t  case 'THROUGH_HOLE':\r\n\t\t\t     return this.THROUGH_HOLE;\r\n\t\t\t\t break;\r\n\t\t  case 'SMD':\r\n\t\t\t\t return this.SMD;\r\n\t\t\t\t break; \r\n\t\t  case 'CONNECTOR':\r\n\t\t\t\t return this.CONNECTOR;\r\n\t\t\t\t break;\t\r\n\t\t  default:\r\n\t\t\t  throw new TypeError('Unrecognized pad Type:'+type+' to parse');  \r\n\t\t  } \r\n\t   },\r\n\t   format:function(type){\r\n\t\t  if(type==this.THROUGH_HOLE)\r\n\t\t\t return 'THROUGH_HOLE';\r\n\t\t  if(type==this.SMD)\r\n\t\t\t\t return 'SMD';\r\n\t\t  if(type==this.CONNECTOR)\r\n\t\t\t\t return 'CONNECTOR';\r\n\t\t  else\r\n\t\t\t  return '';\r\n\t   }\r\n};\r\n\r\nclass Pad extends Shape{\r\n\tconstructor(x,y,width,height) {\r\n\t   super(0, 0, width, height, -1, core.Layer.LAYER_BACK);\r\n\t   this.drill=null;\r\n\t   this.rotation=0;\r\n\t   this.offset=new d2.Point(0,0);\r\n\t   this.shape=new CircularShape(0,0,width,this);\r\n\t   this.setType(PadType.THROUGH_HOLE);\t   \r\n\t   this.setDisplayName(\"Pad\");\r\n\t   this.plated=true;\r\n       this.solderMaskExpansion=core.MM_TO_COORD(0.051);\r\n\t   this.number=new font.FontTexture(\"1\",\"number\",x,y,4000,0);\r\n\t   this.netvalue=new font.FontTexture(\"\",\"netvalue\",x,y,4000,0);   \r\n\t}\r\nclone(){\r\n\t     var copy=new Pad(0,0,this.width,this.height);\r\n\t     copy.setType(this.type);\r\n         copy.plated=this.plated;\r\n\t\t copy.solderMaskExpansion=this.solderMaskExpansion\r\n\t     copy.width=this.width;\r\n\t     copy.height=this.height;\r\n\t     copy.rotation=this.rotation;\r\n\t     copy.shape=this.shape.copy(copy);\r\n\t     copy.copper=this.copper;\r\n\t     copy.number=this.number.clone();\r\n\t     copy.netvalue=this.netvalue.clone();\r\n\t     if(this.drill!=null){\r\n\t    \t copy.drill=this.drill.clone();\r\n\t     }\r\n\t     return copy;\r\n\t}\r\n\r\ngetClickedTexture(x,y) {\r\n    if(this.number.isClicked(x, y))\r\n        return this.number;\r\n    else if(this.netvalue.isClicked(x, y))\r\n        return this.netvalue;\r\n    else\r\n    return null;\r\n}\r\nisClickedTexture(x,y) {\r\n    return this.getClickedTexture(x, y)!=null;\r\n}\r\ngetTextureByTag(tag) {\r\n    if(tag===(this.number.tag))\r\n        return this.number;\r\n    else if(tag===(this.netvalue.tag))\r\n        return this.netvalue;\r\n    else\r\n    return null;\r\n}\r\ngetCenter(){\r\n\treturn this.shape.center;\r\n}\r\ntoXML(){\r\n\t    var xml=\"<pad copper=\\\"\"+this.copper.getName()+\"\\\" type=\\\"\" +PadType.format(this.type) + \"\\\" shape=\\\"\"+PadShape.format(this.getShape())+\"\\\" plt=\\\"\"+(this.plated==true?1:0)+\"\\\" solder=\\\"\"+utilities.roundFloat(this.solderMaskExpansion,4)+\"\\\"  x=\\\"\"+utilities.roundFloat(this.shape.center.x,4)+\"\\\" y=\\\"\"+utilities.roundFloat(this.shape.center.y,4)+\"\\\" width=\\\"\"+utilities.roundFloat(this.getWidth(),2)+\"\\\" height=\\\"\"+utilities.roundFloat(this.getHeight(),2)+\"\\\" rt=\\\"\"+utilities.roundFloat(this.rotation,2)+\"\\\">\\r\\n\";\r\n\t        //xml+=this.shape.toXML()+\"\\r\\n\";\r\n\t        xml+=\"<offset x=\\\"\"+this.offset.x+\"\\\" y=\\\"\"+this.offset.y+\"\\\" />\\r\\n\";\r\n\t    \r\n\t        if (!this.number.isEmpty())\r\n\t        \txml+=\"<number>\" +\r\n\t                      this.number.toXML() +\r\n\t                      \"</number>\\r\\n\";\r\n\t    if (!this.netvalue.isEmpty())\r\n\t           xml+=\"<netvalue>\" +\r\n\t                      this.netvalue.toXML() +\r\n\t                      \"</netvalue>\\r\\n\";\r\n\t    if(this.drill!=null){\r\n\t        xml+=this.drill.toXML()+\"\\r\\n\";  \r\n\t    }\r\n\t    xml+=\"</pad>\";\r\n\t    return xml;\t\r\n\t}\t\r\nfromXML(data){   \r\n\t\t      this.copper=core.Layer.Copper.valueOf(j$(data).attr(\"copper\"));\r\n\t\t      this.setType(PadType.parse(j$(data).attr(\"type\")));\r\n\t\t      \r\n\t\t\t  let x=(parseFloat(j$(data).attr(\"x\")));\r\n\t\t\t  let y=(parseFloat(j$(data).attr(\"y\")));\r\n\t\t      this.width=(parseFloat(j$(data).attr(\"width\")));\r\n\t\t      this.height=(parseFloat(j$(data).attr(\"height\")));\r\n\t\t      \r\n\t\t      if(j$(data).attr(\"rt\")!=undefined)\r\n\t\t        this.rotation=(parseFloat(j$(data).attr(\"rt\")));\r\n\t\t      \r\n\t          if(j$(data).attr(\"plt\")!=undefined)\r\n            \tthis.plated=(parseInt(j$(data).attr(\"plt\"))!=0);\r\n        \r\n    \t      if(j$(data).attr(\"solder\")!=undefined)\r\n                this.solderMaskExpansion=parseFloat(j$(data).attr(\"solder\"));\r\n         \r\n\t\t      this.setShape(x,y,PadShape.parse(j$(data).attr(\"shape\")));\r\n\t\t\t  \r\n\t\t      var offset=(j$(data).find(\"offset\"));\r\n\t\t      this.offset.x=(parseFloat(j$(offset).attr(\"x\")));\r\n\t\t      this.offset.y=(parseFloat(j$(offset).attr(\"y\")));\r\n\t\t      \r\n\t\t      if(this.drill!=null){\r\n\t\t          this.drill.fromXML(j$(data).find(\"drill\"));\r\n\t\t      }   \r\n\r\n\t\t      var number=(j$(data).find(\"number\").text()); \r\n\t\t\t  var netvalue=(j$(data).find(\"netvalue\").text());\r\n\t\t\t  if(number==''){\r\n\t\t\t\t  this.number.setLocation(this.getX(), this.getY());\r\n\t\t\t  }else{\r\n\t\t\t\t  this.number.fromXML(number);\r\n\t\t\t  }\r\n\t\t\t  if(netvalue==''){\r\n\t\t\t\t  this.netvalue.setLocation(this.getX(), this.getY());\r\n\t\t\t  }else{\r\n\t\t\t\t  this.netvalue.fromXML(netvalue);\r\n\t\t\t  }\r\n\t\t     \r\n\t}\r\n\r\ngetPinPoint() {        \r\n    return this.shape.center;\r\n}\r\nalignToGrid(isRequired){\r\n\t     var center=this.shape.center;\r\n\t     var point=this.owningUnit.getGrid().positionOnGrid(center.x,center.y);\r\n\t     this.move(point.x - center.x,point.y - center.y);\r\n\t     return null;     \r\n\t}\t\r\ngetClickableOrder(){\r\n\t     return 2; \r\n\t}\r\nisClicked(x,y){\r\n\t    if(this.shape.contains(new d2.Point(x,y)))\r\n\t     return true;\r\n\t    else\r\n\t     return false;  \r\n\t }\r\nisInRect(r) {\r\n\t\t let rect=super.getBoundingShape();\r\n\t     if(r.contains(rect.center))\r\n\t         return true;\r\n\t        else\r\n\t         return false; \r\n\t}\r\nsetSelected (selection) {\r\n\tsuper.setSelected(selection);\r\n\tif(this.isControlPointVisible){\r\n\t\tthis.number.setSelected(selection);\r\n\t\tthis.netvalue.setSelected(selection);\r\n\t}\r\n}\r\nmove(xoffset, yoffset){\r\n\t   this.shape.move(xoffset, yoffset);\r\n\t   \r\n\t   if(this.drill!=null){\r\n\t     this.drill.move(xoffset, yoffset);\r\n\t   }\r\n\t   this.number.move(xoffset,yoffset);\r\n\t   this.netvalue.move(xoffset,yoffset);\r\n\t   \r\n\t}\r\n\r\nmirror(line) {\r\n\r\n}\r\nsetSide(side, line, angle) {\r\n    this.copper=core.Layer.Side.change(this.copper.getLayerMaskID());\r\n    this.netvalue.setSide(side,line,angle);\r\n    this.number.setSide(side,line,angle);\r\n    this.shape.mirror(line);\r\n    if(this.drill!=null){\r\n       this.drill.mirror(line);\r\n    }\r\n    this.rotation=angle;\r\n}\r\nsetRotation(rotate,center){\t\r\n\tlet alpha=rotate-this.rotation;\t\r\n\t\r\n\t  this.shape.rotate(alpha,center);\r\n\t  this.number.setRotation(rotate,center);\r\n\t  this.netvalue.setRotation(rotate,center);\r\n\t  if(this.drill!=null){\r\n\t    this.drill.rotate(alpha,center);\t   \r\n\t  }\r\n\tthis.rotation=rotate;\r\n}\r\nrotate(rotation){\r\n\tlet alpha=this.rotation+rotation.angle;\r\n\tif(alpha>=360){\r\n\t\talpha-=360\r\n\t}\r\n\t if(alpha<0){\r\n\t\t alpha+=360; \r\n\t }\r\n\tthis.shape.rotate(rotation.angle,rotation.origin);\t\r\n    if(this.drill!=null){\r\n     this.drill.rotate(rotation.angle,rotation.origin);\r\n    }\t\r\n\tthis.number.setRotation(alpha,rotation.origin);\r\n\tthis.netvalue.setRotation(alpha,rotation.origin);\r\n\tthis.rotation=alpha;\r\n\t\r\n\t}\r\nsetType(type) {\r\n\t        this.type = type;\r\n\t        switch(type){\r\n\t        case PadType.THROUGH_HOLE:\r\n\t            if(this.drill==null){\r\n\t            \tthis.drill=new Drill(this.shape.center.x,this.shape.center.y,core.MM_TO_COORD(0.8));\t\t               \t                \r\n\t            }\r\n\t            break;\r\n\t        case PadType.SMD:\r\n\t                this.drill=null;\r\n\t            break;\r\n\t\t\t}\r\n}\r\nsetShape(...args){\r\n\t    let shape,x,y; \r\n\t    if(args.length==1){\r\n\t      x=this.shape.center.x;\r\n\t      y=this.shape.center.y;\r\n\t      shape=args[0];\r\n\t    }else{\r\n\t\t  x=args[0];\r\n\t\t  y=args[1];\r\n\t\t  shape=args[2];\t      \t\r\n\t    }\r\n\t    switch(shape){\r\n\t    case PadShape.CIRCULAR:\r\n\t        this.shape=new CircularShape(x,y,this.width,this);\r\n\t    break;\r\n\t     case PadShape.OVAL: \r\n\t        this.shape=new OvalShape(x,y,this.width,this.height,this);\r\n\t        break;\r\n\t    case PadShape.RECTANGULAR:\r\n\t        this.shape=new RectangularShape(x,y,this.width,this.height,this);\r\n\t        break;\r\n\t    case PadShape.POLYGON:\r\n\t\t    this.shape = new PolygonShape(x,y,this.width,this);\r\n\t        break;\r\n\t    } \r\n\t    //restore rotation\r\n\t    if(this.rotation!=0){\r\n\t\t  this.shape.rotate(this.rotation);\r\n\t    }\r\n}\r\ngetShape(){\r\n\t\tif(this.shape instanceof CircularShape)\r\n\t        return PadShape.CIRCULAR;\r\n\t\tif(this.shape instanceof RectangularShape)\r\n\t        return PadShape.RECTANGULAR;\r\n\t\tif(this.shape instanceof OvalShape)\r\n\t        return PadShape.OVAL;\r\n\t\tif(this.shape instanceof PolygonShape)\r\n\t        return PadShape.POLYGON;\t\t\r\n}    \r\nsetWidth(width){\r\n\t        this.width=width;\r\n\t        this.shape.setSize(width,this.height);    \r\n\t    }\r\nsetHeight(height){\t        \r\n\t\t\tthis.height=height;\r\n\t        this.shape.setSize(this.width,height);\r\n\t    }\r\ncalculateShape() {\r\n\treturn this.shape.box;\r\n} \r\nvalidateClearance(source){\r\n    //1 is different layer and SMD -> no clearance\r\n    if ((this.type==PadType.SMD)&&(source.copper.getLayerMaskID() & this.copper.getLayerMaskID()) == 0) {       \r\n           return false; //not on the same layer\r\n    }       \r\n    //2. is same net \r\n    //if(isSameNet(source)&&source.getPadConnection()==PadShape.PadConnection.DIRECT){\r\n    //    return;\r\n    //}\r\n    \r\n    //3. is pad  within copper area\r\n    let rect = this.getBoundingShape();\r\n        rect.grow(source.clearance);\r\n        \r\n    if(!source.getBoundingShape().intersects(rect)){\r\n          return false; \r\n    }  \t\r\n    return true;\r\n}\r\ndrawClearence(g2,viewportWindow,scale,source){\r\n    if(!this.validateClearance(source)){\r\n        return;\r\n    }\r\n    \r\n    //g2.save();     \r\n    //g2.clip(source.clip);\r\n\r\n\tthis.shape.drawClearence(g2,viewportWindow,scale,source);\r\n\t//g2.restore();\r\n}\r\npaint(g2,viewportWindow,scale,layersmaskId){\r\n\tif((this.copper.getLayerMaskID()&layersmaskId)!=0) {\r\n\tswitch(this.type){\r\n\t    case PadType.THROUGH_HOLE:\r\n\t        if(this.shape.paint(g2, viewportWindow, scale,layersmaskId)){\r\n\t         if(this.drill!=null){\r\n\t            this.drill.paint(g2, viewportWindow, scale);\r\n\t         }\r\n\t        }\r\n\t        break;\r\n\t    case PadType.SMD:\r\n\t        this.shape.paint(g2, viewportWindow, scale,layersmaskId);\r\n\t        break;\r\n\t    \r\n\t    }\r\n\t    this.number.paint(g2, viewportWindow, scale);\r\n\t    this.netvalue.paint(g2, viewportWindow, scale);\r\n\t }\r\n\t}\r\n}\r\n\t//----------CircularShape-------------------\r\nclass CircularShape{\r\n\tconstructor(x,y,width,pad){\r\n\t\tthis.pad=pad;\r\n\t\tthis.circle=new d2.Circle(new d2.Point(x,y),width/2);\t\t\t\t\t\r\n\t}\r\n\tdrawClearence(g2,viewportWindow,scale,source){\r\n\t    let c=this.circle.clone();\r\n\t    \r\n\t\t\r\n\t\tg2._fill=true;\r\n\t\tg2.fillStyle = \"black\";\t\r\n\t\t\r\n\t\tc.grow(source.clearance);\r\n\t\t\r\n\t\t\r\n\t    c.scale(scale.getScale());\t\t\r\n\t    c.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tc.paint(g2);\r\n\t\t\r\n\t    g2._fill=false;\t\t\t\r\n\t}\t\r\n    paint(g2,viewportWindow,scale,layermaskId){\r\n    \t var rect = this.circle.box;\r\n\t\t rect.grow(this.pad.solderMaskExpansion);\r\n       \t rect.scale(scale.getScale());\r\n       \t if (!rect.intersects(viewportWindow)) {\r\n      \t\t  return;\r\n       \t }\t    \r\n\t\tg2._fill=true;\r\n        var c=PadFactory.acquire('Circle');\r\n        try {\r\n        //draw solder mask\t\r\n        if((((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_FRONT)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_FRONT)!=0))||\r\n        \t(((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_BACK)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_BACK)!=0))) {\r\n         c.assign(this.circle);                 \r\n         c.grow(this.pad.solderMaskExpansion);\r\n         c.scale(scale.getScale());\r\n         c.move(-viewportWindow.x, -viewportWindow.y);        \r\n         g2.fillStyle=(this.pad.isSelected() ? \"gray\" : core.Layer.Copper.BMask.getColor());\r\n\r\n         c.paint(g2);\r\n        }\r\n      //draw pad shape\r\n        if(((this.pad.copper.getLayerMaskID()&layermaskId)!=0)) {\t                           \r\n        \tc.assign(this.circle);\r\n        \tc.scale(scale.getScale());\r\n        \tc.move(-viewportWindow.x, -viewportWindow.y);\r\n            g2.fillStyle=(this.pad.isSelected() ? \"gray\" : this.pad.copper.getColor());\r\n        \tc.paint(g2);\r\n        }\r\n        }finally {\r\n        \tPadFactory.release(c);\t\r\n            g2._fill=false;\r\n\t\t}\r\n        \t\t\r\n\t\treturn true;\r\n\t}\r\n    copy(pad){\r\n  \t  let _copy=new CircularShape(0,0,0,pad);\r\n  \t  _copy.circle=this.circle.clone();\t  \r\n  \t  return _copy;  \r\n  \t} \r\n    rotate(alpha,origin){\r\n    \tif(origin==null){\r\n    \t  this.circle.rotate(alpha);\r\n    \t}else{\r\n    \t  this.circle.rotate(alpha,origin);\t\r\n    \t}\r\n    }    \r\n    contains(pt){\r\n    \treturn this.circle.contains(pt);\r\n    }\r\n    mirror(line) {\r\n        this.circle.mirror(line);\r\n    }\r\n\tmove(xoffset, yoffset) {\r\n\t\tthis.circle.move(xoffset,yoffset);\r\n\t}\t\r\n\tget box(){\r\n\t\treturn this.circle.box;\r\n\t}\r\n\tget center(){\r\n\t\treturn this.circle.center;\t\r\n\t}\r\n    setSize(width,height) {\r\n\t   this.circle.r=width/2;\r\n\t}\r\n    \r\n\r\n}\r\n//------------RectangularShape----------------\r\nclass RectangularShape{\r\n\tconstructor(x,y,width,height,pad){\r\n\t\tthis.pad=pad;\r\n\t\tthis.rect=new d2.Rectangle(new d2.Point(x-width/2,y-height/2),width,height);\t\t\t\r\n}\r\ndrawClearence(g2,viewportWindow,scale,source){\r\n    let r=this.rect.clone();\r\n    \r\n\t\r\n\tg2._fill=true;\r\n\tg2.fillStyle = \"black\";\t\r\n\t\r\n\tr.grow(source.clearance);\r\n\t\r\n    r.scale(scale.getScale());\t\t\r\n    r.move(-viewportWindow.x,- viewportWindow.y);\r\n\tr.paint(g2);\r\n\t\r\n    g2._fill=false;\t\t\t\r\n}\r\npaint(g2,viewportWindow,scale,layermaskId){\r\n\t   var box=this.rect.box;\r\n       box.grow(this.pad.solderMaskExpansion);\r\n\t   box.scale(scale.scale);     \r\n       //check if outside of visible window\r\n\t   var window=new d2.Box(0,0,0,0);\r\n\t   window.setRect(viewportWindow.x,viewportWindow.y,viewportWindow.width,viewportWindow.height);\r\n       if(!box.intersects(window)){\r\n         return false;\r\n       }\r\n       /*\r\n\t    if(this.pad.isSelected())\r\n\t      g2.fillStyle = \"gray\";  \r\n\t    else{\r\n\t      g2.fillStyle = this.pad.copper.getColor();\r\n\t    }\r\n\t    g2._fill=true;\r\n        let r=this.rect.clone();\r\n\t\tr.scale(scale.getScale());\r\n        r.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\tr.paint(g2);\r\n\t    \r\n\t\tg2._fill=false;\r\n\t    */\r\n \t\tg2._fill=true;\r\n        var r=PadFactory.acquire('Rectangle');\r\n        try {\r\n            //draw solder mask\t\r\n          if((((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_FRONT)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_FRONT)!=0))||\r\n            \t(((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_BACK)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_BACK)!=0))) {        \t       \t\r\n        \tr.assign(this.rect);\r\n            r.grow(this.pad.solderMaskExpansion);\r\n            r.scale(scale.getScale());\r\n            r.move(-viewportWindow.x, -viewportWindow.y);        \r\n            g2.fillStyle=(this.pad.isSelected() ? \"gray\" :core.Layer.Copper.BMask.getColor());\r\n            r.paint(g2);\r\n          }\r\n            \t  \r\n          //draw pad shape  \r\n          if(((this.pad.copper.getLayerMaskID()&layermaskId)!=0)) {\t                 \r\n            r.assign(this.rect);\r\n            r.scale(scale.getScale());\r\n            r.move(-viewportWindow.x, -viewportWindow.y);\r\n            g2.fillStyle=this.pad.isSelected() ? \"gray\" : this.pad.copper.getColor();\r\n            r.paint(g2);        \t\r\n          }\r\n        }finally {\r\n        \tPadFactory.release(r);\r\n\t\t\tg2._fill=false;\r\n        }\r\n\t\treturn true;\r\n}\r\ncopy(pad){\r\n  let _copy=new RectangularShape(0,0,0,0,pad);\r\n  _copy.rect=this.rect.clone();\t  \r\n  return _copy;  \r\n}\r\ncontains(pt){\r\n\treturn this.rect.contains(pt);\r\n}\r\nrotate(alpha,origin){\r\n\tif(origin==null){\r\n\t\t  this.rect.rotate(alpha);\r\n\t}else{\r\n\t\t  this.rect.rotate(alpha,origin);\t\r\n\t}\r\n\t\r\n}\r\nmirror( line) {\r\n    this.rect.mirror(line);\r\n}\r\nmove(xoffset, yoffset) {\r\n\tthis.rect.move(xoffset,yoffset);\r\n}\r\nget box(){\r\n\treturn this.rect.box;\r\n}\r\nget center(){\r\n\treturn this.rect.box.center;\t\r\n}\r\nsetSize(width,height) {\r\n\t\t   this.rect.setSize(width,height);\r\n\t\t   this.rect.rotate(this.pad.rotation);\r\n}\r\n}\r\n//------------OvalShape-----------------------\r\nclass OvalShape{\r\n\tconstructor(x,y,width,height,pad){\r\n\t   this.pad=pad;\r\n\t   this.obround=new d2.Obround(new d2.Point(x,y),width,height);\r\n\t}\r\n\tdrawClearence(g2,viewportWindow,scale,source){\r\n\t\tlet o=this.obround.clone();\r\n\t    o.grow(source.clearance,this.pad.rotation);\r\n\t    g2.strokeStyle = \"black\";  \r\n\r\n\t\to.scale(scale.getScale());\r\n\t    o.move(-viewportWindow.x,- viewportWindow.y);\r\n\t\to.paint(g2);\r\n\t\t\r\n\t}\r\npaint(g2,viewportWindow,scale,layermaskId){\r\n\t     var box=this.obround.box;\r\n         box.grow(this.pad.solderMaskExpansion);\r\n\t     box.scale(scale.scale);     \r\n       //check if outside of visible window\r\n\t     var window=new d2.Box(0,0,0,0);\r\n\t     window.setRect(viewportWindow.x,viewportWindow.y,viewportWindow.width,viewportWindow.height);\r\n         if(!box.intersects(window)){\r\n           return false;\r\n         }\r\n        var o=PadFactory.acquire('Obround');\r\n        try {\r\n            //draw solder mask\t\r\n        if((((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_FRONT)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_FRONT)!=0))||\r\n            \t(((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_BACK)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_BACK)!=0))) {        \t      \t\r\n\t\t\to.assign(this.obround);                \r\n        \to.grow(this.pad.solderMaskExpansion,this.pad.rotation);\r\n        \to.scale(scale.getScale());\r\n        \to.move(-viewportWindow.x, -viewportWindow.y);        \r\n        \tg2.strokeStyle=(this.pad.isSelected() ? \"gray\" : core.Layer.Copper.BMask.getColor());\r\n        \to.paint(g2);\r\n        }\t  \r\n        //draw pad shape        \r\n        if(((this.pad.copper.getLayerMaskID()&layermaskId)!=0)) {\t        \r\n        \to.assign(this.obround);\r\n        \to.scale(scale.getScale());\r\n        \to.move(-viewportWindow.x, -viewportWindow.y);\r\n            g2.strokeStyle=(this.pad.isSelected() ? \"gray\" : this.pad.copper.getColor());\r\n        \to.paint(g2);\r\n        }\r\n        }finally {\r\n        \tPadFactory.release(o);\t\r\n\t\t}\r\n\r\n\r\n\t      return true;\r\n}\r\ncopy(pad){\r\n\t  let _copy=new OvalShape(0,0,0,0,pad);\r\n\t  _copy.obround=this.obround.clone();\t  \r\n\t  return _copy;  \r\n\t}\r\nrotate(alpha,origin){\r\n\tif(origin==null){\r\n\t  this.obround.rotate(alpha);\r\n\t}else{\r\n\t  this.obround.rotate(alpha,origin);\t\r\n\t}\r\n}\r\ncontains(pt){\r\n\treturn this.obround.contains(pt);\r\n}\r\nmove(xoffset, yoffset) {\r\n\tthis.obround.move(xoffset,yoffset);\r\n}\r\nmirror(line) {\r\n    this.obround.mirror(line);\r\n}\r\nget box(){\r\n\treturn this.obround.box;\r\n}\r\nget center(){\r\n\treturn this.obround.center;\t\r\n}\r\nsetSize(width,height) {\t    \r\n\t    this.obround.setSize(width,height);\r\n\t    this.obround.rotate(this.pad.rotation);\r\n}\r\n}\r\n\r\n//--------------PolygonShape-------------------------\r\nclass PolygonShape{\r\nconstructor(x,y,width,pad){\r\n\t\tthis.pad=pad;\r\n\t\tthis.hexagon=new d2.Hexagon(new d2.Point(x,y),width);\t\t\r\n}\t\r\ndrawClearence(g2,viewportWindow,scale,source){\r\n\t    let h=this.hexagon.clone();\r\n\t    h.grow(source.clearance);\r\n     \r\n\t    g2._fill=true;\t\t   \r\n\t\tg2.fillStyle = \"black\";\t\r\n\t    h.scale(scale.getScale());\r\n        h.move(-viewportWindow.x,- viewportWindow.y);\r\n\t    h.paint(g2);\r\n\t    \r\n\t    g2._fill=false;\r\n}\r\npaint(g2, viewportWindow, scale,layermaskId) {\r\n\t\t   var box=this.hexagon.box;\r\n           box.grow(this.pad.solderMaskExpansion);\r\n\t\t   box.scale(scale.scale);     \r\n\t       //check if outside of visible window\r\n\t\t   var window=new d2.Box(0,0,0,0);\r\n\t\t   window.setRect(viewportWindow.x,viewportWindow.y,viewportWindow.width,viewportWindow.height);\r\n\t       if(!box.intersects(window)){\r\n\t         return false;\r\n\t       }\r\n\t\t   g2._fill=true;\r\n        var h=PadFactory.acquire('Hexagon');\r\n        try {\r\n            //draw solder mask\t\r\n        if((((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_FRONT)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_FRONT)!=0))||\r\n            \t(((this.pad.copper.getLayerMaskID()&core.Layer.LAYER_BACK)!=0)&&((layermaskId&core.Layer.SOLDERMASK_LAYER_BACK)!=0))) {        \t        \t\r\n        \th.assign(this.hexagon);        \r\n        \th.grow(this.pad.solderMaskExpansion);\r\n        \th.scale(scale.getScale());\r\n        \th.move(-viewportWindow.x, -viewportWindow.y);        \r\n        \tg2.fillStyle=(this.pad.isSelected() ? \"gray\" : core.Layer.Copper.BMask.getColor());\r\n        \th.paint(g2);\r\n        }\r\n        \t  \r\n        //draw pad shape  \r\n        if(((this.pad.copper.getLayerMaskID()&layermaskId)!=0)) {\t \r\n        \th.assign(this.hexagon);\r\n        \th.scale(scale.getScale());\r\n        \th.move(-viewportWindow.x, -viewportWindow.y);\r\n        \tg2.fillStyle=(this.pad.isSelected() ? \"gray\" : this.pad.copper.getColor());\r\n        \th.paint(g2);\r\n        }\r\n        }finally {\r\n        \tPadFactory.release(h);\t\r\n            g2._fill=false;\r\n\t\t}\r\n                    \r\n        return true;\r\n}\r\ncopy(pad){\r\n\t  let _copy=new PolygonShape(0,0,0,pad);\r\n\t  _copy.hexagon=this.hexagon.clone();\t  \r\n\t  return _copy;  \r\n\t}\r\ncontains(pt){\r\n\t\treturn this.hexagon.contains(pt);\r\n\t}\r\nrotate(alpha,origin){\r\n\tif(origin==null){\r\n\t  this.hexagon.rotate(alpha);\r\n\t}else{\r\n\t  this.hexagon.rotate(alpha,origin);\t\r\n\t}\r\n}\r\nget box(){\r\n\treturn this.hexagon.box;\r\n}\r\nget center(){\r\n\treturn this.hexagon.center;\t\r\n}\r\nmove(xoffset, yoffset) {\r\n\t\tthis.hexagon.move(xoffset,yoffset);\r\n}\r\nmirror(line) {\r\n   this.hexagon.mirror(line);\r\n}\r\nsetSize(width,height) {\r\n   this.hexagon.setWidth(width);\r\n   this.hexagon.rotate(this.pad.rotation);\r\n}\r\n\t\r\n}\r\nvar PadFactory = (function () {\r\n    var cache = new Map();\r\n\t\tcache.set('Circle',new d2.Circle(new d2.Point(), 0));\r\n\t\tcache.set('Rectangle',new d2.Rectangle(0, 0, 0, 0));\r\n\t\tcache.set('Obround',new d2.Obround(new d2.Point(0, 0), 0, 0));\r\n\t\tcache.set('Hexagon',new d2.Hexagon(new d2.Point(0, 0), 10));\r\n    return {\r\n\r\n        acquire: function (clazz) {\r\n\t\t var pad=cache.get(clazz);\r\n\t\t if(pad==null) {\r\n\t\t\t throw new Error(\"Unknown figure class: \"+clazz);\r\n\t\t }else {\r\n\t\t     cache.set(clazz, null);\r\n\t\t\t return pad;\r\n\t\t }\r\n        },\r\n\r\n        release: function (instance) {\r\n\t\t\tcache.set(instance.constructor.name,instance)\r\n        }\r\n    }\r\n})();\r\nmodule.exports ={\r\n\tGlyphLabel,\r\n\tLine,\r\n\tRoundRect,\r\n\tCircle,\r\n\tArc,\r\n\tSolidRegion,\r\n\tPad,Drill,PadType,\r\n\tFootprintShapeFactory\r\n}\r\n","var mywebpcb=require('core/core').mywebpcb;\r\nvar core=require('core/core');\r\nvar FootprintContainer=require('pads/d/footprintcomponent').FootprintContainer;\r\n\r\nvar FootprintLoadView=Backbone.View.extend({\r\n\t  initialize:function(opt){\r\n\t\t\tj$('#FootprintLoadDialog').jqxWindow('open');\r\n\t\t\tj$('#FootprintLoadDialog').off('close', j$.proxy(this.onclose,this)); \r\n\t\t\tj$('#FootprintLoadDialog').on('close', j$.proxy(this.onclose,this)); \t\t\t\r\n\t\t\tthis.unitSelectionPanel=new core.UnitSelectionPanel({selectorid:'unitselectionpanel',canvasprefixid:'f',enabled:opt.enabled});\r\n\t\t\tthis.libraryview=new LibraryView({unitSelectionPanel:this.unitSelectionPanel});  \r\n\t    \tthis.buttonview=new ButtonView({unitSelectionPanel:this.unitSelectionPanel});  \r\n\t    \tj$('#loadtitle').html(\"Load Footprint\");\r\n\t\t  },\r\n      onclose:function(){\r\n    \t  this.undelegateEvents();\r\n    \t  this.unitSelectionPanel.release();\r\n    \t  this.libraryview.clear();\r\n    \t  this.buttonview.clear();\r\n    \t  this.remove();\r\n    \t  this.unbind();\r\n      },\t\t  \r\n      render:function(){\r\n    \tthis.libraryview.render();  \r\n    \tthis.buttonview.render();\r\n    \tthis.unitSelectionPanel.render();\r\n      }\r\n\t\t  \r\n});\r\n\r\nvar LibraryView=Backbone.View.extend({\r\n\tel:\"#librarycomboslot\",\r\n\tinitialize:function(opt){\r\n\t\tthis.unitSelectionPanel=opt.unitSelectionPanel;\r\n\t\tj$('#footprinttree').jqxTree({width: '100%',height:'260px'});\r\n\t\t//bind select element\r\n\t\tj$('#footprinttree').on('select',j$.proxy(this.onvaluechange,this));\t\t\t\r\n        this.loadlibrary();\r\n\t},\r\n\tclear:function(){\r\n\t    //unbind select element\t\t\r\n\t\tj$('#footprinttree').off('select',j$.proxy(this.onvaluechange,this));\r\n\t\tj$('#footprinttree').jqxTree('clear');\r\n\t\tj$('#librarycombo').html(\"\");\r\n\t\tthis.undelegateEvents();\r\n\t},\r\n    events: {\r\n        'change #librarycombo':'onchange',\r\n    },\r\n    onchange:function(event){\r\n    \tthis.loadcategories(j$('#librarycombo').val()); \r\n    },\r\n    onvaluechange:function(event){\r\n        //is this category or footprint selection\r\n    \tvar item = j$('#footprinttree').jqxTree('getItem', event.args.element);\r\n    \tvar url=\"\";\r\n    \tvar callback=null;\r\n    \tif(item.value.fullname!=undefined&&item.value.category!=undefined){\r\n    \t\tcallback=this.loadfootprint;\r\n    \t  url=item.value.library+\"/categories/\"+item.value.category+\"/\"+item.value.fullname;\t\r\n    \t}else if(item.value.category==undefined){\r\n    \t\tcallback=this.loadfootprint;\r\n        \t  url=item.value.library+\"/categories/null/\"+item.value.fullname;\t    \t\r\n    \t}else{\r\n    \t\t//escape if full \r\n    \t  var children = j$(item.element).find(\"li\");\r\n          if(children.length!=0){\r\n        \t  return;\r\n          }\r\n    \t  callback=this.loadfootprints;\r\n    \t  url=item.value.library+\"/categories/\"+item.value.category;\r\n    \t}\r\n    \t\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/footprints/libraries/'+url,\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#FootprintLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(callback,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#FootprintLoadDialog').unblock();\r\n\t        }\r\n\t    });\r\n    \t\r\n    },\r\n    loadfootprint:function(data, textStatus, jqXHR){\r\n      this.unitSelectionPanel.release();\r\n      footprintContainer=new FootprintContainer();\r\n      //disable \r\n      core.isEventEnabled=false;\r\n      footprintContainer.parse(data);\r\n      core.isEventEnabled=true;\r\n      this.unitSelectionPanel.unitSelectionGrid.setModel(footprintContainer);\r\n      this.unitSelectionPanel.unitSelectionGrid.build();   \r\n      this.unitSelectionPanel.render();\r\n//****load it    \t\r\n//\t\t  this.footprintComponent.Clear();\r\n//\t\t  this.footprintComponent.setMode(mywebpads.ModeEnum.COMPONENT_MODE);\r\n//\t\t  this.footprintComponent.getModel().Parse(data);\r\n//\t\t  this.footprintComponent.getModel().setActiveUnit(0);\r\n//\t\t  this.footprintComponent.componentResized();\r\n//          //position on center\r\n//          rect=this.footprintComponent.getModel().getUnit().getBoundingRect();\r\n//          this.footprintComponent.setScrollPosition(rect.getCenterX(),rect.getCenterY());\r\n//          this.footprintComponent.getModel().fireUnitEvent({target:this.footprintComponent.getModel().getUnit(),type: mywebpads.unit.Event.SELECT_UNIT});\r\n//\t\t  this.footprintComponent.Repaint();\r\n//\t\t  //set button group\r\n//\t\t  this.footprintComponent.getView().setButtonGroup(mywebpads.ModeEnum.COMPONENT_MODE);\r\n    },\r\n    loadfootprints:function(data, textStatus, jqXHR){\r\n    \tvar item = j$('#footprinttree').jqxTree('getSelectedItem');\r\n\t\tvar that=this; \r\n\t\t//fill category with footprints\r\n\t\tj$(data).find(\"name\").each(j$.proxy(function(){\t\r\n\t\t\tj$('#footprinttree').jqxTree('addTo', { label: j$(this).text(),value:{library:j$(this).attr(\"library\"),category:j$(this).attr(\"category\"),fullname:j$(this).attr(\"fullname\")}}, item);         \r\n\t\t}),that);\r\n\t\tj$('#footprinttree').jqxTree('render');\r\n\t\t//expand\r\n\t\tj$('#footprinttree').jqxTree('expandItem', item.element);\r\n    },\r\n    loadlibrary:function(){\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/footprints/libraries',\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#FootprintLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(this.onloadlibraries,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#FootprintLoadDialog').unblock();\r\n\t        }\r\n\t    });\r\n\t    \r\n\t}, \r\n\tonloadlibraries:function(data, textStatus, jqXHR){\r\n\t\tvar that=this; \r\n\t\tj$(data).find(\"name\").each(j$.proxy(function(){\r\n\t\t  j$('#librarycombo').append('<option value=' +j$(this).text()+ '>' +  j$(this).text() + '</option>');\r\n\t\t}),that);\r\n\t\t//category load\t\t\r\n\t\tthis.loadcategories(j$('#librarycombo').val());\r\n\t},\t\r\n\tloadcategories:function(library){\r\n\t    j$.ajax({\r\n\t        type: 'GET',\r\n\t        contentType: 'application/xml',\r\n\t        url: '/rest/footprints/libraries/'+library+'/categories',\r\n\t        dataType: \"xml\",\r\n\t        beforeSend:function(){\r\n\t\t          j$('#FootprintLoadDialog').block({message:'<h5>Loading...</h5>'});\t\r\n\t\t        },\r\n\t        success: j$.proxy(this.onloadcategories,this),\r\n\t        \r\n\t        error: function(jqXHR, textStatus, errorThrown){\r\n\t            \talert(errorThrown+\":\"+jqXHR.responseText);\r\n\t        },\r\n\t        complete:function(jqXHR, textStatus){\r\n\t        \tj$('#FootprintLoadDialog').unblock();\r\n\t        }\r\n\t    });\t\t\r\n\t},\r\n\tonloadcategories:function(data, textStatus, jqXHR){\r\n\t\tvar that=this; \r\n\t\tj$('#footprinttree').jqxTree('clear');\r\n\t\tj$(data).find(\"name\").each(j$.proxy(function(){\t\r\n\t\t\tj$('#footprinttree').jqxTree('addTo', { label: j$(this).text(),value:{library:j$(this).attr(\"library\"),category:j$(this).attr(\"category\"),fullname:(j$(this).attr(\"category\")==undefined?j$(this).text():undefined)}}, null);         \r\n\t\t}),that);\t\t\r\n\t\tj$('#footprinttree').jqxTree('render');\r\n\t},\r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<select class=\\\"form-control input-sm\\\" id=\\\"librarycombo\\\">\"+\r\n\t    \"</select>\");\r\n\t\t\r\n\t}\r\n});\r\nvar ButtonView=Backbone.View.extend({\r\n\tel:\"#buttonslot\",\r\n\tinitialize:function(opt){\r\n\t  this.unitSelectionPanel=opt.unitSelectionPanel;\r\n    },\t\r\n    clear:function(){\r\n       this.undelegateEvents();\r\n    },\r\n    events: {\r\n        \"click  #loadbuttonid\" : \"onload\",\t\r\n        \"click  #closebuttonid\" : \"onclose\",\t\r\n    },\r\n    onload:function(e){\r\n    \t if(this.unitSelectionPanel.unitSelectionGrid.model==null){\r\n    \t\t return;\r\n    \t }\r\n    \t//attach mouse position\r\n    \tthis.unitSelectionPanel.unitSelectionGrid.model.event=e;    \t    \t\r\n    \tmywebpcb.trigger('libraryview:load',this.unitSelectionPanel.unitSelectionGrid.model);\r\n\t\t//close dialog \r\n\t\tj$('#FootprintLoadDialog').jqxWindow('close');\r\n    },\r\n    onclose:function(){\r\n    \tj$('#FootprintLoadDialog').jqxWindow('close'); \t\r\n    },\r\n    \r\n\trender:function(){\r\n\t\tj$(this.el).empty();\r\n\t\tj$(this.el).append(\r\n\t\t\"<button  id=\\\"loadbuttonid\\\" class=\\\"btn btn-default\\\">Load</button>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+\r\n\t    \"<button  id=\\\"closebuttonid\\\" class=\\\"btn btn-default\\\">Close</button>\");\r\n\t}\r\n});\r\n\r\nmodule.exports =FootprintLoadView\t\r\n\r\n\r\n"]}